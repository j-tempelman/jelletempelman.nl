%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OBSK511.eps
%%Creator: Adobe Illustrator(R) 19.0
%%For: Jelle
%%CreationDate: 2/2/2017
%%BoundingBox: 0 0 1001 1001
%%HiResBoundingBox: 0 0 1000.0480 1000.0480
%%CropBox: 0 0 1000.0480 1000.0480
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.0.0 x44 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2016-08-05T06:24:29+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7hpOn2/n63h8wa0ol0KU&#xA;FtD0cPtGN1+t3JQ/71deCg/uP+MlSFUPqnnTU/LupWvk95Yr7XNSKx6HqNy6rGI35ANqAUqRInBg&#xA;gWn1giicTz4KpnH5JOkwnVNKuy3mQVl1DUbtqLqBI+KO74iiptSIov7n9gceSMqgNE8w2f5kxSi3&#xA;Jh8u2rLHqVmzIZ7qZkEnoyBGYC14sDUH9/2/df3irtb8w2f5bRRC4Jm8u3TNHptmrIJ7WZUMnoxh&#xA;2UG14qTUn9x3/df3aqPk8knVoRqmq3ZXzIaS6fqNo1V08gfDHachRk3pKXX99+2OPFFVSzS/Omp+&#xA;YtSuvJ6SxWOuaaWj1zUbZ1aMxpxBbTwxYmR+ahw1fq5NH5HhzVRGrafb+QbebzBoqiLQogG1zRy+&#xA;0g2X63bFz/vV05qT+/8A+MlCVXaTp9v5+t4fMGtKJdClBbQ9HD7RjdfrdyUP+9XXgoP7j/jJUhVD&#xA;6p501Py7qVr5PeWK+1zUiseh6jcuqxiN+QDagFKkSJwYIFp9YIonE8+CqZx+STpMJ1TSrst5kFZd&#xA;Q1G7ai6gSPiju+IoqbUiKL+5/YHHkjKpTo2uW/5neqsZNv5WsmSPULBnQz3s7IsnpS+mzAWYVgdj&#xA;+/8A+MX94qr635hs/wAtoohcEzeXbpmj02zVkE9rMqGT0Yw7KDa8VJqT+47/ALr+7VR8nkk6tCNU&#xA;1W7K+ZDSXT9RtGqunkD4Y7TkKMm9JS6/vv2xx4oqqWaX501PzFqV15PSWKx1zTS0euajbOrRmNOI&#xA;LaeGLEyPzUOGr9XJo/I8OaqI1bT7fyDbzeYNFURaFEA2uaOX2kGy/W7Yuf8AerpzUn9//wAZKEqu&#xA;0nT7fz9bw+YNaUS6FKC2h6OH2jG6/W7kof8AerrwUH9x/wAZKkKofVPOmp+XdStfJ7yxX2uakVj0&#xA;PUbl1WMRvyAbUApUiRODBAtPrBFE4nnwVTOPySdJhOqaVdlvMgrLqGo3bUXUCR8Ud3xFFTakRRf3&#xA;P7A48kZVKdG1y3/M71VjJt/K1kyR6hYM6Ge9nZFk9KX02YCzCsDsf3//ABi/vFURrnmK0/LeKMXJ&#xA;M/l27Zo9NtFZfXtZlQyeinNlBteKk1J/cd/3X92qjpPJJ1aEapqt2V8yGkun6jaNVdPIHwx2nIUZ&#xA;N6Sl1/fftjjxRVUs0vzpqfmLUrryeksVjrmmlo9c1G2dWjMacQW08MWJkfmocNX6uTR+R4c1URq2&#xA;n2/kG3m8waKoi0KIBtc0cvtINl+t2xc/71dOak/v/wDjJQlV2k6fb+freHzBrSiXQpQW0PRw+0Y3&#xA;X63clD/vV14KD+4/4yVIVQ+qedNT8u6la+T3livtc1IrHoeo3LqsYjfkA2oBSpEicGCBafWCKJxP&#xA;Pgqmcfkk6TCdU0q7LeZBWXUNRu2ouoEj4o7viKKm1Iii/uf2Bx5IyqU6Nrlv+Z3qrGTb+VrJkj1C&#xA;wZ0M97OyLJ6UvpswFmFYHY/v/wDjF/eKojXPMVp+W8UYuSZ/Lt2zR6baKy+vazKhk9FObKDa8VJq&#xA;T+47/uv7tVHSeSTq0I1TVbsr5kNJdP1G0aq6eQPhjtOQoyb0lLr++/bHHiiqpZpfnTU/MWpXXk9J&#xA;YrHXNNLR65qNs6tGY04gtp4YsTI/NQ4av1cmj8jw5qojVtPt/INvN5g0VRFoUQDa5o5faQbL9bti&#xA;5/3q6c1J/f8A/GShKqT+eddvvKfmB18lWr6rrepxSXmr+XYUMkccaqR+lCqsnpyclC+mCDcH4RRx&#xA;yxVkHl3QfJmteTJHWddd07XV+sajqkxpJdSD/djsOBiaIpRFXj6PEBQvHFWGaJrl5rd/a+XPMF5L&#xA;c+SJpng0PXZU4DXjHQpa3MgIHFfiAPEC741Hw8lkVZP+Y8cGjSWXmHRW9HzdVbLTbCJeX6USpb6j&#xA;LGKVQDk6y/7o3evHmGVd+XEcGsyXvmHWm9bzdVrLUrCVeP6LSob6jFGa0Qji7S/7v2evHgFVYxre&#xA;uXmiX915c8v3ktt5IhmSDXNdiTmNBMlS9rbSEkcW+EE8SLTlU/DxWNVmfmLQfJmi+TI3addC07Ql&#xA;+sadqkJrJayH/diMeZlaUvR1bl63Ihg3LFWP+RtdvvNnmBF862r6VremRR3mkeXZkMcckbKB+lAr&#xA;M/qScmK+mSTbn4TVzyxV3nnXb7yn5gdfJVq+q63qcUl5q/l2FDJHHGqkfpQqrJ6cnJQvpgg3B+EU&#xA;ccsVZB5d0HyZrXkyR1nXXdO11frGo6pMaSXUg/3Y7DgYmiKURV4+jxAULxxVhmia5ea3f2vlzzBe&#xA;S3PkiaZ4ND12VOA14x0KWtzICBxX4gDxAu+NR8PJZFWT/mPHBo0ll5h0VvR83VWy02wiXl+lEqW+&#xA;oyxilUA5Osv+6N3rx5hlXflxHBrMl75h1pvW83Vay1KwlXj+i0qG+oxRmtEI4u0v+79nrx4BVWMa&#xA;3rl5ol/deXPL95LbeSIZkg1zXYk5jQTJUva20hJHFvhBPEi05VPw8VjVZn5i0HyZovkyN2nXQtO0&#xA;JfrGnapCayWsh/3YjHmZWlL0dW5etyIYNyxVj/kbXb7zZ5gRfOtq+la3pkUd5pHl2ZDHHJGygfpQ&#xA;KzP6knJivpkk25+E1c8sVd5512+8p+YHXyVavqut6nFJeav5dhQyRxxqpH6UKqyenJyUL6YINwfh&#xA;FHHLFWQeXdB8ma15MkdZ113TtdX6xqOqTGkl1IP92Ow4GJoilEVePo8QFC8cVYZomuXmt39r5c8w&#xA;Xktz5ImmeDQ9dlTgNeMdClrcyAgcV+IA8QLvjUfDyWRVk/5jxwaNJZeYdFb0fN1VstNsIl5fpRKl&#xA;vqMsYpVAOTrL/ujd68eYZV35cRwazJe+Ydab1vN1WstSsJV4/otKhvqMUZrRCOLtL/u/Z68eAVVj&#xA;Gt65eaJf3Xlzy/eS23kiGZINc12JOY0EyVL2ttISRxb4QTxItOVT8PFY1WaeYPL/AJO0fydERKuh&#xA;2Ghr6+manBvLbSnYSRk82meZno6Hl63IqwbliqQeStZv/NPmNYvO1q2l65pUcd3pPl2VeEUkbKB+&#xA;kwCz+pJyYr6fI/Vz8Jqx54qt8867feU/MDr5KtX1XW9TikvNX8uwoZI441Uj9KFVZPTk5KF9MEG4&#xA;PwijjlirIPLug+TNa8mSOs667p2ur9Y1HVJjSS6kH+7HYcDE0RSiKvH0eICheOKsM0TXLzW7+18u&#xA;eYLyW58kTTPBoeuypwGvGOhS1uZAQOK/EAeIF3xqPh5LIqyf8x44NGksvMOit6Pm6q2Wm2ES8v0o&#xA;lS31GWMUqgHJ1l/3Ru9ePMMq78uI4NZkvfMOtN63m6rWWpWEq8f0WlQ31GKM1ohHF2l/3fs9ePAK&#xA;qxjW9cvNEv7ry55fvJbbyRDMkGua7EnMaCZKl7W2kJI4t8IJ4kWnKp+HisarNPMHl/ydo/k6IiVd&#xA;DsNDX19M1ODeW2lOwkjJ5tM8zPR0PL1uRVg3LFUg8lazf+afMaxedrVtL1zSo47vSfLsq8IpI2UD&#xA;9JgFn9STkxX0+R+rn4TVjzxVX/K6e00STUtA18fV/O4LX2tahcOG/ScYPFb+CUhQYFX4fSAHofYp&#xA;0LKsQ1LTtT1vUNS8zeV7C4m/Li5mSXXdEgf0214pyE93Zwldk+zyUMv1sKR0ILqs583ecvIdz5Dt&#xA;nWFdfsdfUW2h6NabTXkw+xFCo4tC0LLVnNPRpU0IxVIfy/TW/LfmS3t/zIk+teZNUhjttB19pPVt&#xA;/TCBn0xW4RiO4DKXZiK3HWpK8Qq7z+mteZPMk9v+XEn1XzHpUL22va+knpW/plCyaYzcJBJcFm5q&#xA;wFbfrUFuJVT7yj5y8h23kO5doV0Cx0BTba5o13vNZzH7cUynk0zTM1VcV9atRUnFWDabp2p6JqGm&#xA;+ZvNFhcQ/lxbTPLoWiTv6jaCX4iC7vIQu6fa4qWb6oGA6AlFWX/mjPaa3JpugaAPrHnclb7RdQt3&#xA;C/oyMni1/PKAwEDL8PpEH1/sU6lVXfldPaaJJqWga+Pq/ncFr7WtQuHDfpOMHit/BKQoMCr8PpAD&#xA;0PsU6FlWIalp2p63qGpeZvK9hcTflxczJLruiQP6ba8U5Ce7s4SuyfZ5KGX62FI6EF1Wc+bvOXkO&#xA;58h2zrCuv2OvqLbQ9GtNpryYfYihUcWhaFlqzmno0qaEYqkP5fprflvzJb2/5kSfWvMmqQx22g6+&#xA;0nq2/phAz6YrcIxHcBlLsxFbjrUleIVd5/TWvMnmSe3/AC4k+q+Y9Khe217X0k9K39MoWTTGbhIJ&#xA;Lgs3NWArb9agtxKqfeUfOXkO28h3LtCugWOgKbbXNGu95rOY/bimU8mmaZmqrivrVqKk4qwbTdO1&#xA;PRNQ03zN5osLiH8uLaZ5dC0Sd/UbQS/EQXd5CF3T7XFSzfVAwHQEoqy/80Z7TW5NN0DQB9Y87krf&#xA;aLqFu4X9GRk8Wv55QGAgZfh9Ig+v9inUqq78rp7TRJNS0DXx9X87gtfa1qFw4b9Jxg8Vv4JSFBgV&#xA;fh9IAeh9inQsqxDUtO1PW9Q1LzN5XsLib8uLmZJdd0SB/TbXinIT3dnCV2T7PJQy/WwpHQguqznz&#xA;d5y8h3PkO2dYV1+x19RbaHo1ptNeTD7EUKji0LQstWc09GlTQjFUh/L9Nb8t+ZLe3/MiT615k1SG&#xA;O20HX2k9W39MIGfTFbhGI7gMpdmIrcdakrxCqj57k1zzT5puLb8tH+ra7pEMlr5g8xrJ6VuylCU0&#xA;vlwkEtxzblzA/wBH61qxUqsk8o+cvIdt5DuXaFdAsdAU22uaNd7zWcx+3FMp5NM0zNVXFfWrUVJx&#xA;VhWkWureX7+w8zeZdPng/LqCZ30LR539STQPUoIbu7iC/YILcQWb6orUG1SqrK/zRntNbk03QNAH&#xA;1jzuSt9ouoW7hf0ZGTxa/nlAYCBl+H0iD6/2KdSqrvyuntNEk1LQNfH1fzuC19rWoXDhv0nGDxW/&#xA;glIUGBV+H0gB6H2KdCyrENS07U9b1DUvM3lewuJvy4uZkl13RIH9NteKchPd2cJXZPs8lDL9bCkd&#xA;CC6rOfN3nLyHc+Q7Z1hXX7HX1FtoejWm015MPsRQqOLQtCy1ZzT0aVNCMVSH8v01vy35kt7f8yJP&#xA;rXmTVIY7bQdfaT1bf0wgZ9MVuEYjuAyl2Yitx1qSvEKqPnuTXPNPmm4tvy0f6trukQyWvmDzGsnp&#xA;W7KUJTS+XCQS3HNuXMD/AEfrWrFSqyTyj5y8h23kO5doV0Cx0BTba5o13vNZzH7cUynk0zTM1VcV&#xA;9atRUnFWFaRa6t5fv7DzN5l0+eD8uoJnfQtHnf1JNA9Sghu7uIL9ggtxBZvqitQbVKqsr/NGe01u&#xA;TTdA0AfWPO5K32i6hbuF/RkZPFr+eUBgIGX4fSIPr/Yp1KqpD5m0Gb87DSzl/Rfk3SzN+jNcESPc&#xA;ahdsjQloBIP94VrR/wDf/T7O+KphYfnBNoVlJ5c806WyefbH07ew0WwQ+nqvOqwT2DEcRC3H95y/&#xA;uqHl0xVKbP8AL3zh5Q1aT8y0gg1jzBetLL5k8uWkSLHHbz8C40pqBvrEXpgvyP8ApBrWjUxVMtd8&#xA;w235tW3+F/KTCXy9KIpfMPmR4trYfDKlraLIP97ehLU/cdT8dAFXaF5htvyltv8AC/m1hF5eiEsv&#xA;l7zIkW1yPile1u1jH+9vUhqfv+o+OoKqW3n5e+cPN+rR/mW8EGj+YLJopfLfly7iRo5LeDmUGqtQ&#xA;t9Yl9QlOJ/0c0pVq4qm1/wDnBNrtlH5c8raWz+fb71Le/wBFv0Pp6Vwos89+wHEwry/d8f72o49c&#xA;VS/yzoM35Jml5L+lPJuqGH9J64YkS40+7VFhDTiMf7wtSif746fZ3xV3mbQZvzsNLOX9F+TdLM36&#xA;M1wRI9xqF2yNCWgEg/3hWtH/AN/9Ps74qmFh+cE2hWUnlzzTpbJ59sfTt7DRbBD6eq86rBPYMRxE&#xA;Lcf3nL+6oeXTFUps/wAvfOHlDVpPzLSCDWPMF60svmTy5aRIscdvPwLjSmoG+sRemC/I/wCkGtaN&#xA;TFUy13zDbfm1bf4X8pMJfL0oil8w+ZHi2th8MqWtosg/3t6EtT9x1Px0AVdoXmG2/KW2/wAL+bWE&#xA;Xl6ISy+XvMiRbXI+KV7W7WMf729SGp+/6j46gqpbefl75w836tH+ZbwQaP5gsmil8t+XLuJGjkt4&#xA;OZQaq1C31iX1CU4n/RzSlWriqbX/AOcE2u2UflzytpbP59vvUt7/AEW/Q+npXCizz37AcTCvL93x&#xA;/vajj1xVL/LOgzfkmaXkv6U8m6oYf0nrhiRLjT7tUWENOIx/vC1KJ/vjp9nfFXeZtBm/Ow0s5f0X&#xA;5N0szfozXBEj3GoXbI0JaASD/eFa0f8A3/0+zviqYWH5wTaFZSeXPNOlsnn2x9O3sNFsEPp6rzqs&#xA;E9gxHEQtx/ecv7qh5dMVSmz/AC984eUNWk/MtIINY8wXrSy+ZPLlpEixx28/AuNKagb6xF6YL8j/&#xA;AKQa1o1MVTLXfMNt+bVt/hfykwl8vSiKXzD5keLa2Hwypa2iyD/e3oS1P3HU/HQBVrQNftPyitB5&#xA;U81lYPLkCyyeXPMccVFuFHKVrS7WJdr0blWA/f8AUfHUFVLrz8vfOHm/Vo/zLeCDR/MFk0Uvlvy5&#xA;dxI0clvBzKDVWoW+sS+oSnE/6OaUq1cVTa//ADgm12yj8ueVtLZ/Pt96lvf6LfofT0rhRZ579gOJ&#xA;hXl+74/3tRx64ql/lnQZvyTNLyX9KeTdUMP6T1wxIlxp92qLCGnEY/3halE/3x0+zvirvM2gzfnY&#xA;aWcv6L8m6WZv0ZrgiR7jULtkaEtAJB/vCtaP/v8A6fZ3xVMLD84JtCspPLnmnS2Tz7Y+nb2Gi2CH&#xA;09V51WCewYjiIW4/vOX91Q8umKpTZ/l75w8oatJ+ZaQQax5gvWll8yeXLSJFjjt5+BcaU1A31iL0&#xA;wX5H/SDWtGpiqZa95gtfzbtf8LeU2E3l2YRS+YvMjxfDbL8MqWtosg/3t6Fmp+46n46AKtaBr9p+&#xA;UVoPKnmsrB5cgWWTy55jjiotwo5StaXaxLtejcqwH7/qPjqCql17+Xnm/wA36vH+ZjwQaR5hsmil&#xA;8t+XbuJGSS3g5FRqrULevL6hKcT/AKOaUq1cVTa//OCbXbKPy55W0tn8+33qW9/ot+h9PSuFFnnv&#xA;2A4mFeX7vj/e1HHriqXeWNAm/JI8buT9KeTdUaH9J656SR3Gn3iosQadYx/vC1KJ/vnofhNcVQXm&#xA;jzS/5CyCNP8Acr5I1YzfobRjMq3en3iqZPSiMhq1k56nf0ie9QGVTLTfybvfMtg/m3zRrL/4/vxH&#xA;daTq2nSE2+kqoLwQWShuEsVH/e1qJKnf9oqpTp/5o+cPO+pv+WNrPbaR5osmmh80eYrSaOSP6tAV&#xA;V30talzPNz35D9zvXelFUx8waDa/krar5r8rvw8qp6MPmTy7cTV9etIlvLN5W/3r6c0rSUf5W+Ku&#xA;8v6Da/nVat5r80Pz8qv60Plvy7bzU9ClYmvLx4m/3r68ErSIf5W+KpdqH5o+cPJGpp+WN1Pbav5o&#xA;vWhh8r+YruaOOP6tOWVH1RahxPDw24j99tTetVU21L8m73y1YJ5t8r6y/wDj+wEl1q2rajIRb6sr&#xA;APPBeqW4RRUT91SgjoN/2gqlvlfzS/59SGN/9xXkjSTD+mdGEytd6heMok9KUxmq2SHodvVI7UIV&#xA;V3mjzS/5CyCNP9yvkjVjN+htGMyrd6feKpk9KIyGrWTnqd/SJ71AZVMtN/Ju98y2D+bfNGsv/j+/&#xA;Ed1pOradITb6SqgvBBZKG4SxUf8Ae1qJKnf9oqpTp/5o+cPO+pv+WNrPbaR5osmmh80eYrSaOSP6&#xA;tAVV30talzPNz35D9zvXelFUx8waDa/krar5r8rvw8qp6MPmTy7cTV9etIlvLN5W/wB6+nNK0lH+&#xA;VvirvL+g2v51Wrea/ND8/Kr+tD5b8u281PQpWJry8eJv96+vBK0iH+VviqXah+aPnDyRqafljdT2&#xA;2r+aL1oYfK/mK7mjjj+rTllR9UWocTw8NuI/fbU3rVVNtS/Ju98tWCebfK+sv/j+wEl1q2rajIRb&#xA;6srAPPBeqW4RRUT91SgjoN/2gqlvlfzS/wCfUhjf/cV5I0kw/pnRhMrXeoXjKJPSlMZqtkh6Hb1S&#xA;O1CFVb80eaH/ACFkWNP9yvkjVjN+htHMyrd6feBTJ6URkNWsnPU7+lX3HJVN7T8nZvMenN5n8xay&#xA;zefr707vTNd06QmDSwoLQQWK14PAA/7zl/e1JPY4qkenfmj5w876nJ+WNpPb6R5osmmh80eYrSaN&#xA;4/q9uVR30ta8zPNy35D9zvXelFUx8waDa/krar5r8rvw8qp6MPmTy7cTV9etIlvLN5W/3r6c0rSU&#xA;f5W+Ku8v6Da/nVat5r80Pz8qv60Plvy7bzU9ClYmvLx4m/3r68ErSIf5W+KpZffmr5t8lasPyuub&#xA;m21nzVdNDB5Z8w3U0aRC3uOQRtUWoYTwhdgo/ffDTc7qpxqX5N3vlqwTzb5X1l/8f2AkutW1bUZC&#xA;LfVlYB54L1S3CKKifuqUEdBv+0FUt8r+aX/PqQxv/uK8kaSYf0zowmVrvULxlEnpSmM1WyQ9Dt6p&#xA;HahCqt+aPND/AJCyLGn+5XyRqxm/Q2jmZVu9PvApk9KIyGrWTnqd/Sr7jkqm9p+Ts3mPTm8z+YtZ&#xA;ZvP196d3pmu6dITBpYUFoILFa8HgAf8Aecv72pJ7HFUj0780fOHnfU5PyxtJ7fSPNFk00PmjzFaT&#xA;RvH9XtyqO+lrXmZ5uW/Ifud670oqmPmDQbX8lbVfNfld+HlVPRh8yeXbiavr1pEt5ZvK3+9fTmla&#xA;Sj/K3xV3l/QbX86rVvNfmh+flV/Wh8t+XbeanoUrE15ePE3+9fXglaRD/K3xVLL781fNvkrVh+V1&#xA;zc22s+arpoYPLPmG6mjSIW9xyCNqi1DCeELsFH774abndVONS/Ju98tWCebfK+sv/j+wEl1q2raj&#xA;IRb6srAPPBeqW4RRUT91SgjoN/2gqlvlfzS/59SGN/8AcV5I0kw/pnRhMrXeoXjKJPSlMZqtkh6H&#xA;b1SO1CFVRP5LW2j+cLvXPMnm1hqHn3lLpusaNexcV0q2JZRZwW7lv3UiV5Sft7g78qqvP/MHmnUf&#xA;KWp6x5I8pa1dD8s4LmCHWteghkuZPL4uXZZ7O3uAaFenxbmOpA+IbqvTvPPkj8rtH/K6yvrK9j8u&#xA;2vl2MXnlzzJZkPNFM4DK6MDW5+smnNKn1K/IhViv5Xaze/mD56t5vzQDWXmHR7aC88teVZoWt7aR&#xA;XjBbU1SQt601a0X/AHV23rxVd+aOs3v5feerib8rw175h1i2nvPMvlWGFri2jVIyV1NkjK+jNWlV&#xA;/wB2996clWVeRvJH5Xax+V17fXt7H5itfMUZvPMfmS8ISaWZAWZ3Ymtt9WNeCVHp0+ZKrzHy/wCa&#xA;dR826no/kjzbrV0fyznuZ4dF16eGS2k8wC2dVgs7i4JoF6/FsZKAH4jsq9A/Om20fyfd6H5k8pMN&#xA;P8+8otN0fRrKLkuq2wKqbOe3Qr+6jSnGT9jYDfjRV35LW2j+cLvXPMnm1hqHn3lLpusaNexcV0q2&#xA;JZRZwW7lv3UiV5Sft7g78qqvP/MHmnUfKWp6x5I8pa1dD8s4LmCHWteghkuZPL4uXZZ7O3uAaFen&#xA;xbmOpA+IbqvTvPPkj8rtH/K6yvrK9j8u2vl2MXnlzzJZkPNFM4DK6MDW5+smnNKn1K/IhViv5Xaz&#xA;e/mD56t5vzQDWXmHR7aC88teVZoWt7aRXjBbU1SQt601a0X/AHV23rxVd+aOs3v5feerib8rw175&#xA;h1i2nvPMvlWGFri2jVIyV1NkjK+jNWlV/wB2996clWVeRvJH5Xax+V17fXt7H5itfMUZvPMfmS8I&#xA;SaWZAWZ3Ymtt9WNeCVHp0+ZKrzHy/wCadR826no/kjzbrV0fyznuZ4dF16eGS2k8wC2dVgs7i4Jo&#xA;F6/FsZKAH4jsq9A/Om20fyfd6H5k8pMNP8+8otN0fRrKLkuq2wKqbOe3Qr+6jSnGT9jYDfjRV35L&#xA;W2j+cLvXPMnm1hqHn3lLpusaNexcV0q2JZRZwW7lv3UiV5Sft7g78qqvP/MHmnUfKWp6x5I8pa1d&#xA;D8s4LmCHWteghkuZPL4uXZZ7O3uAaFenxbmOpA+IbqvTvPPkj8rtH/K6yvrK9j8u2vl2MXnlzzJZ&#xA;kPNFM4DK6MDW5+smnNKn1K/IhViv5Xaze/mD56t5vzQDWXmHR7aC88teVZoWt7aRXjBbU1SQt601&#xA;a0X/AHV23rxVW/mrq9/5A873Un5WlrnzHrNrPd+ZfLEEBubaJUjJXVCiECGetPh6Sdx/MqyryD5C&#xA;/KvU/wAq7u7ubyPzDZ+YYze+Y/Ml4wSeWdAWeSR2PK3Nu1eK1+D51JVeZ+X/ADTqPm3U9H8kebda&#xA;uj+Wc9zPDouvTwyW0nmAWzqsFncXBNAvX4tjJQA/EdlXoH5022j+T7vQ/MnlJhp/n3lFpuj6NZRc&#xA;l1W2BVTZz26Ff3UaU4yfsbAb8aKu/Ja20fzhd655k82sNQ8+8pdN1jRr2LiulWxLKLOC3ct+6kSv&#xA;KT9vcHflVV5/5g806j5S1PWPJHlLWroflnBcwQ61r0EMlzJ5fFy7LPZ29wDQr0+Lcx1IHxDdV6d5&#xA;58kfldo/5XWV9ZXsfl218uxi88ueZLMh5opnAZXRga3P1k05pU+pX5EKsV/K7Wb38wfPVvN+aAay&#xA;8w6PbQXnlryrNC1vbSK8YLamqSFvWmrWi/7q7b14qrfzV1e/8ged7qT8rS1z5j1m1nu/MvliCA3N&#xA;tEqRkrqhRCBDPWnw9JO4/mVZV5B8hflXqf5V3d3c3kfmGz8wxm98x+ZLxgk8s6As8kjseVubdq8V&#xA;r8HzqSq8z8v+adR826no/kjzbrV0fyznuZ4dF16eGS2k8wC2dVgs7i4JoF6/FsZKAH4jsq9A/Om2&#xA;0fyfd6H5k8pMNP8APvKLTdH0ayi5LqtsCqmznt0K/uo0pxk/Y2A340VYr+aiat5+8/3KflDG0XmP&#xA;Q7Se18x+abec20EquhVdP9RQVlmqPhb9k9xxqqrK/wAvvzC/KLRfyiu4Z7VNDtNDRrPzH5dvFD3Y&#xA;u3BSSOVHCm4a4KmjEfF0PHiQqry3y/pGqeVtT0Hzd550O7i/Kj65PPoOiyzvcjRJLlwba4u7crUp&#xA;/KDXjWv2qBlXpH576vonmafQfLflKP8ASv5iyyRX+galYShf0bASrm7muE5AQun7P7Qof5aqqn5H&#xA;aho/lS513y15uQaZ+YSPLqOuareyhxqduCzi8guXCVhjSvwbcNyd+VFXmev6RqfmnUte83eR9DvJ&#xA;fyp+uQT67osU72y649s7G5uLS3C1CdOQFOVK/aqFVepfmD+YX5Ra1+UVpDBaprlpriLZ+XPLtmoS&#xA;7N2gCRxxIgY27W5YVYD4eg5cgGVYp+Viar5B/MC2T83Y3l8xa5aQW3lzzTcTm5giVECvp/qEcYpa&#xA;n4m/aPc8qsq78001Xz9+YFyn5RRvF5i0O0ntvMfmm3nNtBKroVTT/UA4yy1Hwt+ye441VVlf5ffm&#xA;F+UWi/lFdwz2qaHaaGjWfmPy7eKHuxduCkkcqOFNw1wVNGI+LoePEhVXlugaRqflbUtB83eeNDvI&#xA;vyp+uTz6Foss73K6G9y6m2uLu3K1KdeINeNa/aoGVem/nhqGjea7nQvLXlFBqf5hO8Wo6HqtjKEG&#xA;l25Ku15PcIGpDIlKJ+3sRvxqq78j9Q0bypc675a83INM/MJHl1HXNVvpQ41S3BZ1vILhwtYY0rVP&#xA;2Nyd+VFXmWv6RqfmnUte83eR9DvJfyp+uQT67osU72y649s7G5uLS3C1CdOQFOVK/aqFVepfmD+Y&#xA;X5Ra1+UVpDBaprlpriLZ+XPLtmoS7N2gCRxxIgY27W5YVYD4eg5cgGVYp+Viar5B/MC2T83Y3l8x&#xA;a5aQW3lzzTcTm5giVECvp/qEcYpan4m/aPc8qsq78001Xz9+YFyn5RRvF5i0O0ntvMfmm3nNtBKr&#xA;oVTT/UA4yy1Hwt+ye441VVlf5ffmF+UWi/lFdwz2qaHaaGjWfmPy7eKHuxduCkkcqOFNw1wVNGI+&#xA;LoePEhVXlugaRqflbUtB83eeNDvIvyp+uTz6Foss73K6G9y6m2uLu3K1KdeINeNa/aoGVem/nhqG&#xA;jea7nQvLXlFBqf5hO8Wo6HqtjKEGl25Ku15PcIGpDIlKJ+3sRvxqq78j9Q0bypc675a83INM/MJH&#xA;l1HXNVvpQ41S3BZ1vILhwtYY0rVP2Nyd+VFXmWv6RqfmnUte83eR9DvJfyp+uQT67osU72y649s7&#xA;G5uLS3C1CdOQFOVK/aqFVepfmD+YX5Ra1+UVpDBaprlpriLZ+XPLtmoS7N2gCRxxIgY27W5YVYD4&#xA;eg5cgGVYp+Viar5B/MC2T83Y3l8xa5aQW3lzzTcTm5giVECvp/qEcYpan4m/aPc8qsq78001Xz9+&#xA;YFyn5RRvF5i0O0ntvMfmm3nNtBKroVTT/UA4yy1Hwt+ye441VVlf5ffmF+UWi/lFdwz2qaHaaGjW&#xA;fmPy7eKHuxduCkkcqOFNw1wVNGI+LoePEhVXlugaRqflbUtB83eeNDvIvyp+uTz6Foss73K6G9y6&#xA;m2uLu3K1KdeINeNa/aoGVem/nhqGjea7nQvLXlFBqf5hO8Wo6HqtjKEGl25Ku15PcIGpDIlKJ+3s&#xA;Rvxqq78j9Q0bypc675a83INM/MJHl1HXNVvpQ41S3BZ1vILhwtYY0rVP2Nyd+VFXmWv6RqfmnUte&#xA;83eR9DvJfyp+uQT67osU72y649s7G5uLS3C1CdOQFOVK/aqFVepfmD+YX5Ra1+UVpDBaprlpriLZ&#xA;+XPLtmoS7N2gCRxxIgY27W5YVYD4eg5cgGVYp+Viar5B/MC2T83Y3l8xa5aQW3lzzTcTm5giVECv&#xA;p/qEcYpan4m/aPc8qsqjfJvnJfyJW48i+ercR6FGJ7zy35ks4DxvVrzaGZUr/pG4X4j4AnjxYqpL&#xA;cflh+Yn5j6lL+b4srLSNXheC58r+WrqBG+tW9seSG+c8f3kq04M3t9leJCrI9d/PmfzjoEfkzyto&#xA;Mk3n/WVlsdW0XUISYNMC/u7iW6Mi8HRa/Dt/rCvwMqk3lry1q3/OOeqpf6gia35I1tYINZ1qCDjd&#xA;afdLsGYDk7WzM2wr/wANQOqu8y+XtZ/5yM1F7uwC6J5F0QTxaLrE8HK51C7YcS6A8XS3DKKiv3ts&#xA;iqb6F+fM/k7QJPJnmnQZIfP+jLFY6TounwkQamG/d28tqY14IjU+Lb/VFfgVVjlv+WH5iflxqUX5&#xA;vmystX1eZ57nzR5atYEX6rb3J5ObFxy/eRLXmy+/2l5Eqp15y85L+ey2/kXyLbiTQpBBeeZPMl5A&#xA;eNkteawwq9P9I2K/CfEA8eTBV3k3zkv5ErceRfPVuI9CjE955b8yWcB43q15tDMqV/0jcL8R8ATx&#xA;4sVUluPyw/MT8x9Sl/N8WVlpGrwvBc+V/LV1AjfWre2PJDfOeP7yVacGb2+yvEhVkeu/nzP5x0CP&#xA;yZ5W0GSbz/rKy2OraLqEJMGmBf3dxLdGReDotfh2/wBYV+BlUo8teXtZ/wCcc9RS7vwut+RdbEEW&#xA;taxBBxudPu1HEO4HJ3tyzGgr9zbOq7zL5e1n/nIzUXu7ALonkXRBPFousTwcrnULthxLoDxdLcMo&#xA;qK/e2yKpvoX58z+TtAk8meadBkh8/wCjLFY6TounwkQamG/d28tqY14IjU+Lb/VFfgVVjlv+WH5i&#xA;flxqUX5vmystX1eZ57nzR5atYEX6rb3J5ObFxy/eRLXmy+/2l5Eqp15y85L+ey2/kXyLbiTQpBBe&#xA;eZPMl5AeNkteawwq9P8ASNivwnxAPHkwVd5N85L+RK3HkXz1biPQoxPeeW/MlnAeN6tebQzKlf8A&#xA;SNwvxHwBPHixVSW4/LD8xPzH1KX83xZWWkavC8Fz5X8tXUCN9at7Y8kN854/vJVpwZvb7K8SFWR6&#xA;7+fM/nHQI/JnlbQZJvP+srLY6touoQkwaYF/d3Et0ZF4Oi1+Hb/WFfgZVKPLXl7Wf+cc9RS7vwut&#xA;+RdbEEWtaxBBxudPu1HEO4HJ3tyzGgr9zbOq7zL5e1n/AJyM1F7uwC6J5F0QTxaLrE8HK51C7YcS&#xA;6A8XS3DKKiv3tsiqb6F+fM/k7QJPJnmnQZIfP+jLFY6TounwkQamG/d28tqY14IjU+Lb/VFfgVVj&#xA;lv8Alh+Yn5calF+b5srLV9Xmee580eWrWBF+q29yeTmxccv3kS15svv9peRKqdecvOS/nstv5F8i&#xA;24k0KQQXnmTzJeQHjZLXmsMKvT/SNivwnxAPHkwVd5N85L+RK3HkXz1biPQoxPeeW/MlnAeN6teb&#xA;QzKlf9I3C/EfAE8eLFVJbj8sPzE/MfUpfzfFlZaRq8LwXPlfy1dQI31q3tjyQ3znj+8lWnBm9vsr&#xA;xIVZHrv58z+cdAj8meVtBkm8/wCsrLY6touoQkwaYF/d3Et0ZF4Oi1+Hb/WFfgZVKPLXl7Wf+cc9&#xA;RS7vwut+RdbEEWtaxBBxudPu1HEO4HJ3tyzGgr9zbOq7zL5e1n/nIzUXu7ALonkXRBPFousTwcrn&#xA;ULthxLoDxdLcMoqK/e2yKpnpP593nkzy7J5L8yeX3j/MPSBFp+kaNYQkW2pBxwt5rcxrxSM8fiAH&#xA;+qK/CqrHrP8AK78xvy2v4fzde0s9a1iVp7jzT5dtoET6tb3J5SNZOvL95EteZUeP2l5Eqsi82ea0&#xA;/PiOHyV5Jgr5cb0LvzJ5lvIDS06Olvbo9K3PYkHxANKnFUJ5V8qf9DAtdecvOV0Y/LERnsvLflyy&#xA;no9q32Wubll/3d0YBhvsSOFAVUgn/Nz8xPy2urv8pJLuz1jWlkgtPLfmW4nRUtre5PFPrqtyo8Sk&#xA;cVc/D35LxqqyHzD+RGoeRfLqefPLXmKRfP2jLLf63ql/MRbakr/HPFKJG4opp8FTv+0a0ZVUs0Hz&#xA;Lrn/ADkdq8el3TroPkfRUguNd0uCcNdX9y24TajCAOpoabdd2pwVdr3mXXP+ccdXk0u0dde8j60k&#xA;9xoWlzzhbqwuV3Kb8mMBZhU0367NXmqmfl78iNQ89eXX8+eZfMUjeftZWK/0TVLCYm201U+OCKIR&#xA;txdRX46Hb9k1qzKseg/Nz8xPzJurX8o0u7LR9ZaSe08yeZbedGS5gtiVf6mq8atKoNQh+LtxXlRV&#xA;OfOPk5/yAe087+SLst5eYwWPmLy7fT1N2T8KzwM3+7urEKPh3IHDkoVd5O8nP+f73fnfzvdlfLym&#xA;ex8u+XbGehtCPhaedl/3d0YBh8WxI4cVKqTT/m5+Yn5bXV1+Ub3dlrGsrJBaeW/MtxOipbQXJCp9&#xA;cVuVGiUigc/D35LxqqyHzD+RGoeRfLqefPLXmKRfP2jLLf63ql/MRbakr/HPFKJG4opp8FTv+0a0&#xA;ZVUs0HzLrn/OR2rx6Xduug+R9FSC413S4Jw11f3LbhNuLCAMpoabdd2pwVdr3mXXP+ccdXk0u0dd&#xA;e8j60k9xoWlzzhbqwuV3Kb8mMBZhU0367NXmqmfl78iNQ89eXX8+eZfMUjeftZWK/wBE1SwmJttN&#xA;VPjgiiEbcXUV+Oh2/ZNasyrHoPzc/MT8ybq1/KNLuy0fWWkntPMnmW3nRkuYLYlX+pqvGrSqDUIf&#xA;i7cV5UVTnzj5Of8AIB7Tzv5Iuy3l5jBY+YvLt9PU3ZPwrPAzf7u6sQo+HcgcOShV3k7yc/5/vd+d&#xA;/O92V8vKZ7Hy75dsZ6G0I+Fp52X/AHd0YBh8WxI4cVKqTT/m5+Yn5bXV1+Ub3dlrGsrJBaeW/Mtx&#xA;OipbQXJCp9cVuVGiUigc/D35LxqqyHzD+RGoeRfLqefPLXmKRfP2jLLf63ql/MRbakr/ABzxSiRu&#xA;KKafBU7/ALRrRlVSzQfMuuf85HavHpd266D5H0VILjXdLgnDXV/ctuE24sIAymhpt13anBV2veZd&#xA;c/5xx1eTS7R117yPrST3GhaXPOFurC5XcpvyYwFmFTTfrs1eaqZ+XvyI1Dz15dfz55l8xSN5+1lY&#xA;r/RNUsJibbTVT44IohG3F1Ffjodv2TWrMqx6D83PzE/Mm6tfyjS7stH1lpJ7TzJ5lt50ZLmC2JV/&#xA;qarxq0qg1CH4u3FeVFU584+Tn/IB7Tzv5Iuy3l5jBY+YvLt9PU3ZPwrPAzf7u6sQo+HcgcOShV3k&#xA;7yc/5/vd+d/O92V8vKZ7Hy75dsZ6G0I+Fp52X/d3RgGHxbEjhxUqpNP+bn5ifltdXX5Rvd2Wsays&#xA;kFp5b8y3E6KltBckKn1xW5UaJSKBz8PfkvGqrIfMP5Eah5F8up588teYpF8/aMst/reqX8xFtqSv&#xA;8c8UokbiimnwVO/7RrRlVSzQfMuuf85HavHpd266D5H0VILjXdLgnDXV/ctuE24sIAymhpt13anB&#xA;V2veZdc/5xx1eTS7R117yPrST3GhaXPOFurC5XcpvyYwFmFTTfrs1eaqZ+XvyI1Dz15dfz55l8xS&#xA;N5+1lYr/AETVLCYm201U+OCKIRtxdRX46Hb9k1qzKseg/Nz8xPzJurX8o0u7LR9ZaSe08yeZbedG&#xA;S5gtiVf6mq8atKoNQh+LtxXlRVOfOPk5/wAgHtPO/ki7LeXmMFj5i8u309Tdk/Cs8DN/u7qxCj4d&#xA;yBw5KFWMfmxfyflb+ZF8PykvpF1DVrOabzH5ctoDc29nxQuLkKtVjKqxkC0/d9T8DccVZp+Wn5af&#xA;kxq35MXuratex6udXja68yeZLpgt1bXSjm4DvyaFoWau/wBvqeSsBirx7Q/N1z5r1Py/5H87eY7x&#xA;fyugvZodP1WWBrf6+tuwEEVxMSeKrVRUk+nyFabMqr1P8/8ATPKf5eX/AJe8y+R5l0Tz5G0Vpp+j&#xA;2EXNL+0BEZSeBKfCAAobq32dyAyKu/IDTPKf5h3/AJh8y+eJl1vz5I0tpqGj38XBLC0JMYSCB6/C&#xA;QSpbqv2diSzqvLNc83XPlTU/MHkfyT5jvG/K6e9hh1DVYoGuPqC3DETxW8wI5K1GFQR6nE0ruzKv&#xA;YfzL/LT8mNJ/Jiy1bSb2PSDpEa3XlvzJasGurm6Yc0BdOLTNMy12+x1HFVIxVhf5T38n5pfmRYj8&#xA;276RtQ0mzhm8ueXLmA21veckDm5KtRZCyqJCtP3nUfAvHFXfmxfyflb+ZF8PykvpF1DVrOabzH5c&#xA;toDc29nxQuLkKtVjKqxkC0/d9T8DccVZp+Wn5afkxq35MXuratex6udXja68yeZLpgt1bXSjm4Dv&#xA;yaFoWau/2+p5KwGKvHtD83XPmvU/L/kfzt5jvF/K6C9mh0/VZYGt/r627AQRXExJ4qtVFST6fIVp&#xA;syqvU/z/ANM8p/l5f+XvMvkeZdE8+RtFaafo9hFzS/tARGUngSnwgAKG6t9ncgMirvyA0zyn+Yd/&#xA;5h8y+eJl1vz5I0tpqGj38XBLC0JMYSCB6/CQSpbqv2diSzqvLNc83XPlTU/MHkfyT5jvG/K6e9hh&#xA;1DVYoGuPqC3DETxW8wI5K1GFQR6nE0ruzKvYfzL/AC0/JjSfyYstW0m9j0g6RGt15b8yWrBrq5um&#xA;HNAXTi0zTMtdvsdRxVSMVYX+U9/J+aX5kWI/Nu+kbUNJs4ZvLnly5gNtb3nJA5uSrUWQsqiQrT95&#xA;1HwLxxV35sX8n5W/mRfD8pL6RdQ1azmm8x+XLaA3NvZ8ULi5CrVYyqsZAtP3fU/A3HFWaflp+Wn5&#xA;Mat+TF7q2rXsernV42uvMnmS6YLdW10o5uA78mhaFmrv9vqeSsBirx7Q/N1z5r1Py/5H87eY7xfy&#xA;ugvZodP1WWBrf6+tuwEEVxMSeKrVRUk+nyFabMqr1P8AP/TPKf5eX/l7zL5HmXRPPkbRWmn6PYRc&#xA;0v7QERlJ4Ep8IAChurfZ3IDIq78gNM8p/mHf+YfMvniZdb8+SNLaaho9/FwSwtCTGEggevwkEqW6&#xA;r9nYks6ryzXPN1z5U1PzB5H8k+Y7xvyunvYYdQ1WKBrj6gtwxE8VvMCOStRhUEepxNK7syr2H8y/&#xA;y0/JjSfyYstW0m9j0g6RGt15b8yWrBrq5umHNAXTi0zTMtdvsdRxVSMVYX+U9/J+aX5kWI/Nu+kb&#xA;UNJs4ZvLnly5gNtb3nJA5uSrUWQsqiQrT951HwLxxV35sX8n5W/mRfD8pL6RdQ1azmm8x+XLaA3N&#xA;vZ8ULi5CrVYyqsZAtP3fU/A3HFWaflp+Wn5Mat+TF7q2rXsernV42uvMnmS6YLdW10o5uA78mhaF&#xA;mrv9vqeSsBirx/RPNd55p1Ly75I88eYr1PytivJotM1aaB7Yaglu4WCOeZjsi/Ctan06702ZVXqX&#xA;5/6Z5T/Ly/8AL3mXyPMuiefI2itNP0ewi5pf2gIjKTwJT4QAFDdW+zuQGRV35AaZ5T/MO/8AMPmX&#xA;zxMut+fJGltNQ0e/i4JYWhJjCQQPX4SCVLdV+zsSWdV5Zrnm658qan5g8j+SfMd435XT3sMOoarF&#xA;A1x9QW4YieK3mBHJWowqCPU4mld2ZV7D+Zf5afkxpP5MWWraTex6QdIjW68t+ZLVg11c3TDmgLpx&#xA;aZpmWu32Oo4qpGKsL/Ke/k/NL8yLEfm3fSNqGk2cM3lzy5cwG2t7zkgc3JVqLIWVRIVp+86j4F44&#xA;qnX/ADjv5o8q+SNU8yeXfPkP6D8+rJNc6lq+pScjdwKPVYLM/gKvQE+oPiBPZV5Z5r0m88xXnmTz&#xA;f5G0C/h/KqO9gk1axhmaCK69Bi0kqQgHigqW2VvS5V2GwVew/mR+ZH5H6t+R9jpWlWKX5v0Fr5d8&#xA;u2oC3lpeKOIZgvNo2jZ9zv6taDkGJxVhv5R2n/Kt/wAzbBvze0+aHUtRs4I/LWuXs3r29pxUJ6RJ&#xA;LKhVSsdeX7rwCtyxV35uWn/KyPzNv2/KHT5ptS06znj8y65ZTehb3fJSnpAgqrllDR15fvfAqvLF&#xA;WZflv+ZH5H6T+R99pWq2KWBsENr5i8u3QDXl3eMOJZQ3BpGkZNjt6VKHiFBxV495U0m88u3nlvzf&#xA;550C/m/KqS9nk0mxmmaeK19dg0crwkDkhoG3VfV413GxVep/85EeaPKvnfVPLfl3yHD+nPPrSQ3O&#xA;m6vpsnE2kDD1VDTJ4ij0JHpj4iR3Vd/zjv5o8q+SNU8yeXfPkP6D8+rJNc6lq+pScjdwKPVYLM/g&#xA;KvQE+oPiBPZV5Z5r0m88xXnmTzf5G0C/h/KqO9gk1axhmaCK69Bi0kqQgHigqW2VvS5V2GwVew/m&#xA;R+ZH5H6t+R9jpWlWKX5v0Fr5d8u2oC3lpeKOIZgvNo2jZ9zv6taDkGJxVhv5R2n/ACrf8zbBvze0&#xA;+aHUtRs4I/LWuXs3r29pxUJ6RJLKhVSsdeX7rwCtyxV35uWn/KyPzNv2/KHT5ptS06znj8y65ZTe&#xA;hb3fJSnpAgqrllDR15fvfAqvLFWZflv+ZH5H6T+R99pWq2KWBsENr5i8u3QDXl3eMOJZQ3BpGkZN&#xA;jt6VKHiFBxV495U0m88u3nlvzf550C/m/KqS9nk0mxmmaeK19dg0crwkDkhoG3VfV413GxVep/8A&#xA;ORHmjyr531Ty35d8hw/pzz60kNzpur6bJxNpAw9VQ0yeIo9CR6Y+Ikd1Vv8Azj35s8peRNR8y6B5&#xA;+h/QfntJJrnU9X1F+ZvIF/eFUlau/wC2FWvqV5Dl0CryvzLpeo+ZLnzL5x8l+Xr62/KtL6CXVdNh&#xA;mMMdyISTJIsQqFAqWPFWEPLw6KvZPzI/Mj8j9W/I+x0rSrFL836C18u+XbUBby0vFHEMwXm0bRs+&#xA;539WtByDE4qw38o7T/lW/wCZtg35vafNDqWo2cEflrXL2b17e04qE9IkllQqpWOvL914BW5Yq783&#xA;LT/lZH5m37flDp802padZzx+ZdcspvQt7vkpT0gQVVyyho68v3vgVXlirMvy3/Mj8j9J/I++0rVb&#xA;FLA2CG18xeXboBry7vGHEsobg0jSMmx29KlDxCg4q8e8qaTeeXbzy35v886BfzflVJezyaTYzTNP&#xA;Fa+uwaOV4SByQ0Dbqvq8a7jYqvU/+ciPNHlXzvqnlvy75Dh/Tnn1pIbnTdX02TibSBh6qhpk8RR6&#xA;Ej0x8RI7qtf849+bPKXkTUPMugefof0H58SSa51PV9Rk5m8hX96VSVq/64VSfV+0C3QKvK/MWmah&#xA;5iu/MfnPyZ5cvYPyqjv4JtW0uKZoIrpYG5SOI1+yu5Y8FYQ8vDoq9l/M38zfyT1z8k7LTtOsk1CT&#xA;UEFr5d8u2oCXdndoAikqgYxGIsBsD6laDkGxVhf5R2n/ACrf8zbBvze0+aHUtRs4I/LWuXs3r29p&#xA;xUJ6RJLKhVSsdeX7rwCtyxV35uWn/KyPzNv2/KHT5ptS06znj8y65ZTehb3fJSnpAgqrllDR15fv&#xA;fAqvLFWZflv+ZH5H6T+R99pWq2KWBsENr5i8u3QDXl3eMOJZQ3BpGkZNjt6VKHiFBxV495U0m88u&#xA;3nlvzf550C/m/KqS9nk0mxmmaeK19dg0crwkDkhoG3VfV413GxVep/8AORHmjyr531Ty35d8hw/p&#xA;zz60kNzpur6bJxNpAw9VQ0yeIo9CR6Y+Ikd1Un8waB5n/wCckvM9zrGjW0Oh+VNDhltdL1S7h/fX&#xA;cv2lR2X4iC25AJWIHuxoVUfoH/OROofl95IufInmDy2YfO+ghNO0yxjiC2twrAhJZAn/AATcP72o&#xA;IPxEhVi+m/lV+aH5Yx6X+bsumWl/cQyyXWr+XhCqvaW8w+2FUcYyFY19Nf3O2xXkAqyPz3571L/n&#xA;IPUtO8j+R9OMOiwmK+1nWb6JS1uxXoPtcOHIr8J5SNsPgqSq7yJ571L/AJx81LUfI/njTjNosxlv&#xA;tG1mxiUNcMF6H7PPnxC/EeUbbH4KEKsc1L8qvzQ/M6PVPzdi0y0sLiaWO60jy8YVZ7u3hH2yrDjI&#xA;SqinqL++32C8QVWUa/8A85E6h+YPki28ieX/AC2ZvO+vB9O1OxkiDWtuqgB5Yw//AAS8/wC6oST8&#xA;IJVQHl/QPM//ADjb5nttY1m2h1zyprkMVrqmqWkP760l+0yIzfEAG3AJCygdmFAq7zBoHmf/AJyS&#xA;8z3OsaNbQ6H5U0OGW10vVLuH99dy/aVHZfiILbkAlYge7GhVR+gf85E6h+X3ki58ieYPLZh876CE&#xA;07TLGOILa3CsCElkCf8ABNw/vagg/ESFWL6b+VX5ofljHpf5uy6ZaX9xDLJdav5eEKq9pbzD7YVR&#xA;xjIVjX01/c7bFeQCrI/PfnvUv+cg9S07yP5H04w6LCYr7WdZvolLW7Feg+1w4civwnlI2w+CpKrv&#xA;InnvUv8AnHzUtR8j+eNOM2izGW+0bWbGJQ1wwXofs8+fEL8R5RtsfgoQqxzUvyq/ND8zo9U/N2LT&#xA;LSwuJpY7rSPLxhVnu7eEfbKsOMhKqKeov77fYLxBVZRr/wDzkTqH5g+SLbyJ5f8ALZm8768H07U7&#xA;GSINa26qAHljD/8ABLz/ALqhJPwglVAeX9A8z/8AONvme21jWbaHXPKmuQxWuqapaQ/vrSX7TIjN&#xA;8QAbcAkLKB2YUCrvMGgeZ/8AnJLzPc6xo1tDoflTQ4ZbXS9Uu4f313L9pUdl+IgtuQCViB7saFVH&#xA;6B/zkTqH5feSLnyJ5g8tmHzvoITTtMsY4gtrcKwISWQJ/wAE3D+9qCD8RIVYvpv5Vfmh+WMel/m7&#xA;Lplpf3EMsl1q/l4Qqr2lvMPthVHGMhWNfTX9ztsV5AKsj89+e9S/5yD1LTvI/kfTjDosJivtZ1m+&#xA;iUtbsV6D7XDhyK/CeUjbD4Kkqu8iee9S/wCcfNS1HyP5404zaLMZb7RtZsYlDXDBeh+zz58QvxHl&#xA;G2x+ChCrHNS/Kr80PzOj1T83YtMtLC4mljutI8vGFWe7t4R9sqw4yEqop6i/vt9gvEFVlGv/APOR&#xA;OofmD5ItvInl/wAtmbzvrwfTtTsZIg1rbqoAeWMP/wAEvP8AuqEk/CCVUB5f0DzP/wA42+Z7bWNZ&#xA;todc8qa5DFa6pqlpD++tJftMiM3xABtwCQsoHZhQKu8waB5n/wCckvM9zrGjW0Oh+VNDhltdL1S7&#xA;h/fXcv2lR2X4iC25AJWIHuxoVUfoH/OROofl95IufInmDy2YfO+ghNO0yxjiC2twrAhJZAn/AATc&#xA;P72oIPxEhVi+m/lV+aH5Yx6X+bsumWl/cQyyXWr+XhCqvaW8w+2FUcYyFY19Nf3O2xXkAqyPz357&#xA;1L/nIPUtO8j+R9OMOiwmK+1nWb6JS1uxXoPtcOHIr8J5SNsPgqSq7yJ571L/AJx81LUfI/njTjNo&#xA;sxlvtG1mxiUNcMF6H7PPnxC/EeUbbH4KEKsc1L8qvzQ/M6PVPzdi0y0sLiaWO60jy8YVZ7u3hH2y&#xA;rDjISqinqL++32C8QVWUa/8A85E6h+YPki28ieX/AC2ZvO+vB9O1OxkiDWtuqgB5Yw//AAS8/wC6&#xA;oST8IJVQHl/QPM//ADjb5nttY1m2h1zyprkMVrqmqWkP760l+0yIzfEAG3AJCygdmFAqh9Y8y+a/&#xA;+cbfNV7oGl3UOveWNXhku9L0+6lpLayNVUeRU+JSrCjUAWVRtxYfCqi/L3/OPetfmP5IuvzC1rzL&#xA;6vnPW6X+lTpIrW0Kx1pHOyV4HbjRKejQChoVxVjln+b35ofmXa6R+UsmoWthdXcz2Wqa+Zl5XUMY&#xA;2RnU8XqFIPpt++NB3bkqyHzv5I1j/nHfWNL85eTdU+t6Ld+nZatpN7IqvcOq1b4Rx5q/EsCo5Rt4&#xA;qcVd5I8kax/zkRrGqecvOWqfVNFtPUstJ0mykVnt3Zar8J5cFTkGJYcpG8FGKsevPze/ND8tLXV/&#xA;ylj1C1v7q0mSy0vXxMvK1hkG6K7HilAwA9Rv3JqOy8VWR+YP+ceta/LnyTa/mFonmX0vOmi1v9Vn&#xA;eRVtplkpWOBnpzO/Gj19apFBULiqE0fzL5r/AOckvNVloGqXUOg+WNIhju9U0+1lrLdSLRXeNX+J&#xA;izGi1BWJTvyY/Eq7WPMvmv8A5xt81XugaXdQ695Y1eGS70vT7qWktrI1VR5FT4lKsKNQBZVG3Fh8&#xA;KqL8v/8AOPWtfmN5JuvzC1vzL6vnTWqX+lTpIrW0Kx1pHOyV4HbjRKejQChoVxVjln+b35ofmXa6&#xA;R+UsmoWthdXcz2Wqa+Zl5XUMY2RnU8XqFIPpt++NB3bkqyHzv5I1j/nHfWNL85eTdU+t6Ld+nZat&#xA;pN7IqvcOq1b4Rx5q/EsCo5Rt4qcVd5I8kax/zkRrGqecvOWqfVNFtPUstJ0mykVnt3Zar8J5cFTk&#xA;GJYcpG8FGKsevPze/ND8tLXV/wApY9Qtb+6tJkstL18TLytYZBuiux4pQMAPUb9yajsvFVkfmD/n&#xA;HrWvy58k2v5haJ5l9Lzpotb/AFWd5FW2mWSlY4GenM78aPX1qkUFQuKoTR/Mvmv/AJyS81WWgapd&#xA;Q6D5Y0iGO71TT7WWst1ItFd41f4mLMaLUFYlO/Jj8SrtY8y+a/8AnG3zVe6Bpd1Dr3ljV4ZLvS9P&#xA;upaS2sjVVHkVPiUqwo1AFlUbcWHwqovQP+ce9Z/MbyRd/mFrfmX1POetUv8AS7hJVa2hWOtI53Sv&#xA;A7caJT0aAUNCuKsbsfzg/M/8zbPR/wAp21C1sbm8maz1PzAZhzu4EGyMynixIUg+mazGg7tyVZF5&#xA;38kax/zjvrGl+cvJuqfW9Fu/TstW0m9kVXuHVat8I481fiWBUco28VOKqvkfyPqX/OQ+par5086a&#xA;qbbSrYyWOj6PYyKWtWKgqzKQeKrUN8Q5SNuaKACqxm8/N780Py0tdX/KWPULW/urSZLLS9fEy8rW&#xA;GQborseKUDAD1G/cmo7LxVZH5h/5x71r8uPJFr+YWi+ZfS856JW/1Wd5FW2mWSlY4GenM78aPX1q&#xA;kUFQuKoTR/Mvmv8A5yS81WWgapdQ6D5Y0iGO71TT7WWst1ItFd41f4mLMaLUFYlO/Jj8SrtY8y+a&#xA;/wDnG3zVe6Bpd1Dr3ljV4ZLvS9PupaS2sjVVHkVPiUqwo1AFlUbcWHwqorQf+cfNY/MTyPefmJrv&#xA;mbn5x1mmoaZcrKptYUirSOd0rwO3GiU9GgFDQrirHLH84PzP/M2z0f8AKdtQtbG5vJms9T8wGYc7&#xA;uBBsjMp4sSFIPpmsxoO7clWRed/JGsf8476xpfnLybqn1vRbv07LVtJvZFV7h1WrfCOPNX4lgVHK&#xA;NvFTiqr5H8j6l/zkPqWq+dPOmqm20q2Mljo+j2MilrVioKsykHiq1DfEOUjbmigAqsZvPze/ND8t&#xA;LXV/ylj1C1v7q0mSy0vXxMvK1hkG6K7HilAwA9Rv3JqOy8VWR+Yf+ce9a/LjyRa/mFovmX0vOeiV&#xA;v9VneRVtplkpWOBnpzO/Gj19apFBULiqE0fzL5r/AOckvNVloGqXUOg+WNIhju9U0+1lrLdSLRXe&#xA;NX+JizGi1BWJTvyY/Eq7/nHbyz5G/MTWfMmvfmDfDWvNTCT1tMvv3apbunF7oGq8uFeC8aCGgO3w&#xA;kKvL9f8ANN35auvMnkzyV5ku7j8vr26WOWcJ8LoftcSN6GhUlCvqqu4ptir138zfyy/I/QvyP0rW&#xA;tF1UJqiD19E1uD4rnUrlqF45EBUhQV9vRp41DKsO/KrUrP8AM780dLh/NnWpro2dvHHothdAJDdS&#xA;AKY4pGHED1BRzUVlOxboCq781dSs/wAsfzR1SH8ptamtTeW8ketWFqA8NrIQxkijY8gfTFXFBWI7&#xA;BuoCrMfyy/LL8j9d/I/Vda1rVQ+qOPX1vW5/hudNuVqUjjQliVJb39avjQKq8i0DzTd+Zbry35M8&#xA;6+ZLu3/L6yumjinKfCiD7PInegqFBct6StsKbYq9Q/5yJ8s+Rvy71ny3r35fXw0XzUoj9HTLH94r&#xA;26JxS6Jq3HnTg3KomqTv8RKrv+cdvLPkb8xNZ8ya9+YN8Na81MJPW0y+/dqlu6cXugary4V4LxoI&#xA;aA7fCQq8v1/zTd+WrrzJ5M8leZLu4/L69uljlnCfC6H7XEjehoVJQr6qruKbYq9d/M38svyP0L8j&#xA;9K1rRdVCaog9fRNbg+K51K5aheORAVIUFfb0aeNQyrDvyq1Kz/M780dLh/NnWpro2dvHHothdAJD&#xA;dSAKY4pGHED1BRzUVlOxboCq781dSs/yx/NHVIfym1qa1N5byR61YWoDw2shDGSKNjyB9MVcUFYj&#xA;sG6gKsx/LL8svyP138j9V1rWtVD6o49fW9bn+G5025WpSONCWJUlvf1q+NAqryLQPNN35luvLfkz&#xA;zr5ku7f8vrK6aOKcp8KIPs8id6CoUFy3pK2wptir1D/nInyz5G/LvWfLevfl9fDRfNSiP0dMsf3i&#xA;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&#xA;HddT9CW3iluYTMIwqss9obcr8Ekv2eR/1TxBNVXmGqaedSuNY1vQNIubby1bXFaHlOlpHO5EEcs1&#xA;KV24gt1xV6l5/wDP/wCS+q/kvoOh6HoLWnme0agA2e0ccfrEstxx/wBIFx2H0njxAKrF/wArLrQ/&#xA;JH5k6Te/mFok50/00uIUuI2Uw+sA1veeiw/fIvWn0ipWmKu/NO60Pzv+ZOrXv5e6JONP9N7iZLeN&#xA;mM3ogtcXnoqP3KN1p9JoWpirKPIHn/8AJfSvyX17Q9c0FrvzPdtQg7vdueX1eWK44/6OLfuPpHLk&#xA;QFXlul6edNuNH1vX9Iubny1c3FaDlAl3HA4E8cU1KV34kr0xV6f+ffmb8tPO2s+X7T8uNHdtT9CK&#xA;3lltoTCJAyqsFoLcL8ckX2eQ/wBUcgBRV35CeZvy08k6z5gtPzH0d11P0JbeKW5hMwjCqyz2htyv&#xA;wSS/Z5H/AFTxBNVXmGqaedSuNY1vQNIubby1bXFaHlOlpHO5EEcs1KV24gt1xV6l5/8AP/5L6r+S&#xA;+g6HoegtaeZ7RqADZ7Rxx+sSy3HH/SBcdh9J48QCqxf8rLrQ/JH5k6Te/mFok50/00uIUuI2Uw+s&#xA;A1veeiw/fIvWn0ipWmKu/NO60Pzv+ZOrXv5e6JONP9N7iZLeNmM3ogtcXnoqP3KN1p9JoWpirLPI&#xA;f5i/k1pf5Ja55d1zQDc+ZLlviXcveSNy+rzJcUP1f6tXcfSOXNhirynS9POm3Gj63r+kXNz5aubi&#xA;tBygS7jgcCeOKalK78SV6Yq9P/PvzN+WnnbWfL9p+XGju2p+hFbyy20JhEgZVWC0FuF+OSL7PIf6&#xA;o5ACiqXapY+f/wA+/Pesa7omjRR/V4ORROMUccUSn0IpJiF9WeSnEFuv+Si/CqifKP58az5K/LfW&#xA;/wAvZ9Bt3u5XmhjmuIlQxGYlLhbuBl/fOvROfTo1QAMVY1N+XP5h+S9G0L8wbzR1GmSzpPbC5jEy&#xA;qUYNF9agYfCk37PLr7VFVWXefvP3mn8/vNOg6HoegxW1xbRUAFHcO4U3EstwVBS3QjYfrYgBV3kH&#xA;z95p/IHzTr2h65oMVzcXMVCDRHLoGNvLFcBSXt3J3H6mBBVYjD+XP5h+dNG138wbPR1OmRTvPci2&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000.05 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000.05 li
1000.05 1000.05 li
1000.05 0 li
cp
clp
.0239795 .0239795 mo
1000.02 .0239795 li
1000.02 1000.02 li
.0239795 1000.02 li
.0239795 .0239795 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
f
gsave
1000.05 1000 mo
.0479602 1000.05 li
0 .0479602 li
1000 0 li
1000.05 1000 li
cp
clp
975.047 970.501 mo
970.547 975.001 li
975.047 979.501 li
979.547 975.001 li
975.047 970.501 li
cp
0 0 0 0 cmyk
f
975.044 919.601 mo
969.644 925.001 li
975.045 930.401 li
980.444 925.001 li
975.044 919.601 li
cp
f
975.042 868.701 mo
968.742 875.002 li
975.042 881.301 li
981.342 875.001 li
975.042 868.701 li
cp
f
975.039 817.801 mo
967.839 825.002 li
975.04 832.201 li
982.24 825.001 li
975.039 817.801 li
cp
f
975.037 766.901 mo
966.937 775.002 li
975.038 783.101 li
983.137 775.001 li
975.037 766.901 li
cp
f
975.034 716.001 mo
966.035 725.002 li
975.035 734.001 li
984.035 725.001 li
975.034 716.001 li
cp
f
975.032 665.101 mo
965.132 675.002 li
975.033 684.901 li
984.932 675.001 li
975.032 665.101 li
cp
f
975.029 614.201 mo
964.23 625.002 li
975.031 635.801 li
985.83 625.001 li
975.029 614.201 li
cp
f
975.027 563.301 mo
963.327 575.002 li
975.028 586.701 li
986.728 575.001 li
975.027 563.301 li
cp
f
975.025 512.402 mo
962.425 525.002 li
975.026 537.601 li
987.625 525.001 li
975.025 512.402 li
cp
f
975.022 461.501 mo
961.523 475.002 li
975.023 488.501 li
988.523 475.001 li
975.022 461.501 li
cp
f
975.02 410.601 mo
960.62 425.002 li
975.021 439.402 li
989.42 425.001 li
975.02 410.601 li
cp
f
975.017 359.701 mo
959.718 375.002 li
975.019 390.301 li
990.318 375 li
975.017 359.701 li
cp
f
975.015 308.801 mo
958.815 325.002 li
975.016 341.201 li
991.216 325 li
975.015 308.801 li
cp
f
975.012 257.902 mo
957.913 275.002 li
975.014 292.101 li
992.113 275 li
975.012 257.902 li
cp
f
975.01 207.001 mo
957.011 225.002 li
975.012 243.001 li
993.011 225 li
975.01 207.001 li
cp
f
975.008 156.101 mo
956.109 175.002 li
975.009 193.902 li
993.908 175 li
975.008 156.101 li
cp
f
975.005 105.201 mo
955.206 125.002 li
975.007 144.801 li
994.806 125 li
975.005 105.201 li
cp
f
975.003 54.301 mo
954.303 75.0022 li
975.005 95.7014 li
995.704 75.0002 li
975.003 54.301 li
cp
f
975 3.4016 mo
953.401 25.0022 li
975.002 46.6008 li
996.601 25.0002 li
975 3.4016 li
cp
f
925.047 970.504 mo
920.547 975.004 li
925.047 979.504 li
929.547 975.003 li
925.047 970.504 li
cp
f
925.044 919.604 mo
919.644 925.004 li
925.045 930.404 li
930.444 925.003 li
925.044 919.604 li
cp
f
925.042 868.704 mo
918.742 875.004 li
925.042 881.303 li
931.342 875.003 li
925.042 868.704 li
cp
f
925.039 817.803 mo
917.839 825.004 li
925.04 832.204 li
932.24 825.003 li
925.039 817.803 li
cp
f
925.037 766.904 mo
916.937 775.004 li
925.038 783.104 li
933.137 775.003 li
925.037 766.904 li
cp
f
925.034 716.004 mo
916.035 725.004 li
925.035 734.004 li
934.035 725.003 li
925.034 716.004 li
cp
f
925.032 665.104 mo
915.132 675.004 li
925.033 684.904 li
934.932 675.003 li
925.032 665.104 li
cp
f
925.029 614.204 mo
914.23 625.004 li
925.031 635.803 li
935.83 625.003 li
925.029 614.204 li
cp
f
925.027 563.303 mo
913.327 575.004 li
925.028 586.704 li
936.728 575.003 li
925.027 563.303 li
cp
f
925.025 512.404 mo
912.425 525.004 li
925.026 537.603 li
937.625 525.003 li
925.025 512.404 li
cp
f
925.022 461.504 mo
911.523 475.004 li
925.023 488.504 li
938.523 475.003 li
925.022 461.504 li
cp
f
925.02 410.603 mo
910.62 425.004 li
925.021 439.404 li
939.42 425.003 li
925.02 410.603 li
cp
f
925.017 359.704 mo
909.718 375.004 li
925.019 390.303 li
940.318 375.003 li
925.017 359.704 li
cp
f
925.015 308.803 mo
908.815 325.004 li
925.016 341.204 li
941.216 325.003 li
925.015 308.803 li
cp
f
925.012 257.904 mo
907.913 275.004 li
925.014 292.103 li
942.113 275.003 li
925.012 257.904 li
cp
f
925.01 207.004 mo
907.011 225.004 li
925.012 243.004 li
943.011 225.003 li
925.01 207.004 li
cp
f
925.008 156.103 mo
906.109 175.005 li
925.009 193.904 li
943.908 175.003 li
925.008 156.103 li
cp
f
925.005 105.204 mo
905.206 125.005 li
925.007 144.803 li
944.806 125.003 li
925.005 105.204 li
cp
f
925.003 54.3034 mo
904.303 75.0046 li
925.005 95.7038 li
945.704 75.0026 li
925.003 54.3034 li
cp
f
925 3.404 mo
903.401 25.0046 li
925.002 46.6032 li
946.601 25.0026 li
925 3.404 li
cp
f
875.047 970.506 mo
870.547 975.006 li
875.047 979.506 li
879.547 975.006 li
875.047 970.506 li
cp
f
875.044 919.606 mo
869.644 925.006 li
875.045 930.406 li
880.444 925.006 li
875.044 919.606 li
cp
f
875.042 868.706 mo
868.742 875.006 li
875.042 881.306 li
881.342 875.006 li
875.042 868.706 li
cp
f
875.039 817.806 mo
867.839 825.006 li
875.04 832.206 li
882.24 825.006 li
875.039 817.806 li
cp
f
875.037 766.906 mo
866.937 775.006 li
875.038 783.106 li
883.137 775.006 li
875.037 766.906 li
cp
f
875.034 716.006 mo
866.035 725.006 li
875.035 734.006 li
884.035 725.006 li
875.034 716.006 li
cp
f
875.032 665.106 mo
865.132 675.006 li
875.033 684.906 li
884.932 675.005 li
875.032 665.106 li
cp
f
875.029 614.206 mo
864.23 625.007 li
875.031 635.806 li
885.83 625.005 li
875.029 614.206 li
cp
f
875.027 563.306 mo
863.327 575.007 li
875.028 586.706 li
886.728 575.005 li
875.027 563.306 li
cp
f
875.025 512.406 mo
862.425 525.007 li
875.026 537.606 li
887.625 525.005 li
875.025 512.406 li
cp
f
875.022 461.506 mo
861.523 475.007 li
875.023 488.506 li
888.523 475.005 li
875.022 461.506 li
cp
f
875.02 410.606 mo
860.62 425.007 li
875.021 439.406 li
889.42 425.005 li
875.02 410.606 li
cp
f
875.017 359.706 mo
859.718 375.007 li
875.019 390.306 li
890.318 375.005 li
875.017 359.706 li
cp
f
875.015 308.806 mo
858.815 325.007 li
875.016 341.206 li
891.216 325.005 li
875.015 308.806 li
cp
f
875.012 257.906 mo
857.913 275.007 li
875.014 292.106 li
892.113 275.005 li
875.012 257.906 li
cp
f
875.01 207.006 mo
857.011 225.007 li
875.012 243.006 li
893.011 225.005 li
875.01 207.006 li
cp
f
875.008 156.106 mo
856.109 175.007 li
875.009 193.906 li
893.908 175.005 li
875.008 156.106 li
cp
f
875.005 105.206 mo
855.206 125.007 li
875.007 144.806 li
894.806 125.005 li
875.005 105.206 li
cp
f
875.003 54.3058 mo
854.303 75.007 li
875.005 95.7062 li
895.704 75.005 li
875.003 54.3058 li
cp
f
875 3.40639 mo
853.401 25.007 li
875.002 46.6056 li
896.601 25.005 li
875 3.40639 li
cp
f
825.047 970.508 mo
820.547 975.009 li
825.047 979.508 li
829.547 975.008 li
825.047 970.508 li
cp
f
825.044 919.608 mo
819.644 925.009 li
825.045 930.408 li
830.444 925.008 li
825.044 919.608 li
cp
f
825.042 868.709 mo
818.742 875.009 li
825.042 881.308 li
831.342 875.008 li
825.042 868.709 li
cp
f
825.039 817.808 mo
817.839 825.009 li
825.04 832.209 li
832.24 825.008 li
825.039 817.808 li
cp
f
825.037 766.908 mo
816.937 775.009 li
825.038 783.108 li
833.137 775.008 li
825.037 766.908 li
cp
f
825.034 716.008 mo
816.035 725.009 li
825.035 734.008 li
834.035 725.008 li
825.034 716.008 li
cp
f
825.032 665.108 mo
815.132 675.009 li
825.033 684.908 li
834.932 675.008 li
825.032 665.108 li
cp
f
825.029 614.209 mo
814.23 625.009 li
825.031 635.808 li
835.83 625.008 li
825.029 614.209 li
cp
f
825.027 563.308 mo
813.327 575.009 li
825.028 586.709 li
836.728 575.008 li
825.027 563.308 li
cp
f
825.025 512.409 mo
812.425 525.009 li
825.026 537.608 li
837.625 525.008 li
825.025 512.409 li
cp
f
825.022 461.508 mo
811.523 475.009 li
825.023 488.508 li
838.523 475.008 li
825.022 461.508 li
cp
f
825.02 410.608 mo
810.62 425.009 li
825.021 439.409 li
839.42 425.008 li
825.02 410.608 li
cp
f
825.017 359.709 mo
809.718 375.009 li
825.019 390.308 li
840.318 375.008 li
825.017 359.709 li
cp
f
825.015 308.808 mo
808.815 325.009 li
825.016 341.209 li
841.216 325.008 li
825.015 308.808 li
cp
f
825.012 257.909 mo
807.913 275.009 li
825.014 292.108 li
842.113 275.008 li
825.012 257.909 li
cp
f
825.01 207.008 mo
807.011 225.009 li
825.012 243.008 li
843.011 225.008 li
825.01 207.008 li
cp
f
825.008 156.108 mo
806.109 175.009 li
825.009 193.909 li
843.908 175.007 li
825.008 156.108 li
cp
f
825.005 105.209 mo
805.206 125.009 li
825.007 144.808 li
844.806 125.007 li
825.005 105.209 li
cp
f
825.003 54.3082 mo
804.303 75.0094 li
825.005 95.7086 li
845.704 75.0074 li
825.003 54.3082 li
cp
f
825 3.40879 mo
803.401 25.0094 li
825.002 46.608 li
846.601 25.0074 li
825 3.40879 li
cp
f
775.047 970.511 mo
770.547 975.011 li
775.047 979.511 li
779.547 975.011 li
775.047 970.511 li
cp
f
775.044 919.611 mo
769.644 925.011 li
775.045 930.411 li
780.444 925.011 li
775.044 919.611 li
cp
f
775.042 868.711 mo
768.742 875.011 li
775.042 881.311 li
781.342 875.01 li
775.042 868.711 li
cp
f
775.039 817.811 mo
767.839 825.011 li
775.04 832.211 li
782.24 825.01 li
775.039 817.811 li
cp
f
775.037 766.911 mo
766.937 775.011 li
775.038 783.111 li
783.137 775.01 li
775.037 766.911 li
cp
f
775.034 716.011 mo
766.035 725.011 li
775.035 734.011 li
784.035 725.01 li
775.034 716.011 li
cp
f
775.032 665.111 mo
765.132 675.011 li
775.033 684.911 li
784.932 675.01 li
775.032 665.111 li
cp
f
775.029 614.211 mo
764.23 625.011 li
775.031 635.811 li
785.83 625.01 li
775.029 614.211 li
cp
f
775.027 563.311 mo
763.327 575.011 li
775.028 586.711 li
786.728 575.01 li
775.027 563.311 li
cp
f
775.025 512.411 mo
762.425 525.011 li
775.026 537.61 li
787.625 525.01 li
775.025 512.411 li
cp
f
775.022 461.511 mo
761.523 475.011 li
775.023 488.511 li
788.523 475.01 li
775.022 461.511 li
cp
f
775.02 410.61 mo
760.62 425.011 li
775.021 439.411 li
789.42 425.01 li
775.02 410.61 li
cp
f
775.017 359.711 mo
759.718 375.012 li
775.019 390.311 li
790.318 375.01 li
775.017 359.711 li
cp
f
775.015 308.811 mo
758.815 325.012 li
775.016 341.211 li
791.216 325.01 li
775.015 308.811 li
cp
f
775.012 257.911 mo
757.913 275.012 li
775.014 292.11 li
792.113 275.01 li
775.012 257.911 li
cp
f
775.01 207.011 mo
757.011 225.012 li
775.012 243.011 li
793.011 225.01 li
775.01 207.011 li
cp
f
775.008 156.11 mo
756.109 175.012 li
775.009 193.911 li
793.908 175.01 li
775.008 156.11 li
cp
f
775.005 105.211 mo
755.206 125.012 li
775.007 144.811 li
794.806 125.01 li
775.005 105.211 li
cp
f
775.003 54.3106 mo
754.303 75.0118 li
775.005 95.711 li
795.704 75.0098 li
775.003 54.3106 li
cp
f
775 3.41119 mo
753.401 25.0118 li
775.002 46.6104 li
796.601 25.0098 li
775 3.41119 li
cp
f
725.047 970.513 mo
720.547 975.013 li
725.047 979.513 li
729.547 975.013 li
725.047 970.513 li
cp
f
725.044 919.613 mo
719.644 925.013 li
725.045 930.413 li
730.444 925.013 li
725.044 919.613 li
cp
f
725.042 868.713 mo
718.742 875.013 li
725.042 881.313 li
731.342 875.013 li
725.042 868.713 li
cp
f
725.039 817.813 mo
717.839 825.014 li
725.04 832.213 li
732.24 825.013 li
725.039 817.813 li
cp
f
725.037 766.913 mo
716.937 775.014 li
725.038 783.113 li
733.137 775.013 li
725.037 766.913 li
cp
f
725.034 716.013 mo
716.035 725.014 li
725.035 734.013 li
734.035 725.013 li
725.034 716.013 li
cp
f
725.032 665.113 mo
715.132 675.014 li
725.033 684.913 li
734.932 675.013 li
725.032 665.113 li
cp
f
725.029 614.213 mo
714.23 625.014 li
725.031 635.813 li
735.83 625.013 li
725.029 614.213 li
cp
f
725.027 563.313 mo
713.327 575.014 li
725.028 586.713 li
736.728 575.013 li
725.027 563.313 li
cp
f
725.025 512.414 mo
712.425 525.014 li
725.026 537.613 li
737.625 525.013 li
725.025 512.414 li
cp
f
725.022 461.513 mo
711.523 475.014 li
725.023 488.513 li
738.523 475.013 li
725.022 461.513 li
cp
f
725.02 410.613 mo
710.62 425.014 li
725.021 439.414 li
739.42 425.013 li
725.02 410.613 li
cp
f
725.017 359.713 mo
709.718 375.014 li
725.019 390.313 li
740.318 375.012 li
725.017 359.713 li
cp
f
725.015 308.813 mo
708.815 325.014 li
725.016 341.213 li
741.216 325.012 li
725.015 308.813 li
cp
f
725.012 257.914 mo
707.913 275.014 li
725.014 292.113 li
742.113 275.012 li
725.012 257.914 li
cp
f
725.01 207.013 mo
707.011 225.014 li
725.012 243.013 li
743.011 225.012 li
725.01 207.013 li
cp
f
725.008 156.113 mo
706.109 175.014 li
725.009 193.914 li
743.908 175.012 li
725.008 156.113 li
cp
f
725.005 105.213 mo
705.206 125.014 li
725.007 144.813 li
744.806 125.012 li
725.005 105.213 li
cp
f
725.003 54.313 mo
704.303 75.0142 li
725.005 95.7134 li
745.704 75.0122 li
725.003 54.313 li
cp
f
725 3.41359 mo
703.401 25.0142 li
725.002 46.6128 li
746.601 25.0122 li
725 3.41359 li
cp
f
675.047 970.516 mo
670.547 975.016 li
675.047 979.516 li
679.547 975.015 li
675.047 970.516 li
cp
f
675.044 919.616 mo
669.644 925.016 li
675.045 930.415 li
680.445 925.015 li
675.044 919.616 li
cp
f
675.042 868.716 mo
668.742 875.016 li
675.042 881.315 li
681.342 875.015 li
675.042 868.716 li
cp
f
675.039 817.815 mo
667.839 825.016 li
675.04 832.216 li
682.24 825.015 li
675.039 817.815 li
cp
f
675.037 766.915 mo
666.938 775.016 li
675.038 783.116 li
683.137 775.015 li
675.037 766.915 li
cp
f
675.034 716.016 mo
666.035 725.016 li
675.035 734.016 li
684.035 725.015 li
675.034 716.016 li
cp
f
675.032 665.116 mo
665.132 675.016 li
675.033 684.915 li
684.933 675.015 li
675.032 665.116 li
cp
f
675.029 614.216 mo
664.23 625.016 li
675.031 635.815 li
685.83 625.015 li
675.029 614.216 li
cp
f
675.027 563.315 mo
663.327 575.016 li
675.028 586.716 li
686.728 575.015 li
675.027 563.315 li
cp
f
675.025 512.416 mo
662.426 525.016 li
675.026 537.615 li
687.625 525.015 li
675.025 512.416 li
cp
f
675.022 461.516 mo
661.523 475.016 li
675.023 488.516 li
688.523 475.015 li
675.022 461.516 li
cp
f
675.02 410.615 mo
660.62 425.016 li
675.021 439.416 li
689.421 425.015 li
675.02 410.615 li
cp
f
675.017 359.716 mo
659.718 375.016 li
675.019 390.315 li
690.318 375.015 li
675.017 359.716 li
cp
f
675.015 308.815 mo
658.815 325.016 li
675.016 341.216 li
691.216 325.015 li
675.015 308.815 li
cp
f
675.012 257.916 mo
657.914 275.016 li
675.014 292.115 li
692.113 275.015 li
675.012 257.916 li
cp
f
675.01 207.016 mo
657.011 225.016 li
675.012 243.016 li
693.011 225.015 li
675.01 207.016 li
cp
f
675.008 156.115 mo
656.108 175.016 li
675.009 193.916 li
693.909 175.015 li
675.008 156.115 li
cp
f
675.005 105.216 mo
655.206 125.017 li
675.007 144.815 li
694.806 125.015 li
675.005 105.216 li
cp
f
675.003 54.3154 mo
654.303 75.0166 li
675.005 95.7158 li
695.704 75.0146 li
675.003 54.3154 li
cp
f
675 3.41599 mo
653.402 25.0166 li
675.002 46.6152 li
696.601 25.0146 li
675 3.41599 li
cp
f
625.047 970.518 mo
620.547 975.018 li
625.047 979.518 li
629.547 975.018 li
625.047 970.518 li
cp
f
625.044 919.618 mo
619.644 925.018 li
625.045 930.418 li
630.445 925.018 li
625.044 919.618 li
cp
f
625.042 868.718 mo
618.742 875.018 li
625.042 881.318 li
631.342 875.018 li
625.042 868.718 li
cp
f
625.039 817.818 mo
617.839 825.018 li
625.04 832.218 li
632.24 825.018 li
625.039 817.818 li
cp
f
625.037 766.918 mo
616.938 775.018 li
625.038 783.118 li
633.137 775.018 li
625.037 766.918 li
cp
f
625.034 716.018 mo
616.035 725.018 li
625.035 734.018 li
634.035 725.018 li
625.034 716.018 li
cp
f
625.032 665.118 mo
615.132 675.018 li
625.033 684.918 li
634.933 675.018 li
625.032 665.118 li
cp
f
625.029 614.218 mo
614.23 625.018 li
625.031 635.818 li
635.83 625.017 li
625.029 614.218 li
cp
f
625.027 563.318 mo
613.327 575.019 li
625.028 586.718 li
636.728 575.017 li
625.027 563.318 li
cp
f
625.025 512.418 mo
612.426 525.019 li
625.026 537.618 li
637.625 525.017 li
625.025 512.418 li
cp
f
625.022 461.518 mo
611.523 475.019 li
625.023 488.518 li
638.523 475.017 li
625.022 461.518 li
cp
f
625.02 410.618 mo
610.62 425.019 li
625.021 439.418 li
639.421 425.017 li
625.02 410.618 li
cp
f
625.017 359.718 mo
609.718 375.019 li
625.019 390.318 li
640.318 375.017 li
625.017 359.718 li
cp
f
625.015 308.818 mo
608.815 325.019 li
625.016 341.218 li
641.216 325.017 li
625.015 308.818 li
cp
f
625.012 257.918 mo
607.914 275.019 li
625.014 292.118 li
642.113 275.017 li
625.012 257.918 li
cp
f
625.01 207.018 mo
607.011 225.019 li
625.012 243.018 li
643.011 225.017 li
625.01 207.018 li
cp
f
625.008 156.118 mo
606.108 175.019 li
625.009 193.918 li
643.909 175.017 li
625.008 156.118 li
cp
f
625.005 105.218 mo
605.206 125.019 li
625.007 144.818 li
644.806 125.017 li
625.005 105.218 li
cp
f
625.003 54.3178 mo
604.303 75.019 li
625.005 95.7182 li
645.704 75.017 li
625.003 54.3178 li
cp
f
625 3.41839 mo
603.402 25.019 li
625.002 46.6176 li
646.601 25.0169 li
625 3.41839 li
cp
f
575.047 970.52 mo
570.547 975.021 li
575.047 979.52 li
579.547 975.02 li
575.047 970.52 li
cp
f
575.044 919.62 mo
569.644 925.021 li
575.045 930.42 li
580.445 925.02 li
575.044 919.62 li
cp
f
575.042 868.721 mo
568.742 875.021 li
575.042 881.32 li
581.342 875.02 li
575.042 868.721 li
cp
f
575.039 817.82 mo
567.839 825.021 li
575.04 832.221 li
582.24 825.02 li
575.039 817.82 li
cp
f
575.037 766.92 mo
566.938 775.021 li
575.038 783.12 li
583.137 775.02 li
575.037 766.92 li
cp
f
575.034 716.02 mo
566.035 725.021 li
575.035 734.02 li
584.035 725.02 li
575.034 716.02 li
cp
f
575.032 665.12 mo
565.132 675.021 li
575.033 684.92 li
584.933 675.02 li
575.032 665.12 li
cp
f
575.029 614.221 mo
564.23 625.021 li
575.031 635.82 li
585.83 625.02 li
575.029 614.221 li
cp
f
575.027 563.32 mo
563.327 575.021 li
575.028 586.721 li
586.728 575.02 li
575.027 563.32 li
cp
f
575.025 512.421 mo
562.426 525.021 li
575.026 537.62 li
587.625 525.02 li
575.025 512.421 li
cp
f
575.022 461.52 mo
561.523 475.021 li
575.023 488.52 li
588.523 475.02 li
575.022 461.52 li
cp
f
575.02 410.62 mo
560.62 425.021 li
575.021 439.421 li
589.421 425.02 li
575.02 410.62 li
cp
f
575.017 359.721 mo
559.718 375.021 li
575.019 390.32 li
590.318 375.02 li
575.017 359.721 li
cp
f
575.015 308.82 mo
558.815 325.021 li
575.016 341.221 li
591.216 325.02 li
575.015 308.82 li
cp
f
575.012 257.921 mo
557.914 275.021 li
575.014 292.12 li
592.113 275.02 li
575.012 257.921 li
cp
f
575.01 207.02 mo
557.011 225.021 li
575.012 243.02 li
593.011 225.02 li
575.01 207.02 li
cp
f
575.008 156.12 mo
556.108 175.021 li
575.009 193.921 li
593.909 175.019 li
575.008 156.12 li
cp
f
575.005 105.221 mo
555.206 125.021 li
575.007 144.82 li
594.806 125.019 li
575.005 105.221 li
cp
f
575.003 54.3202 mo
554.303 75.0214 li
575.005 95.7206 li
595.704 75.0194 li
575.003 54.3202 li
cp
f
575 3.42078 mo
553.402 25.0214 li
575.002 46.62 li
596.601 25.0193 li
575 3.42078 li
cp
f
525.047 970.523 mo
520.547 975.023 li
525.047 979.523 li
529.547 975.023 li
525.047 970.523 li
cp
f
525.044 919.623 mo
519.644 925.023 li
525.045 930.423 li
530.445 925.023 li
525.044 919.623 li
cp
f
525.042 868.723 mo
518.742 875.023 li
525.042 881.323 li
531.342 875.022 li
525.042 868.723 li
cp
f
525.039 817.823 mo
517.839 825.023 li
525.04 832.223 li
532.24 825.022 li
525.039 817.823 li
cp
f
525.037 766.923 mo
516.938 775.023 li
525.038 783.123 li
533.137 775.022 li
525.037 766.923 li
cp
f
525.034 716.023 mo
516.035 725.023 li
525.035 734.023 li
534.035 725.022 li
525.034 716.023 li
cp
f
525.032 665.123 mo
515.132 675.023 li
525.033 684.923 li
534.933 675.022 li
525.032 665.123 li
cp
f
525.029 614.223 mo
514.23 625.023 li
525.031 635.823 li
535.83 625.022 li
525.029 614.223 li
cp
f
525.027 563.323 mo
513.327 575.023 li
525.028 586.723 li
536.728 575.022 li
525.027 563.323 li
cp
f
525.025 512.423 mo
512.426 525.023 li
525.026 537.622 li
537.625 525.022 li
525.025 512.423 li
cp
f
525.022 461.523 mo
511.523 475.023 li
525.023 488.523 li
538.523 475.022 li
525.022 461.523 li
cp
f
525.02 410.622 mo
510.62 425.023 li
525.021 439.423 li
539.421 425.022 li
525.02 410.622 li
cp
f
525.017 359.723 mo
509.718 375.024 li
525.019 390.323 li
540.318 375.022 li
525.017 359.723 li
cp
f
525.015 308.823 mo
508.815 325.024 li
525.016 341.223 li
541.216 325.022 li
525.015 308.823 li
cp
f
525.012 257.923 mo
507.914 275.024 li
525.014 292.122 li
542.113 275.022 li
525.012 257.923 li
cp
f
525.01 207.023 mo
507.011 225.024 li
525.012 243.023 li
543.011 225.022 li
525.01 207.023 li
cp
f
525.008 156.122 mo
506.108 175.024 li
525.009 193.923 li
543.909 175.022 li
525.008 156.122 li
cp
f
525.005 105.223 mo
505.206 125.024 li
525.007 144.823 li
544.806 125.022 li
525.005 105.223 li
cp
f
525.003 54.3226 mo
504.303 75.0238 li
525.005 95.723 li
545.704 75.0218 li
525.003 54.3226 li
cp
f
525 3.42318 mo
503.402 25.0238 li
525.002 46.6224 li
546.601 25.0217 li
525 3.42318 li
cp
f
475.047 970.525 mo
470.547 975.025 li
475.047 979.525 li
479.547 975.025 li
475.047 970.525 li
cp
f
475.044 919.625 mo
469.644 925.025 li
475.045 930.425 li
480.445 925.025 li
475.044 919.625 li
cp
f
475.042 868.725 mo
468.742 875.025 li
475.042 881.325 li
481.342 875.025 li
475.042 868.725 li
cp
f
475.039 817.825 mo
467.839 825.026 li
475.04 832.225 li
482.24 825.025 li
475.039 817.825 li
cp
f
475.037 766.925 mo
466.938 775.026 li
475.038 783.125 li
483.137 775.025 li
475.037 766.925 li
cp
f
475.034 716.025 mo
466.035 725.026 li
475.035 734.025 li
484.035 725.025 li
475.034 716.025 li
cp
f
475.032 665.125 mo
465.132 675.026 li
475.033 684.925 li
484.933 675.025 li
475.032 665.125 li
cp
f
475.029 614.225 mo
464.23 625.026 li
475.03 635.825 li
485.83 625.025 li
475.029 614.225 li
cp
f
475.027 563.325 mo
463.327 575.026 li
475.028 586.725 li
486.728 575.025 li
475.027 563.325 li
cp
f
475.025 512.426 mo
462.426 525.026 li
475.026 537.625 li
487.625 525.025 li
475.025 512.426 li
cp
f
475.022 461.525 mo
461.523 475.026 li
475.023 488.525 li
488.523 475.025 li
475.022 461.525 li
cp
f
475.02 410.625 mo
460.62 425.026 li
475.021 439.426 li
489.421 425.024 li
475.02 410.625 li
cp
f
475.017 359.725 mo
459.718 375.026 li
475.019 390.325 li
490.318 375.024 li
475.017 359.725 li
cp
f
475.015 308.825 mo
458.815 325.026 li
475.016 341.225 li
491.216 325.024 li
475.015 308.825 li
cp
f
475.012 257.926 mo
457.914 275.026 li
475.014 292.125 li
492.113 275.024 li
475.012 257.926 li
cp
f
475.01 207.025 mo
457.011 225.026 li
475.012 243.025 li
493.011 225.024 li
475.01 207.025 li
cp
f
475.007 156.125 mo
456.108 175.026 li
475.009 193.926 li
493.909 175.024 li
475.007 156.125 li
cp
f
475.005 105.225 mo
455.206 125.026 li
475.007 144.825 li
494.806 125.024 li
475.005 105.225 li
cp
f
475.003 54.325 mo
454.303 75.0262 li
475.005 95.7254 li
495.704 75.0242 li
475.003 54.325 li
cp
f
475 3.42558 mo
453.402 25.0262 li
475.002 46.6248 li
496.601 25.0241 li
475 3.42558 li
cp
f
425.047 970.528 mo
420.547 975.028 li
425.047 979.528 li
429.547 975.027 li
425.047 970.528 li
cp
f
425.044 919.628 mo
419.644 925.028 li
425.045 930.427 li
430.445 925.027 li
425.044 919.628 li
cp
f
425.042 868.728 mo
418.742 875.028 li
425.042 881.327 li
431.342 875.027 li
425.042 868.728 li
cp
f
425.039 817.827 mo
417.839 825.028 li
425.04 832.228 li
432.24 825.027 li
425.039 817.827 li
cp
f
425.037 766.927 mo
416.938 775.028 li
425.038 783.128 li
433.137 775.027 li
425.037 766.927 li
cp
f
425.034 716.028 mo
416.035 725.028 li
425.035 734.028 li
434.035 725.027 li
425.034 716.028 li
cp
f
425.032 665.128 mo
415.132 675.028 li
425.033 684.927 li
434.933 675.027 li
425.032 665.128 li
cp
f
425.029 614.228 mo
414.23 625.028 li
425.03 635.827 li
435.83 625.027 li
425.029 614.228 li
cp
f
425.027 563.327 mo
413.327 575.028 li
425.028 586.728 li
436.728 575.027 li
425.027 563.327 li
cp
f
425.025 512.428 mo
412.426 525.028 li
425.026 537.627 li
437.625 525.027 li
425.025 512.428 li
cp
f
425.022 461.528 mo
411.523 475.028 li
425.023 488.528 li
438.523 475.027 li
425.022 461.528 li
cp
f
425.02 410.627 mo
410.62 425.028 li
425.021 439.428 li
439.421 425.027 li
425.02 410.627 li
cp
f
425.017 359.728 mo
409.718 375.028 li
425.019 390.327 li
440.318 375.027 li
425.017 359.728 li
cp
f
425.015 308.827 mo
408.815 325.028 li
425.016 341.228 li
441.216 325.027 li
425.015 308.827 li
cp
f
425.012 257.928 mo
407.914 275.028 li
425.014 292.127 li
442.113 275.027 li
425.012 257.928 li
cp
f
425.01 207.028 mo
407.011 225.028 li
425.012 243.028 li
443.011 225.027 li
425.01 207.028 li
cp
f
425.007 156.127 mo
406.108 175.028 li
425.009 193.928 li
443.909 175.027 li
425.007 156.127 li
cp
f
425.005 105.228 mo
405.206 125.029 li
425.007 144.827 li
444.806 125.027 li
425.005 105.228 li
cp
f
425.003 54.3274 mo
404.303 75.0286 li
425.005 95.7278 li
445.704 75.0266 li
425.003 54.3274 li
cp
f
425 3.42798 mo
403.402 25.0286 li
425.002 46.6272 li
446.601 25.0265 li
425 3.42798 li
cp
f
375.047 970.53 mo
370.547 975.03 li
375.047 979.53 li
379.547 975.03 li
375.047 970.53 li
cp
f
375.044 919.63 mo
369.644 925.03 li
375.045 930.43 li
380.445 925.03 li
375.044 919.63 li
cp
f
375.042 868.73 mo
368.742 875.03 li
375.042 881.33 li
381.342 875.03 li
375.042 868.73 li
cp
f
375.039 817.83 mo
367.839 825.03 li
375.04 832.23 li
382.24 825.03 li
375.039 817.83 li
cp
f
375.037 766.93 mo
366.938 775.03 li
375.038 783.13 li
383.137 775.03 li
375.037 766.93 li
cp
f
375.034 716.03 mo
366.035 725.03 li
375.035 734.03 li
384.035 725.03 li
375.034 716.03 li
cp
f
375.032 665.13 mo
365.132 675.03 li
375.033 684.93 li
384.933 675.029 li
375.032 665.13 li
cp
f
375.029 614.23 mo
364.23 625.031 li
375.03 635.83 li
385.83 625.029 li
375.029 614.23 li
cp
f
375.027 563.33 mo
363.327 575.031 li
375.028 586.73 li
386.728 575.029 li
375.027 563.33 li
cp
f
375.025 512.43 mo
362.426 525.031 li
375.026 537.63 li
387.625 525.029 li
375.025 512.43 li
cp
f
375.022 461.53 mo
361.523 475.031 li
375.023 488.53 li
388.523 475.029 li
375.022 461.53 li
cp
f
375.02 410.63 mo
360.62 425.031 li
375.021 439.43 li
389.421 425.029 li
375.02 410.63 li
cp
f
375.017 359.73 mo
359.718 375.031 li
375.019 390.33 li
390.318 375.029 li
375.017 359.73 li
cp
f
375.015 308.83 mo
358.815 325.031 li
375.016 341.23 li
391.216 325.029 li
375.015 308.83 li
cp
f
375.012 257.93 mo
357.914 275.031 li
375.014 292.13 li
392.113 275.029 li
375.012 257.93 li
cp
f
375.01 207.03 mo
357.011 225.031 li
375.012 243.03 li
393.011 225.029 li
375.01 207.03 li
cp
f
375.007 156.13 mo
356.108 175.031 li
375.009 193.93 li
393.909 175.029 li
375.007 156.13 li
cp
f
375.005 105.23 mo
355.206 125.031 li
375.007 144.83 li
394.806 125.029 li
375.005 105.23 li
cp
f
375.003 54.3298 mo
354.303 75.031 li
375.005 95.7302 li
395.704 75.029 li
375.003 54.3298 li
cp
f
375 3.43038 mo
353.402 25.031 li
375.002 46.6296 li
396.601 25.0289 li
375 3.43038 li
cp
f
325.047 970.532 mo
320.547 975.033 li
325.047 979.532 li
329.547 975.032 li
325.047 970.532 li
cp
f
325.044 919.632 mo
319.644 925.033 li
325.045 930.432 li
330.445 925.032 li
325.044 919.632 li
cp
f
325.042 868.733 mo
318.742 875.033 li
325.042 881.332 li
331.342 875.032 li
325.042 868.733 li
cp
f
325.039 817.832 mo
317.839 825.033 li
325.04 832.233 li
332.24 825.032 li
325.039 817.832 li
cp
f
325.037 766.932 mo
316.938 775.033 li
325.038 783.132 li
333.137 775.032 li
325.037 766.932 li
cp
f
325.034 716.032 mo
316.035 725.033 li
325.035 734.032 li
334.035 725.032 li
325.034 716.032 li
cp
f
325.032 665.132 mo
315.132 675.033 li
325.033 684.932 li
334.933 675.032 li
325.032 665.132 li
cp
f
325.029 614.233 mo
314.23 625.033 li
325.03 635.832 li
335.83 625.032 li
325.029 614.233 li
cp
f
325.027 563.332 mo
313.327 575.033 li
325.028 586.733 li
336.728 575.032 li
325.027 563.332 li
cp
f
325.025 512.433 mo
312.426 525.033 li
325.026 537.632 li
337.625 525.032 li
325.025 512.433 li
cp
f
325.022 461.532 mo
311.523 475.033 li
325.023 488.532 li
338.523 475.032 li
325.022 461.532 li
cp
f
325.02 410.632 mo
310.62 425.033 li
325.021 439.433 li
339.421 425.032 li
325.02 410.632 li
cp
f
325.017 359.733 mo
309.718 375.033 li
325.019 390.332 li
340.318 375.032 li
325.017 359.733 li
cp
f
325.015 308.832 mo
308.815 325.033 li
325.016 341.233 li
341.216 325.032 li
325.015 308.832 li
cp
f
325.012 257.933 mo
307.914 275.033 li
325.014 292.132 li
342.113 275.032 li
325.012 257.933 li
cp
f
325.01 207.032 mo
307.011 225.033 li
325.012 243.032 li
343.011 225.032 li
325.01 207.032 li
cp
f
325.007 156.132 mo
306.108 175.033 li
325.009 193.933 li
343.909 175.031 li
325.007 156.132 li
cp
f
325.005 105.233 mo
305.206 125.033 li
325.007 144.832 li
344.806 125.031 li
325.005 105.233 li
cp
f
325.003 54.3322 mo
304.303 75.0334 li
325.005 95.7326 li
345.704 75.0314 li
325.003 54.3322 li
cp
f
325 3.43277 mo
303.402 25.0334 li
325.002 46.632 li
346.601 25.0313 li
325 3.43277 li
cp
f
275.047 970.535 mo
270.547 975.035 li
275.047 979.535 li
279.547 975.035 li
275.047 970.535 li
cp
f
275.044 919.635 mo
269.644 925.035 li
275.045 930.435 li
280.445 925.034 li
275.044 919.635 li
cp
f
275.042 868.735 mo
268.742 875.035 li
275.042 881.335 li
281.342 875.034 li
275.042 868.735 li
cp
f
275.039 817.835 mo
267.839 825.035 li
275.04 832.235 li
282.24 825.034 li
275.039 817.835 li
cp
f
275.037 766.935 mo
266.938 775.035 li
275.038 783.135 li
283.137 775.034 li
275.037 766.935 li
cp
f
275.034 716.035 mo
266.035 725.035 li
275.035 734.035 li
284.035 725.034 li
275.034 716.035 li
cp
f
275.032 665.135 mo
265.132 675.035 li
275.033 684.935 li
284.933 675.034 li
275.032 665.135 li
cp
f
275.029 614.235 mo
264.23 625.035 li
275.03 635.835 li
285.83 625.034 li
275.029 614.235 li
cp
f
275.027 563.335 mo
263.327 575.035 li
275.028 586.735 li
286.728 575.034 li
275.027 563.335 li
cp
f
275.025 512.435 mo
262.426 525.035 li
275.026 537.634 li
287.625 525.034 li
275.025 512.435 li
cp
f
275.022 461.535 mo
261.523 475.035 li
275.023 488.535 li
288.523 475.034 li
275.022 461.535 li
cp
f
275.02 410.634 mo
260.62 425.035 li
275.021 439.435 li
289.421 425.034 li
275.02 410.634 li
cp
f
275.017 359.735 mo
259.718 375.035 li
275.019 390.335 li
290.318 375.034 li
275.017 359.735 li
cp
f
275.015 308.835 mo
258.815 325.036 li
275.016 341.235 li
291.216 325.034 li
275.015 308.835 li
cp
f
275.012 257.935 mo
257.914 275.036 li
275.014 292.134 li
292.113 275.034 li
275.012 257.935 li
cp
f
275.01 207.035 mo
257.011 225.036 li
275.012 243.035 li
293.011 225.034 li
275.01 207.035 li
cp
f
275.007 156.134 mo
256.108 175.036 li
275.009 193.935 li
293.909 175.034 li
275.007 156.134 li
cp
f
275.005 105.235 mo
255.206 125.036 li
275.007 144.835 li
294.806 125.034 li
275.005 105.235 li
cp
f
275.003 54.3346 mo
254.303 75.0358 li
275.005 95.735 li
295.704 75.0338 li
275.003 54.3346 li
cp
f
275 3.43517 mo
253.402 25.0358 li
275.002 46.6344 li
296.601 25.0337 li
275 3.43517 li
cp
f
225.047 970.537 mo
220.547 975.037 li
225.047 979.537 li
229.547 975.037 li
225.047 970.537 li
cp
f
225.044 919.637 mo
219.644 925.037 li
225.045 930.437 li
230.445 925.037 li
225.044 919.637 li
cp
f
225.042 868.737 mo
218.742 875.037 li
225.042 881.337 li
231.342 875.037 li
225.042 868.737 li
cp
f
225.039 817.837 mo
217.839 825.038 li
225.04 832.237 li
232.24 825.037 li
225.039 817.837 li
cp
f
225.037 766.937 mo
216.938 775.038 li
225.038 783.137 li
233.137 775.037 li
225.037 766.937 li
cp
f
225.034 716.037 mo
216.035 725.038 li
225.035 734.037 li
234.035 725.037 li
225.034 716.037 li
cp
f
225.032 665.137 mo
215.132 675.038 li
225.033 684.937 li
234.933 675.037 li
225.032 665.137 li
cp
f
225.029 614.237 mo
214.23 625.038 li
225.03 635.837 li
235.83 625.037 li
225.029 614.237 li
cp
f
225.027 563.337 mo
213.327 575.038 li
225.028 586.737 li
236.728 575.037 li
225.027 563.337 li
cp
f
225.025 512.438 mo
212.426 525.038 li
225.026 537.637 li
237.625 525.037 li
225.025 512.438 li
cp
f
225.022 461.537 mo
211.523 475.038 li
225.023 488.537 li
238.523 475.037 li
225.022 461.537 li
cp
f
225.02 410.637 mo
210.62 425.038 li
225.021 439.438 li
239.421 425.036 li
225.02 410.637 li
cp
f
225.017 359.737 mo
209.718 375.038 li
225.019 390.337 li
240.318 375.036 li
225.017 359.737 li
cp
f
225.015 308.837 mo
208.815 325.038 li
225.016 341.237 li
241.216 325.036 li
225.015 308.837 li
cp
f
225.012 257.938 mo
207.914 275.038 li
225.014 292.137 li
242.113 275.036 li
225.012 257.938 li
cp
f
225.01 207.037 mo
207.011 225.038 li
225.012 243.037 li
243.011 225.036 li
225.01 207.037 li
cp
f
225.007 156.137 mo
206.108 175.038 li
225.009 193.938 li
243.909 175.036 li
225.007 156.137 li
cp
f
225.005 105.237 mo
205.206 125.038 li
225.007 144.837 li
244.806 125.036 li
225.005 105.237 li
cp
f
225.003 54.337 mo
204.303 75.0382 li
225.005 95.7374 li
245.704 75.0362 li
225.003 54.337 li
cp
f
225 3.43757 mo
203.402 25.0382 li
225.002 46.6368 li
246.601 25.0361 li
225 3.43757 li
cp
f
175.047 970.54 mo
170.547 975.04 li
175.047 979.54 li
179.547 975.039 li
175.047 970.54 li
cp
f
175.044 919.64 mo
169.644 925.04 li
175.045 930.439 li
180.445 925.039 li
175.044 919.64 li
cp
f
175.042 868.74 mo
168.742 875.04 li
175.042 881.339 li
181.342 875.039 li
175.042 868.74 li
cp
f
175.039 817.839 mo
167.839 825.04 li
175.04 832.24 li
182.24 825.039 li
175.039 817.839 li
cp
f
175.037 766.939 mo
166.938 775.04 li
175.038 783.14 li
183.137 775.039 li
175.037 766.939 li
cp
f
175.034 716.04 mo
166.035 725.04 li
175.035 734.04 li
184.035 725.039 li
175.034 716.04 li
cp
f
175.032 665.14 mo
165.132 675.04 li
175.033 684.939 li
184.933 675.039 li
175.032 665.14 li
cp
f
175.029 614.24 mo
164.23 625.04 li
175.03 635.839 li
185.83 625.039 li
175.029 614.24 li
cp
f
175.027 563.339 mo
163.327 575.04 li
175.028 586.74 li
186.728 575.039 li
175.027 563.339 li
cp
f
175.025 512.44 mo
162.426 525.04 li
175.026 537.639 li
187.625 525.039 li
175.025 512.44 li
cp
f
175.022 461.54 mo
161.523 475.04 li
175.023 488.54 li
188.523 475.039 li
175.022 461.54 li
cp
f
175.02 410.639 mo
160.62 425.04 li
175.021 439.44 li
189.421 425.039 li
175.02 410.639 li
cp
f
175.017 359.74 mo
159.718 375.04 li
175.019 390.339 li
190.318 375.039 li
175.017 359.74 li
cp
f
175.015 308.839 mo
158.815 325.04 li
175.016 341.24 li
191.216 325.039 li
175.015 308.839 li
cp
f
175.012 257.94 mo
157.914 275.04 li
175.014 292.139 li
192.113 275.039 li
175.012 257.94 li
cp
f
175.01 207.04 mo
157.011 225.04 li
175.012 243.04 li
193.011 225.039 li
175.01 207.04 li
cp
f
175.007 156.139 mo
156.108 175.04 li
175.009 193.94 li
193.909 175.039 li
175.007 156.139 li
cp
f
175.005 105.24 mo
155.206 125.041 li
175.007 144.839 li
194.806 125.039 li
175.005 105.24 li
cp
f
175.003 54.3394 mo
154.303 75.0406 li
175.005 95.7398 li
195.704 75.0386 li
175.003 54.3394 li
cp
f
175 3.43997 mo
153.402 25.0406 li
175.002 46.6392 li
196.601 25.0385 li
175 3.43997 li
cp
f
125.047 970.542 mo
120.547 975.042 li
125.047 979.542 li
129.547 975.042 li
125.047 970.542 li
cp
f
125.044 919.642 mo
119.644 925.042 li
125.045 930.442 li
130.445 925.042 li
125.044 919.642 li
cp
f
125.042 868.742 mo
118.742 875.042 li
125.042 881.342 li
131.342 875.042 li
125.042 868.742 li
cp
f
125.039 817.842 mo
117.839 825.042 li
125.04 832.242 li
132.24 825.042 li
125.039 817.842 li
cp
f
125.037 766.942 mo
116.938 775.042 li
125.038 783.142 li
133.137 775.042 li
125.037 766.942 li
cp
f
125.034 716.042 mo
116.035 725.042 li
125.035 734.042 li
134.035 725.042 li
125.034 716.042 li
cp
f
125.032 665.142 mo
115.132 675.042 li
125.033 684.942 li
134.933 675.042 li
125.032 665.142 li
cp
f
125.029 614.242 mo
114.23 625.042 li
125.03 635.842 li
135.83 625.041 li
125.029 614.242 li
cp
f
125.027 563.342 mo
113.327 575.043 li
125.028 586.742 li
136.728 575.041 li
125.027 563.342 li
cp
f
125.025 512.442 mo
112.426 525.043 li
125.026 537.642 li
137.625 525.041 li
125.025 512.442 li
cp
f
125.022 461.542 mo
111.523 475.043 li
125.023 488.542 li
138.523 475.041 li
125.022 461.542 li
cp
f
125.02 410.642 mo
110.62 425.043 li
125.021 439.442 li
139.421 425.041 li
125.02 410.642 li
cp
f
125.017 359.742 mo
109.718 375.043 li
125.019 390.342 li
140.318 375.041 li
125.017 359.742 li
cp
f
125.015 308.842 mo
108.815 325.043 li
125.016 341.242 li
141.216 325.041 li
125.015 308.842 li
cp
f
125.012 257.942 mo
107.914 275.043 li
125.014 292.142 li
142.113 275.041 li
125.012 257.942 li
cp
f
125.01 207.042 mo
107.011 225.043 li
125.012 243.042 li
143.011 225.041 li
125.01 207.042 li
cp
f
125.007 156.142 mo
106.108 175.043 li
125.009 193.942 li
143.909 175.041 li
125.007 156.142 li
cp
f
125.005 105.242 mo
105.206 125.043 li
125.007 144.842 li
144.806 125.041 li
125.005 105.242 li
cp
f
125.003 54.3418 mo
104.303 75.043 li
125.005 95.7422 li
145.704 75.041 li
125.003 54.3418 li
cp
f
125 3.44237 mo
103.402 25.043 li
125.002 46.6416 li
146.601 25.0409 li
125 3.44237 li
cp
f
75.0465 970.544 mo
70.5468 975.045 li
75.047 979.544 li
79.5468 975.044 li
75.0465 970.544 li
cp
f
75.0441 919.644 mo
69.644 925.045 li
75.0446 930.444 li
80.4448 925.044 li
75.0441 919.644 li
cp
f
75.0417 868.745 mo
68.7422 875.045 li
75.0423 881.344 li
81.3418 875.044 li
75.0417 868.745 li
cp
f
75.0392 817.844 mo
67.8394 825.045 li
75.0399 832.245 li
82.2398 825.044 li
75.0392 817.844 li
cp
f
75.0368 766.944 mo
66.9376 775.045 li
75.0376 783.144 li
83.1368 775.044 li
75.0368 766.944 li
cp
f
75.0343 716.044 mo
66.0348 725.045 li
75.0352 734.044 li
84.0348 725.044 li
75.0343 716.044 li
cp
f
75.0319 665.144 mo
65.132 675.045 li
75.0328 684.944 li
84.9328 675.044 li
75.0319 665.144 li
cp
f
75.0295 614.245 mo
64.2302 625.045 li
75.0305 635.844 li
85.8298 625.044 li
75.0295 614.245 li
cp
f
75.027 563.344 mo
63.3274 575.045 li
75.0281 586.745 li
86.7278 575.044 li
75.027 563.344 li
cp
f
75.0246 512.445 mo
62.4256 525.045 li
75.0258 537.644 li
87.6248 525.044 li
75.0246 512.445 li
cp
f
75.0221 461.544 mo
61.5228 475.045 li
75.0234 488.544 li
88.5228 475.044 li
75.0221 461.544 li
cp
f
75.0197 410.644 mo
60.62 425.045 li
75.0211 439.445 li
89.4208 425.044 li
75.0197 410.644 li
cp
f
75.0173 359.745 mo
59.7182 375.045 li
75.0187 390.344 li
90.3178 375.044 li
75.0173 359.745 li
cp
f
75.0148 308.844 mo
58.8154 325.045 li
75.0164 341.245 li
91.2158 325.044 li
75.0148 308.844 li
cp
f
75.0124 257.945 mo
57.9136 275.045 li
75.014 292.144 li
92.1128 275.044 li
75.0124 257.945 li
cp
f
75.0099 207.044 mo
57.0108 225.045 li
75.0117 243.044 li
93.0108 225.044 li
75.0099 207.044 li
cp
f
75.0075 156.144 mo
56.108 175.045 li
75.0093 193.945 li
93.9088 175.043 li
75.0075 156.144 li
cp
f
75.005 105.245 mo
55.2062 125.045 li
75.0069 144.844 li
94.8058 125.043 li
75.005 105.245 li
cp
f
75.0026 54.3442 mo
54.3034 75.0454 li
75.0046 95.7446 li
95.7038 75.0434 li
75.0026 54.3442 li
cp
f
75.0002 3.44476 mo
53.4016 25.0454 li
75.0022 46.644 li
96.6008 25.0433 li
75.0002 3.44476 li
cp
f
25.0465 970.547 mo
20.5468 975.047 li
25.047 979.547 li
29.5468 975.047 li
25.0465 970.547 li
cp
f
25.0441 919.647 mo
19.644 925.047 li
25.0446 930.447 li
30.4448 925.047 li
25.0441 919.647 li
cp
f
25.0417 868.747 mo
18.7422 875.047 li
25.0423 881.347 li
31.3418 875.046 li
25.0417 868.747 li
cp
f
25.0392 817.847 mo
17.8394 825.047 li
25.0399 832.247 li
32.2398 825.046 li
25.0392 817.847 li
cp
f
25.0368 766.947 mo
16.9376 775.047 li
25.0376 783.147 li
33.1368 775.046 li
25.0368 766.947 li
cp
f
25.0343 716.047 mo
16.0348 725.047 li
25.0352 734.047 li
34.0348 725.046 li
25.0343 716.047 li
cp
f
25.0319 665.147 mo
15.132 675.047 li
25.0328 684.947 li
34.9328 675.046 li
25.0319 665.147 li
cp
f
25.0295 614.247 mo
14.2302 625.047 li
25.0305 635.847 li
35.8298 625.046 li
25.0295 614.247 li
cp
f
25.027 563.347 mo
13.3274 575.047 li
25.0281 586.747 li
36.7278 575.046 li
25.027 563.347 li
cp
f
25.0246 512.447 mo
12.4256 525.047 li
25.0258 537.646 li
37.6248 525.046 li
25.0246 512.447 li
cp
f
25.0221 461.547 mo
11.5228 475.047 li
25.0234 488.547 li
38.5228 475.046 li
25.0221 461.547 li
cp
f
25.0197 410.646 mo
10.62 425.047 li
25.0211 439.447 li
39.4208 425.046 li
25.0197 410.646 li
cp
f
25.0173 359.747 mo
9.71821 375.047 li
25.0187 390.347 li
40.3178 375.046 li
25.0173 359.747 li
cp
f
25.0148 308.847 mo
8.81541 325.048 li
25.0164 341.247 li
41.2158 325.046 li
25.0148 308.847 li
cp
f
25.0124 257.947 mo
7.91361 275.048 li
25.014 292.146 li
42.1128 275.046 li
25.0124 257.947 li
cp
f
25.0099 207.047 mo
7.01079 225.048 li
25.0117 243.047 li
43.0108 225.046 li
25.0099 207.047 li
cp
f
25.0075 156.146 mo
6.10801 175.048 li
25.0093 193.947 li
43.9088 175.046 li
25.0075 156.146 li
cp
f
25.005 105.247 mo
5.20622 125.048 li
25.0069 144.847 li
44.8058 125.046 li
25.005 105.247 li
cp
f
25.0026 54.3466 mo
4.30342 75.0478 li
25.0046 95.747 li
45.7038 75.0458 li
25.0026 54.3466 li
cp
f
25.0002 3.44716 mo
3.40162 25.0478 li
25.0022 46.6464 li
46.6008 25.0457 li
25.0002 3.44716 li
cp
f
1000.05 1004.05 mo
1004.1 1000 li
1000.05 995.95 li
995.998 1000 li
1000.05 1004.05 li
cp
f
1000.05 954.95 mo
1005 950 li
1000.05 945.05 li
995.095 950 li
1000.05 954.95 li
cp
f
1000.04 905.85 mo
1005.89 900 li
1000.04 894.15 li
994.193 900 li
1000.04 905.85 li
cp
f
1000.04 856.75 mo
1006.79 850 li
1000.04 843.25 li
993.291 850 li
1000.04 856.75 li
cp
f
1000.04 807.65 mo
1007.69 800 li
1000.04 792.35 li
992.388 800 li
1000.04 807.65 li
cp
f
1000.04 758.55 mo
1008.59 750 li
1000.04 741.45 li
991.486 750 li
1000.04 758.55 li
cp
f
1000.03 709.45 mo
1009.48 700 li
1000.03 690.55 li
990.583 700 li
1000.03 709.45 li
cp
f
1000.03 660.35 mo
1010.38 650 li
1000.03 639.65 li
989.681 650 li
1000.03 660.35 li
cp
f
1000.03 611.25 mo
1011.28 599.999 li
1000.03 588.75 li
988.779 600.001 li
1000.03 611.25 li
cp
f
1000.03 562.15 mo
1012.18 549.999 li
1000.03 537.85 li
987.876 550.001 li
1000.03 562.15 li
cp
f
1000.02 513.05 mo
1013.07 499.999 li
1000.02 486.95 li
986.974 500.001 li
1000.02 513.05 li
cp
f
1000.02 463.95 mo
1013.97 449.999 li
1000.02 436.05 li
986.071 450.001 li
1000.02 463.95 li
cp
f
1000.02 414.85 mo
1014.87 399.999 li
1000.02 385.15 li
985.169 400.001 li
1000.02 414.85 li
cp
f
1000.02 365.75 mo
1015.77 349.999 li
1000.02 334.25 li
984.267 350.001 li
1000.02 365.75 li
cp
f
1000.02 316.65 mo
1016.66 299.999 li
1000.01 283.35 li
983.365 300.001 li
1000.02 316.65 li
cp
f
1000.01 267.55 mo
1017.56 249.999 li
1000.01 232.45 li
982.462 250.001 li
1000.01 267.55 li
cp
f
1000.01 218.45 mo
1018.46 199.999 li
1000.01 181.55 li
981.559 200.001 li
1000.01 218.45 li
cp
f
1000.01 169.35 mo
1019.36 149.999 li
1000.01 130.65 li
980.657 150.001 li
1000.01 169.35 li
cp
f
1000.01 120.25 mo
1020.25 99.999 li
1000 79.75 li
979.755 100.001 li
1000.01 120.25 li
cp
f
1000 71.1504 mo
1021.15 49.999 li
1000 28.8496 li
978.852 50.001 li
1000 71.1504 li
cp
f
1000 22.0498 mo
1022.05 -.00105751 li
999.999 -22.0498 li
977.95 .00105751 li
1000 22.0498 li
cp
f
950.048 1004.05 mo
954.098 1000 li
950.048 995.953 li
945.998 1000 li
950.048 1004.05 li
cp
f
950.046 954.953 mo
954.996 950.002 li
950.045 945.052 li
945.095 950.003 li
950.046 954.953 li
cp
f
950.043 905.852 mo
955.893 900.002 li
950.043 894.152 li
944.193 900.003 li
950.043 905.852 li
cp
f
950.041 856.752 mo
956.791 850.002 li
950.04 843.252 li
943.291 850.003 li
950.041 856.752 li
cp
f
950.039 807.652 mo
957.688 800.002 li
950.038 792.352 li
942.388 800.003 li
950.039 807.652 li
cp
f
950.036 758.552 mo
958.586 750.002 li
950.036 741.453 li
941.486 750.003 li
950.036 758.552 li
cp
f
950.034 709.453 mo
959.484 700.002 li
950.033 690.552 li
940.583 700.003 li
950.034 709.453 li
cp
f
950.032 660.352 mo
960.381 650.002 li
950.031 639.652 li
939.681 650.003 li
950.032 660.352 li
cp
f
950.029 611.252 mo
961.279 600.002 li
950.028 588.752 li
938.779 600.003 li
950.029 611.252 li
cp
f
950.027 562.153 mo
962.176 550.002 li
950.026 537.852 li
937.876 550.003 li
950.027 562.153 li
cp
f
950.025 513.052 mo
963.074 500.002 li
950.023 486.953 li
936.974 500.003 li
950.025 513.052 li
cp
f
950.022 463.953 mo
963.972 450.002 li
950.021 436.052 li
936.071 450.003 li
950.022 463.953 li
cp
f
950.02 414.852 mo
964.869 400.002 li
950.018 385.153 li
935.169 400.003 li
950.02 414.852 li
cp
f
950.018 365.752 mo
965.767 350.002 li
950.016 334.252 li
934.267 350.003 li
950.018 365.752 li
cp
f
950.015 316.653 mo
966.664 300.002 li
950.014 283.352 li
933.365 300.003 li
950.015 316.653 li
cp
f
950.013 267.552 mo
967.562 250.002 li
950.011 232.453 li
932.462 250.003 li
950.013 267.552 li
cp
f
950.01 218.453 mo
968.46 200.002 li
950.009 181.552 li
931.559 200.003 li
950.01 218.453 li
cp
f
950.008 169.352 mo
969.357 150.001 li
950.006 130.653 li
930.657 150.003 li
950.008 169.352 li
cp
f
950.006 120.252 mo
970.255 100.001 li
950.004 79.7524 li
929.755 100.003 li
950.006 120.252 li
cp
f
950.003 71.1528 mo
971.152 50.0014 li
950.001 28.852 li
928.852 50.0034 li
950.003 71.1528 li
cp
f
950.001 22.0522 mo
972.05 .0013405 li
949.999 -22.0474 li
927.95 .00345552 li
950.001 22.0522 li
cp
f
900.048 1004.05 mo
904.098 1000 li
900.048 995.955 li
895.998 1000.01 li
900.048 1004.05 li
cp
f
900.046 954.955 mo
904.996 950.005 li
900.045 945.055 li
895.095 950.005 li
900.046 954.955 li
cp
f
900.043 905.855 mo
905.893 900.005 li
900.043 894.155 li
894.193 900.005 li
900.043 905.855 li
cp
f
900.041 856.755 mo
906.791 850.004 li
900.04 843.255 li
893.291 850.005 li
900.041 856.755 li
cp
f
900.039 807.655 mo
907.688 800.004 li
900.038 792.355 li
892.388 800.005 li
900.039 807.655 li
cp
f
900.036 758.555 mo
908.586 750.004 li
900.036 741.455 li
891.486 750.005 li
900.036 758.555 li
cp
f
900.034 709.455 mo
909.484 700.004 li
900.033 690.555 li
890.583 700.005 li
900.034 709.455 li
cp
f
900.032 660.355 mo
910.381 650.004 li
900.031 639.655 li
889.681 650.005 li
900.032 660.355 li
cp
f
900.029 611.255 mo
911.279 600.004 li
900.028 588.755 li
888.779 600.005 li
900.029 611.255 li
cp
f
900.027 562.155 mo
912.176 550.004 li
900.026 537.854 li
887.876 550.005 li
900.027 562.155 li
cp
f
900.025 513.055 mo
913.074 500.004 li
900.023 486.955 li
886.974 500.005 li
900.025 513.055 li
cp
f
900.022 463.955 mo
913.972 450.004 li
900.021 436.055 li
886.071 450.005 li
900.022 463.955 li
cp
f
900.02 414.854 mo
914.869 400.004 li
900.018 385.155 li
885.169 400.005 li
900.02 414.854 li
cp
f
900.018 365.755 mo
915.767 350.004 li
900.016 334.255 li
884.267 350.006 li
900.018 365.755 li
cp
f
900.015 316.655 mo
916.664 300.004 li
900.014 283.354 li
883.365 300.006 li
900.015 316.655 li
cp
f
900.013 267.555 mo
917.562 250.004 li
900.011 232.455 li
882.462 250.006 li
900.013 267.555 li
cp
f
900.01 218.455 mo
918.46 200.004 li
900.009 181.555 li
881.559 200.006 li
900.01 218.455 li
cp
f
900.008 169.354 mo
919.357 150.004 li
900.006 130.655 li
880.657 150.006 li
900.008 169.354 li
cp
f
900.006 120.255 mo
920.255 100.004 li
900.004 79.7548 li
879.755 100.006 li
900.006 120.255 li
cp
f
900.003 71.1552 mo
921.152 50.0038 li
900.001 28.8544 li
878.852 50.0058 li
900.003 71.1552 li
cp
f
900.001 22.0546 mo
922.05 .00373851 li
899.999 -22.045 li
877.95 .00585354 li
900.001 22.0546 li
cp
f
850.048 1004.06 mo
854.098 1000.01 li
850.048 995.957 li
845.998 1000.01 li
850.048 1004.06 li
cp
f
850.046 954.957 mo
854.996 950.007 li
850.045 945.057 li
845.095 950.007 li
850.046 954.957 li
cp
f
850.043 905.857 mo
855.893 900.007 li
850.043 894.157 li
844.193 900.007 li
850.043 905.857 li
cp
f
850.041 856.757 mo
856.791 850.007 li
850.04 843.257 li
843.291 850.008 li
850.041 856.757 li
cp
f
850.039 807.657 mo
857.688 800.007 li
850.038 792.357 li
842.388 800.008 li
850.039 807.657 li
cp
f
850.036 758.557 mo
858.586 750.007 li
850.036 741.457 li
841.486 750.008 li
850.036 758.557 li
cp
f
850.034 709.457 mo
859.484 700.007 li
850.033 690.557 li
840.583 700.008 li
850.034 709.457 li
cp
f
850.032 660.357 mo
860.381 650.007 li
850.031 639.657 li
839.681 650.008 li
850.032 660.357 li
cp
f
850.029 611.257 mo
861.279 600.007 li
850.028 588.757 li
838.779 600.008 li
850.029 611.257 li
cp
f
850.027 562.158 mo
862.176 550.007 li
850.026 537.857 li
837.876 550.008 li
850.027 562.158 li
cp
f
850.025 513.057 mo
863.074 500.007 li
850.023 486.957 li
836.974 500.008 li
850.025 513.057 li
cp
f
850.022 463.957 mo
863.972 450.007 li
850.021 436.057 li
836.071 450.008 li
850.022 463.957 li
cp
f
850.02 414.857 mo
864.869 400.006 li
850.018 385.158 li
835.169 400.008 li
850.02 414.857 li
cp
f
850.018 365.757 mo
865.767 350.006 li
850.016 334.257 li
834.267 350.008 li
850.018 365.757 li
cp
f
850.015 316.658 mo
866.664 300.006 li
850.014 283.357 li
833.365 300.008 li
850.015 316.658 li
cp
f
850.013 267.557 mo
867.562 250.006 li
850.011 232.457 li
832.462 250.008 li
850.013 267.557 li
cp
f
850.01 218.457 mo
868.46 200.006 li
850.009 181.557 li
831.559 200.008 li
850.01 218.457 li
cp
f
850.008 169.357 mo
869.357 150.006 li
850.006 130.658 li
830.657 150.008 li
850.008 169.357 li
cp
f
850.006 120.257 mo
870.255 100.006 li
850.004 79.7572 li
829.755 100.008 li
850.006 120.257 li
cp
f
850.003 71.1576 mo
871.152 50.0062 li
850.001 28.8568 li
828.852 50.0082 li
850.003 71.1576 li
cp
f
850.001 22.057 mo
872.05 .00613652 li
849.999 -22.0426 li
827.95 .00825155 li
850.001 22.057 li
cp
f
800.048 1004.06 mo
804.098 1000.01 li
800.048 995.96 li
795.998 1000.01 li
800.048 1004.06 li
cp
f
800.046 954.96 mo
804.996 950.009 li
800.045 945.059 li
795.095 950.01 li
800.046 954.96 li
cp
f
800.043 905.86 mo
805.893 900.009 li
800.043 894.159 li
794.193 900.01 li
800.043 905.86 li
cp
f
800.041 856.76 mo
806.791 850.009 li
800.04 843.26 li
793.291 850.01 li
800.041 856.76 li
cp
f
800.039 807.659 mo
807.688 800.009 li
800.038 792.36 li
792.388 800.01 li
800.039 807.659 li
cp
f
800.036 758.559 mo
808.586 750.009 li
800.036 741.46 li
791.486 750.01 li
800.036 758.559 li
cp
f
800.034 709.46 mo
809.484 700.009 li
800.033 690.559 li
790.583 700.01 li
800.034 709.46 li
cp
f
800.032 660.36 mo
810.381 650.009 li
800.031 639.659 li
789.681 650.01 li
800.032 660.36 li
cp
f
800.029 611.26 mo
811.279 600.009 li
800.028 588.76 li
788.779 600.01 li
800.029 611.26 li
cp
f
800.027 562.16 mo
812.176 550.009 li
800.026 537.859 li
787.876 550.01 li
800.027 562.16 li
cp
f
800.025 513.059 mo
813.074 500.009 li
800.023 486.96 li
786.974 500.01 li
800.025 513.059 li
cp
f
800.022 463.96 mo
813.972 450.009 li
800.021 436.059 li
786.071 450.01 li
800.022 463.96 li
cp
f
800.02 414.859 mo
814.869 400.009 li
800.018 385.16 li
785.169 400.01 li
800.02 414.859 li
cp
f
800.018 365.76 mo
815.767 350.009 li
800.016 334.26 li
784.267 350.01 li
800.018 365.76 li
cp
f
800.015 316.66 mo
816.664 300.009 li
800.014 283.359 li
783.365 300.01 li
800.015 316.66 li
cp
f
800.013 267.559 mo
817.562 250.009 li
800.011 232.46 li
782.462 250.01 li
800.013 267.559 li
cp
f
800.01 218.46 mo
818.46 200.009 li
800.009 181.559 li
781.559 200.01 li
800.01 218.46 li
cp
f
800.008 169.359 mo
819.357 150.009 li
800.006 130.66 li
780.657 150.011 li
800.008 169.359 li
cp
f
800.006 120.26 mo
820.255 100.009 li
800.004 79.7596 li
779.755 100.011 li
800.006 120.26 li
cp
f
800.003 71.16 mo
821.152 50.0086 li
800.001 28.8592 li
778.852 50.0106 li
800.003 71.16 li
cp
f
800.001 22.0594 mo
822.05 .00853453 li
799.999 -22.0402 li
777.95 .0106496 li
800.001 22.0594 li
cp
f
750.048 1004.06 mo
754.098 1000.01 li
750.048 995.962 li
745.998 1000.01 li
750.048 1004.06 li
cp
f
750.046 954.962 mo
754.996 950.012 li
750.045 945.062 li
745.095 950.012 li
750.046 954.962 li
cp
f
750.043 905.862 mo
755.893 900.012 li
750.043 894.162 li
744.193 900.012 li
750.043 905.862 li
cp
f
750.041 856.762 mo
756.791 850.012 li
750.04 843.262 li
743.291 850.012 li
750.041 856.762 li
cp
f
750.039 807.662 mo
757.688 800.012 li
750.038 792.362 li
742.388 800.012 li
750.039 807.662 li
cp
f
750.036 758.562 mo
758.586 750.012 li
750.036 741.462 li
741.486 750.012 li
750.036 758.562 li
cp
f
750.034 709.462 mo
759.484 700.012 li
750.033 690.562 li
740.583 700.012 li
750.034 709.462 li
cp
f
750.032 660.362 mo
760.381 650.011 li
750.031 639.662 li
739.681 650.013 li
750.032 660.362 li
cp
f
750.029 611.262 mo
761.279 600.011 li
750.028 588.762 li
738.779 600.013 li
750.029 611.262 li
cp
f
750.027 562.162 mo
762.176 550.011 li
750.026 537.862 li
737.876 550.013 li
750.027 562.162 li
cp
f
750.025 513.062 mo
763.074 500.011 li
750.023 486.962 li
736.974 500.013 li
750.025 513.062 li
cp
f
750.022 463.962 mo
763.972 450.011 li
750.021 436.062 li
736.071 450.013 li
750.022 463.962 li
cp
f
750.02 414.862 mo
764.869 400.011 li
750.018 385.162 li
735.169 400.013 li
750.02 414.862 li
cp
f
750.018 365.762 mo
765.767 350.011 li
750.016 334.262 li
734.267 350.013 li
750.018 365.762 li
cp
f
750.015 316.662 mo
766.664 300.011 li
750.014 283.362 li
733.365 300.013 li
750.015 316.662 li
cp
f
750.013 267.562 mo
767.562 250.011 li
750.011 232.462 li
732.462 250.013 li
750.013 267.562 li
cp
f
750.01 218.462 mo
768.46 200.011 li
750.009 181.562 li
731.559 200.013 li
750.01 218.462 li
cp
f
750.008 169.362 mo
769.357 150.011 li
750.006 130.662 li
730.657 150.013 li
750.008 169.362 li
cp
f
750.006 120.262 mo
770.255 100.011 li
750.004 79.762 li
729.755 100.013 li
750.006 120.262 li
cp
f
750.003 71.1624 mo
771.152 50.011 li
750.001 28.8616 li
728.852 50.013 li
750.003 71.1624 li
cp
f
750.001 22.0618 mo
772.05 .0109325 li
749.999 -22.0378 li
727.95 .0130476 li
750.001 22.0618 li
cp
f
700.048 1004.06 mo
704.098 1000.01 li
700.048 995.965 li
695.998 1000.01 li
700.048 1004.06 li
cp
f
700.046 954.965 mo
704.996 950.014 li
700.045 945.064 li
695.095 950.015 li
700.046 954.965 li
cp
f
700.043 905.864 mo
705.893 900.014 li
700.043 894.164 li
694.193 900.015 li
700.043 905.864 li
cp
f
700.041 856.764 mo
706.791 850.014 li
700.04 843.264 li
693.291 850.015 li
700.041 856.764 li
cp
f
700.039 807.664 mo
707.688 800.014 li
700.038 792.364 li
692.388 800.015 li
700.039 807.664 li
cp
f
700.036 758.564 mo
708.586 750.014 li
700.036 741.465 li
691.486 750.015 li
700.036 758.564 li
cp
f
700.034 709.465 mo
709.484 700.014 li
700.033 690.564 li
690.583 700.015 li
700.034 709.465 li
cp
f
700.032 660.365 mo
710.381 650.014 li
700.031 639.664 li
689.682 650.015 li
700.032 660.365 li
cp
f
700.029 611.264 mo
711.279 600.014 li
700.028 588.764 li
688.779 600.015 li
700.029 611.264 li
cp
f
700.027 562.165 mo
712.176 550.014 li
700.026 537.864 li
687.876 550.015 li
700.027 562.165 li
cp
f
700.025 513.064 mo
713.074 500.014 li
700.023 486.965 li
686.974 500.015 li
700.025 513.064 li
cp
f
700.022 463.965 mo
713.972 450.014 li
700.021 436.064 li
686.071 450.015 li
700.022 463.965 li
cp
f
700.02 414.864 mo
714.869 400.014 li
700.018 385.165 li
685.17 400.015 li
700.02 414.864 li
cp
f
700.018 365.764 mo
715.767 350.014 li
700.016 334.264 li
684.267 350.015 li
700.018 365.764 li
cp
f
700.015 316.665 mo
716.664 300.014 li
700.014 283.364 li
683.364 300.015 li
700.015 316.665 li
cp
f
700.013 267.564 mo
717.562 250.014 li
700.011 232.465 li
682.462 250.015 li
700.013 267.564 li
cp
f
700.01 218.465 mo
718.46 200.014 li
700.009 181.564 li
681.559 200.015 li
700.01 218.465 li
cp
f
700.008 169.364 mo
719.357 150.013 li
700.006 130.665 li
680.658 150.015 li
700.008 169.364 li
cp
f
700.006 120.264 mo
720.255 100.013 li
700.004 79.7644 li
679.755 100.015 li
700.006 120.264 li
cp
f
700.003 71.1648 mo
721.152 50.0134 li
700.001 28.864 li
678.852 50.0154 li
700.003 71.1648 li
cp
f
700.001 22.0642 mo
722.05 .0133306 li
699.999 -22.0354 li
677.95 .0154456 li
700.001 22.0642 li
cp
f
650.048 1004.07 mo
654.098 1000.02 li
650.048 995.967 li
645.998 1000.02 li
650.048 1004.07 li
cp
f
650.046 954.967 mo
654.996 950.017 li
650.045 945.067 li
645.095 950.017 li
650.046 954.967 li
cp
f
650.043 905.867 mo
655.893 900.016 li
650.043 894.167 li
644.194 900.017 li
650.043 905.867 li
cp
f
650.041 856.767 mo
656.791 850.016 li
650.04 843.267 li
643.291 850.017 li
650.041 856.767 li
cp
f
650.039 807.667 mo
657.689 800.016 li
650.038 792.367 li
642.388 800.017 li
650.039 807.667 li
cp
f
650.036 758.567 mo
658.586 750.016 li
650.036 741.467 li
641.486 750.017 li
650.036 758.567 li
cp
f
650.034 709.467 mo
659.484 700.016 li
650.033 690.567 li
640.583 700.017 li
650.034 709.467 li
cp
f
650.032 660.367 mo
660.381 650.016 li
650.031 639.667 li
639.682 650.017 li
650.032 660.367 li
cp
f
650.029 611.267 mo
661.279 600.016 li
650.028 588.767 li
638.779 600.017 li
650.029 611.267 li
cp
f
650.027 562.167 mo
662.177 550.016 li
650.026 537.866 li
637.876 550.017 li
650.027 562.167 li
cp
f
650.025 513.067 mo
663.074 500.016 li
650.023 486.967 li
636.974 500.017 li
650.025 513.067 li
cp
f
650.022 463.967 mo
663.972 450.016 li
650.021 436.067 li
636.071 450.017 li
650.022 463.967 li
cp
f
650.02 414.866 mo
664.869 400.016 li
650.018 385.167 li
635.17 400.017 li
650.02 414.866 li
cp
f
650.018 365.767 mo
665.767 350.016 li
650.016 334.267 li
634.267 350.018 li
650.018 365.767 li
cp
f
650.015 316.667 mo
666.665 300.016 li
650.014 283.366 li
633.364 300.018 li
650.015 316.667 li
cp
f
650.013 267.567 mo
667.562 250.016 li
650.011 232.467 li
632.462 250.018 li
650.013 267.567 li
cp
f
650.01 218.467 mo
668.46 200.016 li
650.009 181.567 li
631.559 200.018 li
650.01 218.467 li
cp
f
650.008 169.366 mo
669.357 150.016 li
650.006 130.667 li
630.658 150.018 li
650.008 169.366 li
cp
f
650.006 120.267 mo
670.255 100.016 li
650.004 79.7668 li
629.755 100.018 li
650.006 120.267 li
cp
f
650.003 71.1672 mo
671.153 50.0158 li
650.001 28.8664 li
628.852 50.0178 li
650.003 71.1672 li
cp
f
650.001 22.0666 mo
672.05 .0157286 li
649.999 -22.033 li
627.95 .0178436 li
650.001 22.0666 li
cp
f
600.048 1004.07 mo
604.098 1000.02 li
600.048 995.969 li
595.998 1000.02 li
600.048 1004.07 li
cp
f
600.046 954.969 mo
604.996 950.019 li
600.045 945.069 li
595.095 950.019 li
600.046 954.969 li
cp
f
600.043 905.869 mo
605.893 900.019 li
600.043 894.169 li
594.194 900.019 li
600.043 905.869 li
cp
f
600.041 856.769 mo
606.791 850.019 li
600.04 843.269 li
593.291 850.02 li
600.041 856.769 li
cp
f
600.039 807.669 mo
607.689 800.019 li
600.038 792.369 li
592.388 800.02 li
600.039 807.669 li
cp
f
600.036 758.569 mo
608.586 750.019 li
600.036 741.469 li
591.486 750.02 li
600.036 758.569 li
cp
f
600.034 709.469 mo
609.484 700.019 li
600.033 690.569 li
590.583 700.02 li
600.034 709.469 li
cp
f
600.032 660.369 mo
610.381 650.019 li
600.031 639.669 li
589.682 650.02 li
600.032 660.369 li
cp
f
600.029 611.269 mo
611.279 600.019 li
600.028 588.769 li
588.779 600.02 li
600.029 611.269 li
cp
f
600.027 562.17 mo
612.177 550.019 li
600.026 537.869 li
587.876 550.02 li
600.027 562.17 li
cp
f
600.025 513.069 mo
613.074 500.019 li
600.023 486.969 li
586.974 500.02 li
600.025 513.069 li
cp
f
600.022 463.969 mo
613.972 450.019 li
600.021 436.069 li
586.071 450.02 li
600.022 463.969 li
cp
f
600.02 414.869 mo
614.869 400.018 li
600.018 385.17 li
585.17 400.02 li
600.02 414.869 li
cp
f
600.018 365.769 mo
615.767 350.018 li
600.016 334.269 li
584.267 350.02 li
600.018 365.769 li
cp
f
600.015 316.67 mo
616.665 300.018 li
600.014 283.369 li
583.364 300.02 li
600.015 316.67 li
cp
f
600.013 267.569 mo
617.562 250.018 li
600.011 232.469 li
582.462 250.02 li
600.013 267.569 li
cp
f
600.01 218.469 mo
618.46 200.018 li
600.009 181.569 li
581.559 200.02 li
600.01 218.469 li
cp
f
600.008 169.369 mo
619.357 150.018 li
600.006 130.67 li
580.658 150.02 li
600.008 169.369 li
cp
f
600.006 120.269 mo
620.255 100.018 li
600.004 79.7692 li
579.755 100.02 li
600.006 120.269 li
cp
f
600.003 71.1696 mo
621.153 50.0182 li
600.001 28.8688 li
578.852 50.0202 li
600.003 71.1696 li
cp
f
600.001 22.069 mo
622.05 .0181266 li
599.999 -22.0306 li
577.95 .0202416 li
600.001 22.069 li
cp
f
550.048 1004.07 mo
554.098 1000.02 li
550.048 995.972 li
545.998 1000.02 li
550.048 1004.07 li
cp
f
550.046 954.972 mo
554.996 950.021 li
550.045 945.071 li
545.095 950.022 li
550.046 954.972 li
cp
f
550.043 905.872 mo
555.893 900.021 li
550.043 894.171 li
544.194 900.022 li
550.043 905.872 li
cp
f
550.041 856.772 mo
556.791 850.021 li
550.04 843.272 li
543.291 850.022 li
550.041 856.772 li
cp
f
550.039 807.671 mo
557.689 800.021 li
550.038 792.372 li
542.388 800.022 li
550.039 807.671 li
cp
f
550.036 758.571 mo
558.586 750.021 li
550.036 741.472 li
541.486 750.022 li
550.036 758.571 li
cp
f
550.034 709.472 mo
559.484 700.021 li
550.033 690.571 li
540.583 700.022 li
550.034 709.472 li
cp
f
550.032 660.372 mo
560.381 650.021 li
550.031 639.671 li
539.682 650.022 li
550.032 660.372 li
cp
f
550.029 611.272 mo
561.279 600.021 li
550.028 588.772 li
538.779 600.022 li
550.029 611.272 li
cp
f
550.027 562.172 mo
562.177 550.021 li
550.026 537.871 li
537.876 550.022 li
550.027 562.172 li
cp
f
550.025 513.071 mo
563.074 500.021 li
550.023 486.972 li
536.974 500.022 li
550.025 513.071 li
cp
f
550.022 463.972 mo
563.972 450.021 li
550.021 436.071 li
536.071 450.022 li
550.022 463.972 li
cp
f
550.02 414.871 mo
564.869 400.021 li
550.018 385.172 li
535.17 400.022 li
550.02 414.871 li
cp
f
550.018 365.772 mo
565.767 350.021 li
550.016 334.272 li
534.267 350.022 li
550.018 365.772 li
cp
f
550.015 316.672 mo
566.665 300.021 li
550.014 283.371 li
533.364 300.022 li
550.015 316.672 li
cp
f
550.013 267.571 mo
567.562 250.021 li
550.011 232.472 li
532.462 250.022 li
550.013 267.571 li
cp
f
550.01 218.472 mo
568.46 200.021 li
550.009 181.571 li
531.559 200.022 li
550.01 218.472 li
cp
f
550.008 169.371 mo
569.357 150.021 li
550.006 130.672 li
530.658 150.023 li
550.008 169.371 li
cp
f
550.006 120.272 mo
570.255 100.021 li
550.004 79.7716 li
529.755 100.023 li
550.006 120.272 li
cp
f
550.003 71.172 mo
571.153 50.0206 li
550.001 28.8712 li
528.852 50.0226 li
550.003 71.172 li
cp
f
550.001 22.0714 mo
572.05 .0205246 li
549.999 -22.0282 li
527.95 .0226396 li
550.001 22.0714 li
cp
f
500.048 1004.07 mo
504.098 1000.02 li
500.048 995.974 li
495.998 1000.02 li
500.048 1004.07 li
cp
f
500.046 954.974 mo
504.996 950.024 li
500.045 945.074 li
495.095 950.024 li
500.046 954.974 li
cp
f
500.043 905.874 mo
505.893 900.024 li
500.043 894.174 li
494.194 900.024 li
500.043 905.874 li
cp
f
500.041 856.774 mo
506.791 850.024 li
500.04 843.274 li
493.291 850.024 li
500.041 856.774 li
cp
f
500.039 807.674 mo
507.689 800.024 li
500.038 792.374 li
492.388 800.024 li
500.039 807.674 li
cp
f
500.036 758.574 mo
508.586 750.024 li
500.036 741.474 li
491.486 750.024 li
500.036 758.574 li
cp
f
500.034 709.474 mo
509.484 700.023 li
500.033 690.574 li
490.583 700.024 li
500.034 709.474 li
cp
f
500.032 660.374 mo
510.381 650.023 li
500.031 639.674 li
489.682 650.024 li
500.032 660.374 li
cp
f
500.029 611.274 mo
511.279 600.023 li
500.028 588.774 li
488.779 600.025 li
500.029 611.274 li
cp
f
500.027 562.174 mo
512.177 550.023 li
500.026 537.874 li
487.876 550.025 li
500.027 562.174 li
cp
f
500.025 513.074 mo
513.074 500.023 li
500.023 486.974 li
486.974 500.025 li
500.025 513.074 li
cp
f
500.022 463.974 mo
513.972 450.023 li
500.021 436.074 li
486.071 450.025 li
500.022 463.974 li
cp
f
500.02 414.874 mo
514.869 400.023 li
500.018 385.174 li
485.17 400.025 li
500.02 414.874 li
cp
f
500.018 365.774 mo
515.767 350.023 li
500.016 334.274 li
484.267 350.025 li
500.018 365.774 li
cp
f
500.015 316.674 mo
516.665 300.023 li
500.014 283.374 li
483.364 300.025 li
500.015 316.674 li
cp
f
500.013 267.574 mo
517.562 250.023 li
500.011 232.474 li
482.462 250.025 li
500.013 267.574 li
cp
f
500.01 218.474 mo
518.46 200.023 li
500.009 181.574 li
481.559 200.025 li
500.01 218.474 li
cp
f
500.008 169.374 mo
519.357 150.023 li
500.006 130.674 li
480.658 150.025 li
500.008 169.374 li
cp
f
500.006 120.274 mo
520.255 100.023 li
500.004 79.774 li
479.755 100.025 li
500.006 120.274 li
cp
f
500.003 71.1744 mo
521.153 50.023 li
500.001 28.8736 li
478.852 50.025 li
500.003 71.1744 li
cp
f
500.001 22.0738 mo
522.05 .0229226 li
499.999 -22.0258 li
477.95 .0250376 li
500.001 22.0738 li
cp
f
450.048 1004.08 mo
454.098 1000.03 li
450.048 995.977 li
445.998 1000.03 li
450.048 1004.08 li
cp
f
450.046 954.977 mo
454.996 950.026 li
450.045 945.076 li
445.095 950.027 li
450.046 954.977 li
cp
f
450.043 905.876 mo
455.893 900.026 li
450.043 894.176 li
444.194 900.027 li
450.043 905.876 li
cp
f
450.041 856.776 mo
456.791 850.026 li
450.04 843.276 li
443.291 850.027 li
450.041 856.776 li
cp
f
450.039 807.676 mo
457.689 800.026 li
450.038 792.376 li
442.388 800.027 li
450.039 807.676 li
cp
f
450.036 758.576 mo
458.586 750.026 li
450.036 741.477 li
441.486 750.027 li
450.036 758.576 li
cp
f
450.034 709.477 mo
459.484 700.026 li
450.033 690.576 li
440.583 700.027 li
450.034 709.477 li
cp
f
450.032 660.376 mo
460.381 650.026 li
450.031 639.676 li
439.682 650.027 li
450.032 660.376 li
cp
f
450.029 611.276 mo
461.279 600.026 li
450.028 588.776 li
438.779 600.027 li
450.029 611.276 li
cp
f
450.027 562.177 mo
462.177 550.026 li
450.026 537.876 li
437.876 550.027 li
450.027 562.177 li
cp
f
450.025 513.076 mo
463.074 500.026 li
450.023 486.977 li
436.974 500.027 li
450.025 513.076 li
cp
f
450.022 463.977 mo
463.972 450.026 li
450.021 436.076 li
436.071 450.027 li
450.022 463.977 li
cp
f
450.02 414.876 mo
464.869 400.026 li
450.018 385.177 li
435.17 400.027 li
450.02 414.876 li
cp
f
450.018 365.776 mo
465.767 350.026 li
450.016 334.276 li
434.267 350.027 li
450.018 365.776 li
cp
f
450.015 316.677 mo
466.665 300.026 li
450.014 283.376 li
433.364 300.027 li
450.015 316.677 li
cp
f
450.013 267.576 mo
467.562 250.026 li
450.011 232.477 li
432.462 250.027 li
450.013 267.576 li
cp
f
450.01 218.477 mo
468.46 200.025 li
450.009 181.576 li
431.559 200.027 li
450.01 218.477 li
cp
f
450.008 169.376 mo
469.357 150.025 li
450.006 130.677 li
430.658 150.027 li
450.008 169.376 li
cp
f
450.006 120.276 mo
470.255 100.025 li
450.004 79.7764 li
429.755 100.027 li
450.006 120.276 li
cp
f
450.003 71.1768 mo
471.153 50.0254 li
450.001 28.876 li
428.852 50.0274 li
450.003 71.1768 li
cp
f
450.001 22.0762 mo
472.05 .0253206 li
449.999 -22.0234 li
427.95 .0274356 li
450.001 22.0762 li
cp
f
400.048 1004.08 mo
404.098 1000.03 li
400.048 995.979 li
395.998 1000.03 li
400.048 1004.08 li
cp
f
400.046 954.979 mo
404.996 950.029 li
400.045 945.079 li
395.095 950.029 li
400.046 954.979 li
cp
f
400.043 905.879 mo
405.893 900.029 li
400.043 894.179 li
394.194 900.029 li
400.043 905.879 li
cp
f
400.041 856.779 mo
406.791 850.028 li
400.04 843.279 li
393.291 850.029 li
400.041 856.779 li
cp
f
400.039 807.679 mo
407.689 800.028 li
400.038 792.379 li
392.388 800.029 li
400.039 807.679 li
cp
f
400.036 758.579 mo
408.586 750.028 li
400.036 741.479 li
391.486 750.029 li
400.036 758.579 li
cp
f
400.034 709.479 mo
409.484 700.028 li
400.033 690.579 li
390.583 700.029 li
400.034 709.479 li
cp
f
400.032 660.379 mo
410.381 650.028 li
400.031 639.679 li
389.682 650.029 li
400.032 660.379 li
cp
f
400.029 611.279 mo
411.279 600.028 li
400.028 588.779 li
388.779 600.029 li
400.029 611.279 li
cp
f
400.027 562.179 mo
412.177 550.028 li
400.026 537.878 li
387.876 550.029 li
400.027 562.179 li
cp
f
400.025 513.079 mo
413.074 500.028 li
400.023 486.979 li
386.974 500.029 li
400.025 513.079 li
cp
f
400.022 463.979 mo
413.972 450.028 li
400.021 436.079 li
386.071 450.029 li
400.022 463.979 li
cp
f
400.02 414.878 mo
414.869 400.028 li
400.018 385.179 li
385.17 400.029 li
400.02 414.878 li
cp
f
400.018 365.779 mo
415.767 350.028 li
400.016 334.279 li
384.267 350.03 li
400.018 365.779 li
cp
f
400.015 316.679 mo
416.665 300.028 li
400.014 283.378 li
383.364 300.03 li
400.015 316.679 li
cp
f
400.013 267.579 mo
417.562 250.028 li
400.011 232.479 li
382.462 250.03 li
400.013 267.579 li
cp
f
400.01 218.479 mo
418.46 200.028 li
400.009 181.579 li
381.559 200.03 li
400.01 218.479 li
cp
f
400.008 169.378 mo
419.357 150.028 li
400.006 130.679 li
380.658 150.03 li
400.008 169.378 li
cp
f
400.006 120.279 mo
420.255 100.028 li
400.004 79.7788 li
379.755 100.03 li
400.006 120.279 li
cp
f
400.003 71.1792 mo
421.153 50.0278 li
400.001 28.8784 li
378.852 50.0298 li
400.003 71.1792 li
cp
f
400.001 22.0786 mo
422.05 .0277186 li
399.999 -22.021 li
377.95 .0298336 li
400.001 22.0786 li
cp
f
350.048 1004.08 mo
354.098 1000.03 li
350.048 995.981 li
345.998 1000.03 li
350.048 1004.08 li
cp
f
350.046 954.981 mo
354.996 950.031 li
350.045 945.081 li
345.095 950.031 li
350.046 954.981 li
cp
f
350.043 905.881 mo
355.893 900.031 li
350.043 894.181 li
344.194 900.031 li
350.043 905.881 li
cp
f
350.041 856.781 mo
356.791 850.031 li
350.04 843.281 li
343.291 850.031 li
350.041 856.781 li
cp
f
350.039 807.681 mo
357.689 800.031 li
350.038 792.381 li
342.388 800.032 li
350.039 807.681 li
cp
f
350.036 758.581 mo
358.586 750.031 li
350.036 741.481 li
341.486 750.032 li
350.036 758.581 li
cp
f
350.034 709.481 mo
359.484 700.031 li
350.033 690.581 li
340.583 700.032 li
350.034 709.481 li
cp
f
350.032 660.381 mo
360.381 650.031 li
350.031 639.681 li
339.682 650.032 li
350.032 660.381 li
cp
f
350.029 611.281 mo
361.279 600.031 li
350.028 588.781 li
338.779 600.032 li
350.029 611.281 li
cp
f
350.027 562.182 mo
362.177 550.031 li
350.026 537.881 li
337.876 550.032 li
350.027 562.182 li
cp
f
350.025 513.081 mo
363.074 500.031 li
350.023 486.981 li
336.974 500.032 li
350.025 513.081 li
cp
f
350.022 463.981 mo
363.972 450.031 li
350.021 436.081 li
336.071 450.032 li
350.022 463.981 li
cp
f
350.02 414.881 mo
364.869 400.03 li
350.018 385.182 li
335.17 400.032 li
350.02 414.881 li
cp
f
350.018 365.781 mo
365.767 350.03 li
350.016 334.281 li
334.267 350.032 li
350.018 365.781 li
cp
f
350.015 316.682 mo
366.665 300.03 li
350.014 283.381 li
333.364 300.032 li
350.015 316.682 li
cp
f
350.013 267.581 mo
367.562 250.03 li
350.011 232.481 li
332.462 250.032 li
350.013 267.581 li
cp
f
350.01 218.481 mo
368.46 200.03 li
350.009 181.581 li
331.559 200.032 li
350.01 218.481 li
cp
f
350.008 169.381 mo
369.357 150.03 li
350.006 130.682 li
330.658 150.032 li
350.008 169.381 li
cp
f
350.006 120.281 mo
370.255 100.03 li
350.004 79.7812 li
329.755 100.032 li
350.006 120.281 li
cp
f
350.003 71.1816 mo
371.153 50.0302 li
350.001 28.8808 li
328.852 50.0322 li
350.003 71.1816 li
cp
f
350.001 22.081 mo
372.05 .0301166 li
349.999 -22.0186 li
327.95 .0322317 li
350.001 22.081 li
cp
f
300.048 1004.08 mo
304.098 1000.03 li
300.048 995.984 li
295.998 1000.03 li
300.048 1004.08 li
cp
f
300.046 954.984 mo
304.996 950.033 li
300.045 945.083 li
295.095 950.034 li
300.046 954.984 li
cp
f
300.043 905.884 mo
305.893 900.033 li
300.043 894.183 li
294.194 900.034 li
300.043 905.884 li
cp
f
300.041 856.784 mo
306.791 850.033 li
300.04 843.284 li
293.291 850.034 li
300.041 856.784 li
cp
f
300.039 807.683 mo
307.689 800.033 li
300.038 792.384 li
292.388 800.034 li
300.039 807.683 li
cp
f
300.036 758.583 mo
308.586 750.033 li
300.036 741.484 li
291.486 750.034 li
300.036 758.583 li
cp
f
300.034 709.484 mo
309.484 700.033 li
300.033 690.583 li
290.583 700.034 li
300.034 709.484 li
cp
f
300.032 660.384 mo
310.381 650.033 li
300.031 639.683 li
289.682 650.034 li
300.032 660.384 li
cp
f
300.029 611.284 mo
311.279 600.033 li
300.028 588.784 li
288.779 600.034 li
300.029 611.284 li
cp
f
300.027 562.184 mo
312.177 550.033 li
300.026 537.883 li
287.876 550.034 li
300.027 562.184 li
cp
f
300.025 513.083 mo
313.074 500.033 li
300.023 486.984 li
286.974 500.034 li
300.025 513.083 li
cp
f
300.022 463.984 mo
313.972 450.033 li
300.021 436.083 li
286.071 450.034 li
300.022 463.984 li
cp
f
300.02 414.883 mo
314.869 400.033 li
300.018 385.184 li
285.17 400.034 li
300.02 414.883 li
cp
f
300.018 365.784 mo
315.767 350.033 li
300.016 334.284 li
284.267 350.034 li
300.018 365.784 li
cp
f
300.015 316.684 mo
316.665 300.033 li
300.014 283.383 li
283.364 300.034 li
300.015 316.684 li
cp
f
300.013 267.583 mo
317.562 250.033 li
300.011 232.484 li
282.462 250.034 li
300.013 267.583 li
cp
f
300.01 218.484 mo
318.46 200.033 li
300.009 181.583 li
281.559 200.034 li
300.01 218.484 li
cp
f
300.008 169.383 mo
319.357 150.033 li
300.006 130.684 li
280.658 150.035 li
300.008 169.383 li
cp
f
300.006 120.284 mo
320.255 100.033 li
300.004 79.7836 li
279.755 100.035 li
300.006 120.284 li
cp
f
300.003 71.184 mo
321.153 50.0326 li
300.001 28.8832 li
278.852 50.0346 li
300.003 71.184 li
cp
f
300.001 22.0834 mo
322.05 .0325146 li
299.999 -22.0162 li
277.95 .0346297 li
300.001 22.0834 li
cp
f
250.048 1004.09 mo
254.098 1000.04 li
250.048 995.986 li
245.998 1000.04 li
250.048 1004.09 li
cp
f
250.046 954.986 mo
254.996 950.036 li
250.045 945.086 li
245.095 950.036 li
250.046 954.986 li
cp
f
250.043 905.886 mo
255.893 900.036 li
250.043 894.186 li
244.194 900.036 li
250.043 905.886 li
cp
f
250.041 856.786 mo
256.791 850.036 li
250.04 843.286 li
243.291 850.036 li
250.041 856.786 li
cp
f
250.039 807.686 mo
257.689 800.036 li
250.038 792.386 li
242.388 800.036 li
250.039 807.686 li
cp
f
250.036 758.586 mo
258.586 750.036 li
250.036 741.486 li
241.486 750.036 li
250.036 758.586 li
cp
f
250.034 709.486 mo
259.484 700.036 li
250.033 690.586 li
240.583 700.036 li
250.034 709.486 li
cp
f
250.032 660.386 mo
260.381 650.035 li
250.031 639.686 li
239.682 650.036 li
250.032 660.386 li
cp
f
250.029 611.286 mo
261.279 600.035 li
250.028 588.786 li
238.779 600.036 li
250.029 611.286 li
cp
f
250.027 562.186 mo
262.177 550.035 li
250.026 537.886 li
237.876 550.037 li
250.027 562.186 li
cp
f
250.025 513.086 mo
263.074 500.035 li
250.023 486.986 li
236.974 500.037 li
250.025 513.086 li
cp
f
250.022 463.986 mo
263.972 450.035 li
250.021 436.086 li
236.071 450.037 li
250.022 463.986 li
cp
f
250.02 414.886 mo
264.869 400.035 li
250.018 385.186 li
235.17 400.037 li
250.02 414.886 li
cp
f
250.018 365.786 mo
265.767 350.035 li
250.016 334.286 li
234.267 350.037 li
250.018 365.786 li
cp
f
250.015 316.686 mo
266.665 300.035 li
250.014 283.386 li
233.364 300.037 li
250.015 316.686 li
cp
f
250.013 267.586 mo
267.562 250.035 li
250.011 232.486 li
232.462 250.037 li
250.013 267.586 li
cp
f
250.01 218.486 mo
268.46 200.035 li
250.009 181.586 li
231.559 200.037 li
250.01 218.486 li
cp
f
250.008 169.386 mo
269.357 150.035 li
250.006 130.686 li
230.658 150.037 li
250.008 169.386 li
cp
f
250.006 120.286 mo
270.255 100.035 li
250.004 79.786 li
229.755 100.037 li
250.006 120.286 li
cp
f
250.003 71.1864 mo
271.153 50.035 li
250.001 28.8856 li
228.852 50.037 li
250.003 71.1864 li
cp
f
250.001 22.0858 mo
272.05 .0349126 li
249.999 -22.0138 li
227.95 .0370277 li
250.001 22.0858 li
cp
f
200.048 1004.09 mo
204.098 1000.04 li
200.048 995.989 li
195.998 1000.04 li
200.048 1004.09 li
cp
f
200.046 954.989 mo
204.996 950.038 li
200.045 945.088 li
195.095 950.039 li
200.046 954.989 li
cp
f
200.043 905.888 mo
205.893 900.038 li
200.043 894.188 li
194.194 900.039 li
200.043 905.888 li
cp
f
200.041 856.788 mo
206.791 850.038 li
200.04 843.288 li
193.291 850.039 li
200.041 856.788 li
cp
f
200.039 807.688 mo
207.689 800.038 li
200.038 792.388 li
192.388 800.039 li
200.039 807.688 li
cp
f
200.036 758.588 mo
208.586 750.038 li
200.036 741.489 li
191.486 750.039 li
200.036 758.588 li
cp
f
200.034 709.489 mo
209.484 700.038 li
200.033 690.588 li
190.583 700.039 li
200.034 709.489 li
cp
f
200.032 660.388 mo
210.381 650.038 li
200.031 639.688 li
189.682 650.039 li
200.032 660.388 li
cp
f
200.029 611.288 mo
211.279 600.038 li
200.028 588.788 li
188.779 600.039 li
200.029 611.288 li
cp
f
200.027 562.189 mo
212.177 550.038 li
200.026 537.888 li
187.876 550.039 li
200.027 562.189 li
cp
f
200.025 513.088 mo
213.074 500.038 li
200.023 486.989 li
186.974 500.039 li
200.025 513.088 li
cp
f
200.022 463.989 mo
213.972 450.038 li
200.021 436.088 li
186.071 450.039 li
200.022 463.989 li
cp
f
200.02 414.888 mo
214.869 400.038 li
200.018 385.189 li
185.17 400.039 li
200.02 414.888 li
cp
f
200.018 365.788 mo
215.767 350.038 li
200.016 334.288 li
184.267 350.039 li
200.018 365.788 li
cp
f
200.015 316.689 mo
216.665 300.038 li
200.014 283.388 li
183.364 300.039 li
200.015 316.689 li
cp
f
200.013 267.588 mo
217.562 250.038 li
200.011 232.489 li
182.462 250.039 li
200.013 267.588 li
cp
f
200.01 218.489 mo
218.46 200.037 li
200.009 181.588 li
181.559 200.039 li
200.01 218.489 li
cp
f
200.008 169.388 mo
219.357 150.037 li
200.006 130.689 li
180.658 150.039 li
200.008 169.388 li
cp
f
200.006 120.288 mo
220.255 100.037 li
200.004 79.7884 li
179.755 100.039 li
200.006 120.288 li
cp
f
200.003 71.1888 mo
221.153 50.0374 li
200.001 28.888 li
178.852 50.0394 li
200.003 71.1888 li
cp
f
200.001 22.0882 mo
222.05 .0373107 li
199.999 -22.0114 li
177.95 .0394257 li
200.001 22.0882 li
cp
f
150.048 1004.09 mo
154.098 1000.04 li
150.048 995.991 li
145.998 1000.04 li
150.048 1004.09 li
cp
f
150.046 954.991 mo
154.996 950.041 li
150.045 945.091 li
145.095 950.041 li
150.046 954.991 li
cp
f
150.043 905.891 mo
155.893 900.04 li
150.043 894.191 li
144.194 900.041 li
150.043 905.891 li
cp
f
150.041 856.791 mo
156.791 850.04 li
150.04 843.291 li
143.291 850.041 li
150.041 856.791 li
cp
f
150.039 807.691 mo
157.689 800.04 li
150.038 792.391 li
142.388 800.041 li
150.039 807.691 li
cp
f
150.036 758.591 mo
158.586 750.04 li
150.036 741.491 li
141.486 750.041 li
150.036 758.591 li
cp
f
150.034 709.491 mo
159.484 700.04 li
150.033 690.591 li
140.583 700.041 li
150.034 709.491 li
cp
f
150.032 660.391 mo
160.381 650.04 li
150.031 639.691 li
139.682 650.041 li
150.032 660.391 li
cp
f
150.029 611.291 mo
161.279 600.04 li
150.028 588.791 li
138.779 600.041 li
150.029 611.291 li
cp
f
150.027 562.191 mo
162.177 550.04 li
150.026 537.89 li
137.876 550.041 li
150.027 562.191 li
cp
f
150.025 513.091 mo
163.074 500.04 li
150.023 486.991 li
136.974 500.041 li
150.025 513.091 li
cp
f
150.022 463.991 mo
163.972 450.04 li
150.021 436.091 li
136.071 450.041 li
150.022 463.991 li
cp
f
150.02 414.89 mo
164.869 400.04 li
150.018 385.191 li
135.17 400.041 li
150.02 414.89 li
cp
f
150.018 365.791 mo
165.767 350.04 li
150.016 334.291 li
134.267 350.042 li
150.018 365.791 li
cp
f
150.015 316.691 mo
166.665 300.04 li
150.014 283.39 li
133.364 300.042 li
150.015 316.691 li
cp
f
150.013 267.591 mo
167.562 250.04 li
150.011 232.491 li
132.462 250.042 li
150.013 267.591 li
cp
f
150.01 218.491 mo
168.46 200.04 li
150.009 181.591 li
131.559 200.042 li
150.01 218.491 li
cp
f
150.008 169.39 mo
169.357 150.04 li
150.006 130.691 li
130.658 150.042 li
150.008 169.39 li
cp
f
150.006 120.291 mo
170.255 100.04 li
150.004 79.7908 li
129.755 100.042 li
150.006 120.291 li
cp
f
150.003 71.1912 mo
171.153 50.0398 li
150.001 28.8904 li
128.852 50.0418 li
150.003 71.1912 li
cp
f
150.001 22.0906 mo
172.05 .0397087 li
149.999 -22.009 li
127.95 .0418237 li
150.001 22.0906 li
cp
f
100.048 1004.09 mo
104.098 1000.04 li
100.048 995.993 li
95.9982 1000.04 li
100.048 1004.09 li
cp
f
100.046 954.993 mo
104.996 950.043 li
100.045 945.093 li
95.0954 950.043 li
100.046 954.993 li
cp
f
100.043 905.893 mo
105.893 900.043 li
100.043 894.193 li
94.1936 900.043 li
100.043 905.893 li
cp
f
100.041 856.793 mo
106.791 850.043 li
100.04 843.293 li
93.2908 850.043 li
100.041 856.793 li
cp
f
100.039 807.693 mo
107.689 800.043 li
100.038 792.393 li
92.388 800.044 li
100.039 807.693 li
cp
f
100.036 758.593 mo
108.586 750.043 li
100.036 741.493 li
91.4862 750.044 li
100.036 758.593 li
cp
f
100.034 709.493 mo
109.484 700.043 li
100.033 690.593 li
90.5834 700.044 li
100.034 709.493 li
cp
f
100.032 660.393 mo
110.381 650.043 li
100.031 639.693 li
89.6816 650.044 li
100.032 660.393 li
cp
f
100.029 611.293 mo
111.279 600.043 li
100.028 588.793 li
88.7788 600.044 li
100.029 611.293 li
cp
f
100.027 562.194 mo
112.177 550.043 li
100.026 537.893 li
87.876 550.044 li
100.027 562.194 li
cp
f
100.025 513.093 mo
113.074 500.043 li
100.023 486.993 li
86.9742 500.044 li
100.025 513.093 li
cp
f
100.022 463.993 mo
113.972 450.042 li
100.021 436.093 li
86.0714 450.044 li
100.022 463.993 li
cp
f
100.02 414.893 mo
114.869 400.042 li
100.018 385.194 li
85.1696 400.044 li
100.02 414.893 li
cp
f
100.018 365.793 mo
115.767 350.042 li
100.016 334.293 li
84.2668 350.044 li
100.018 365.793 li
cp
f
100.015 316.694 mo
116.665 300.042 li
100.014 283.393 li
83.364 300.044 li
100.015 316.694 li
cp
f
100.013 267.593 mo
117.562 250.042 li
100.011 232.493 li
82.4622 250.044 li
100.013 267.593 li
cp
f
100.01 218.493 mo
118.46 200.042 li
100.009 181.593 li
81.5594 200.044 li
100.01 218.493 li
cp
f
100.008 169.393 mo
119.357 150.042 li
100.006 130.694 li
80.6576 150.044 li
100.008 169.393 li
cp
f
100.006 120.293 mo
120.255 100.042 li
100.004 79.7932 li
79.7548 100.044 li
100.006 120.293 li
cp
f
100.003 71.1936 mo
121.153 50.0421 li
100.001 28.8928 li
78.852 50.0442 li
100.003 71.1936 li
cp
f
100.001 22.093 mo
122.05 .0421067 li
99.9989 -22.0066 li
77.9502 .0442217 li
100.001 22.093 li
cp
f
50.0482 1004.1 mo
54.0978 1000.05 li
50.0478 995.996 li
45.9982 1000.05 li
50.0482 1004.1 li
cp
f
50.0458 954.996 mo
54.9958 950.045 li
50.0453 945.095 li
45.0954 950.046 li
50.0458 954.996 li
cp
f
50.0434 905.896 mo
55.8928 900.045 li
50.0429 894.195 li
44.1936 900.046 li
50.0434 905.896 li
cp
f
50.0411 856.796 mo
56.7908 850.045 li
50.0404 843.296 li
43.2908 850.046 li
50.0411 856.796 li
cp
f
50.0387 807.695 mo
57.6888 800.045 li
50.038 792.396 li
42.388 800.046 li
50.0387 807.695 li
cp
f
50.0364 758.595 mo
58.5858 750.045 li
50.0356 741.496 li
41.4862 750.046 li
50.0364 758.595 li
cp
f
50.034 709.496 mo
59.4838 700.045 li
50.0331 690.595 li
40.5834 700.046 li
50.034 709.496 li
cp
f
50.0317 660.396 mo
60.3808 650.045 li
50.0307 639.695 li
39.6816 650.046 li
50.0317 660.396 li
cp
f
50.0293 611.296 mo
61.2788 600.045 li
50.0282 588.796 li
38.7788 600.046 li
50.0293 611.296 li
cp
f
50.027 562.196 mo
62.1768 550.045 li
50.0258 537.895 li
37.876 550.046 li
50.027 562.196 li
cp
f
50.0246 513.095 mo
63.0738 500.045 li
50.0234 486.996 li
36.9742 500.046 li
50.0246 513.095 li
cp
f
50.0223 463.996 mo
63.9718 450.045 li
50.0209 436.095 li
36.0714 450.046 li
50.0223 463.996 li
cp
f
50.0199 414.895 mo
64.8688 400.045 li
50.0185 385.196 li
35.1696 400.046 li
50.0199 414.895 li
cp
f
50.0175 365.796 mo
65.7668 350.045 li
50.016 334.296 li
34.2668 350.046 li
50.0175 365.796 li
cp
f
50.0152 316.696 mo
66.6648 300.045 li
50.0136 283.395 li
33.364 300.046 li
50.0152 316.696 li
cp
f
50.0128 267.595 mo
67.5618 250.045 li
50.0111 232.496 li
32.4622 250.046 li
50.0128 267.595 li
cp
f
50.0105 218.496 mo
68.4598 200.045 li
50.0087 181.595 li
31.5594 200.046 li
50.0105 218.496 li
cp
f
50.0081 169.395 mo
69.3568 150.045 li
50.0063 130.696 li
30.6576 150.046 li
50.0081 169.395 li
cp
f
50.0058 120.296 mo
70.2548 100.045 li
50.0038 79.7956 li
29.7548 100.047 li
50.0058 120.296 li
cp
f
50.0034 71.196 mo
71.1528 50.0445 li
50.0014 28.8952 li
28.852 50.0466 li
50.0034 71.196 li
cp
f
50.0011 22.0954 mo
72.0498 .0445047 li
49.9989 -22.0042 li
27.9502 .0466197 li
50.0011 22.0954 li
cp
f
.0481544 1004.1 mo
4.09778 1000.05 li
.047766 995.998 li
-4.00182 1000.05 li
.0481544 1004.1 li
cp
f
.0457996 954.998 mo
4.99578 950.048 li
.0453248 945.098 li
-4.90462 950.048 li
.0457996 954.998 li
cp
f
.0434448 905.898 mo
5.89278 900.048 li
.0428836 894.198 li
-5.80642 900.048 li
.0434448 905.898 li
cp
f
.0410899 856.798 mo
6.79077 850.048 li
.0404425 843.298 li
-6.70923 850.048 li
.0410899 856.798 li
cp
f
.0387351 807.698 mo
7.68879 800.048 li
.0380013 792.398 li
-7.61201 800.048 li
.0387351 807.698 li
cp
f
.0363802 758.598 mo
8.58579 750.048 li
.0355601 741.498 li
-8.51381 750.048 li
.0363802 758.598 li
cp
f
.0340254 709.498 mo
9.48379 700.047 li
.0331189 690.598 li
-9.41661 700.048 li
.0340254 709.498 li
cp
f
.0316705 660.398 mo
10.3808 650.047 li
.0306777 639.698 li
-10.3184 650.048 li
.0316705 660.398 li
cp
f
.0293157 611.298 mo
11.2788 600.047 li
.0282366 588.798 li
-11.2212 600.049 li
.0293157 611.298 li
cp
f
.0269609 562.198 mo
12.1768 550.047 li
.0257954 537.898 li
-12.124 550.049 li
.0269609 562.198 li
cp
f
.024606 513.098 mo
13.0738 500.047 li
.0233542 486.998 li
-13.0258 500.049 li
.024606 513.098 li
cp
f
.0222512 463.998 mo
13.9718 450.047 li
.020913 436.098 li
-13.9286 450.049 li
.0222512 463.998 li
cp
f
.0198963 414.898 mo
14.8688 400.047 li
.0184719 385.198 li
-14.8304 400.049 li
.0198963 414.898 li
cp
f
.0175414 365.798 mo
15.7668 350.047 li
.0160307 334.298 li
-15.7332 350.049 li
.0175414 365.798 li
cp
f
.0151866 316.698 mo
16.6648 300.047 li
.0135895 283.398 li
-16.636 300.049 li
.0151866 316.698 li
cp
f
.0128317 267.598 mo
17.5618 250.047 li
.0111484 232.498 li
-17.5378 250.049 li
.0128317 267.598 li
cp
f
.0104769 218.498 mo
18.4598 200.047 li
.00870717 181.598 li
-18.4406 200.049 li
.0104769 218.498 li
cp
f
.00812204 169.398 mo
19.3568 150.047 li
.00626602 130.698 li
-19.3424 150.049 li
.00812204 169.398 li
cp
f
.00576722 120.298 mo
20.2548 100.047 li
.00382483 79.798 li
-20.2452 100.049 li
.00576722 120.298 li
cp
f
.00341239 71.1984 mo
21.1528 50.0469 li
.00138363 28.8976 li
-21.148 50.049 li
.00341239 71.1984 li
cp
f
.00105751 22.0978 mo
22.0498 .0469027 li
-.00105751 -22.0018 li
-22.0498 .0490177 li
.00105751 22.0978 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 19.0.0
%%For: (Jelle) ()
%%Title: (OBSK511.eps)
%%CreationDate: 2/2/2017 7:57 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB6uDEdcQ"MlgfN*B+0O?J?o^)3Tk3pYg$Yd)">a3kJR;m<U+I%du!Ra<PQ.Yc?O//PZlM;;Q4b>BkhCXq9u:l)XeWiIhuSc
%EaD7#,V>=GN*%^)*W'VeC:eXmm5U#<BjK,*;3h'BPB?ZY]Rg*@^K,0brd7]bh;`\M[G'jZRe::)ZOeYb/iR5Ej`g?m*4r3$lcjog
%)tidf-i2-bNrE"XeZ5NYqlAM3a\#_\T?>=*`_W^C3W/]!WO<UPRRTJAT8:jP%[)PLj57uAfr(Aoo[-gLgI6%>lGQSt$3rM:r4AV_
%dofsSAFs4RRl>@;q*e0q"oXUNA4):"hOR^)CRo@TgoWFQ%gfSrG-gjADLZiRY$`89]7G,,.sbP#C=UM`.d8mW4BCu^rcb[sC,tZf
%#sH-))R><NB(Lm[`pV@AhmM`6$aK)6\Pd:N^0>N"cYEJGI3EBp,gi7NdHOH?g:h7M]',\"nl_RXhEeJGXeTge,"hM`kqqslD#\#l
%cHGVLC)911=oZ=OZ@H+q5!oFZ?iF?Mj".N/N`suQH1R33m!Mj[V,\OYX=WU^>0RrimW6:e`oNYQO6%*6VAQ*uc%sKI@_IG2s(#,<
%\QGk7++`]3)YTqLmCh(Q0OHg:[+2<ZCb0+^=H<A'NCrBDJ+Mg;m+kN7FM$(Xfbak0_?#EA.=H/iCY`f+$I(4d/04ZO#(fMN+g'UK
%B2@nZa>5+$Vo>)j5'T,)U+b"7=RasML\+a;l+$_F*cABT5HUKr>BB/7g%@u/V&HtI^35u_1shN?dE=387j9ia&0EuPQX>j`oX@gI
%?*:RJ!<Q+[gXR-hMS;a_2#eNWqo.h>R^':$qWVVPmqTPhiWR_N@3coGbDgO(7NPY5pM58R-Y:e'[RaZ-g:[tB'B,a@\qNZuAK:8h
%$?2'C<4-(KoS=W^Q.t,ERdEm5@$PK[eobDSSpaYOY9-NEm*fAG+.'S]8-`38Q&aB2oM<)kESo6k_FQ5Blh/tY]A37]]uDta5Fmkf
%H*^Y_Uq8auC>tkJ8,/PsS'e@H)b1@kT&*XR!G@*WjjEN&>atC<\!k[].+MdMb\!]+<0YF&oIY.X:DmSi^\/9IN+]o??CLOjkKB%6
%Ir^K[:@5Gq4o=("<^Z,KZWH^<DLDX0=oH9&m]2]RF=haihJ*L14N,NoC>GmQ2k+/+D!]-d50BuWkomCoR4V<d6L,Q)DU$L_=OH?\
%8D]''>ZPo[>7QbGIn+F!e4-hlJf_pZPt_J]r'?dVpMhMl9=#GOM_fUK5L;5?AV^\<]chiZbT2E8+'WcK']]01rVPdB1Mf="J(LaB
%NlgWFRf>4c?a0e,3d59-0)sG5%uFENYl%L\V,3Sd)R=7]<Zro8KR_WDRiK$mj%iFtO$I3EIdMG%ImH!mqMkO/7DJdfTDaC','FO0
%H]V^%1%Z$6-$<26X&-E9EU9l2#/)JbKes0["kT^2hDm4?Ob$T1brC.Ys5)&'!pP:%s59JimNITtdD$XogK8Ul2b<g:-lA?.-IX.@
%@R?CE6`M`CW;gFXNeBDWor<SV[(10*QFdD7;bn;&",n2sBC-FX:V$FnI;jV=Iu(N[*fh+IZi>L))lUP7;L7`ab>5U)N0b5-]\[Om
%s/TTu<!udqo`K&TgXQKYV8P,NW2m#?pdb';f$<@Hlu]#ooQRk%=[\JF%+W^LLLpK<f70m=pd)rq?j"Yi<fXjf#Q>V:Y%fd4eM+[9
%Dn^[$/"sPr/=I3GJM/n?W0+tS&n(u]7Lr(+68Xo[5"\W[h^Pj\VhFAn>5>"$%5frYN:d-m+S;iO(B+fI(3!D2!0>n1qU=[e^B@A_
%Ih\UbSMIX_n/@2H@<eUI2s(Qq+jo00J(@Te]_s&T^*B;m48%=nru<mK9:D04np)IG3N\V554/?I<p>'d)L,:\#k]cBMNO44X<-$.
%O)"(\,F"@rM@.bJH!/:eorOSiCuOhZNVb;"]+ip(f<0V@W?X^_Kf%.GZg$)5QY%%:)uJ0p/j4"Xe\'`l$"I'KNHs+QBtm]j3Ub%R
%kPpc@j72)oU<s(.0MCo)Fo2jZ)16EIAq8t5(c8Hic@F07d%+XEB(g]<J!+:b=DN$5j[Q.J7M9(G.=1am;32C:8d+9o[2m\:@M]fS
%FgD`-o"Ql"r!OUT&-bS%QL`"KBP[*.2OXmL[1Rj2,-@q(&-D1Zf8tgMM[Qk?#;8mQh*!aIoKp2gZdl1+ec%q]@"`h\[&k/(4hdrP
%Ei%PCO5OU?6bgi5Kq/^-RZgujqK45=OoNDE?T9cQQWm7Q2n%-3p\Mo-!bLoLmh#2agUAm&O8kM[-/m2%gXYjUTa/,2/l&g@2=cFQ
%8,kr":WH2*=\/#*&um#*,FC>'CRnM>r;3.GM*CRVfA#,JB";3(@=S;GU\9Rka*_UH;(nDc[,^gXp(?C91?,&,%]@kRH1R8$:Z(?F
%fr<r^-]]!X;bM@rUpIpf>BUoX3utX.lkK'<%;08jd\i*h=l5A'R!"ceW-,BDEo[*'oAP_!/PI!Q\W;?QG#VYQ1b5B,O'\;uEsYbs
%cV(<DWS"W-#(2[tT?]oK>0X4V>e+2$>]&dgZ1X`,1NlsiT]N!C+)@5p0*k'-_u.KO6FC,QTY6aB=OAFuU>)(0f5,9p4qP'"cEcX,
%ZrB0lik!J&QaGI7]&&s(Z-Po2os=JCNP/8VNaLICVhn!MYntV4,D8K`>$!O,B8p[JPM.Fp?a307;ip4CV.I;$JF'OFjk!]1G?D[7
%[drr&>H0WOmA%/":=\$u=<qgdU\Cii@NB>k4mQ\`$scqWmh_3Sb6&.,(3O"^Y2Or&A;fQ(2'6V!>LbWHmFP.)/?`ZT%5k%eili9D
%-o_,XGKrJ*E!SIA=$+t+hppA)p"qB1J!FAUFaG7;=[Itjaf_)]%1&<^7]l950Lj3Q\rV;)VeKSY&>&+jET+D5b3&R7FP^j(;C%=V
%BpHH7F_\9*cFW,?F.;S)e,d;(/Nc+S9(h(>Xka;07H\m?Wis[%$'T13-f(lH7R+S=p!)X6?$el`);.2Cr=nS2&I^a`1Qlae-&!=`
%q[;g:R+'PK3nBVJe$Dqg*n`Tj&up1ks'6qlEp[%Z)G@=o8t8CdiO*!-+U*IY/cS6Hj;mIiEui2p2JWcb^XFO1ir%\e_B+%QUGm[F
%;]#@U>,L:mr`sBM0EoS"B(kYc>,hIJ`U&\?LL+3,c&=&RdYV/m`d!-Y?@K*g4K*EeXOWhS6*<7aJH]C@qWYH8C)QLeb\mk-S[6pg
%]fH_C0r@Y!bd;m_9b9EO95*M#hKZN0drM&',rW&+f-6]lbDi.'G_/hkI.'Lq'Si_O^Y$(45NN\8mp[70R]%]=,O8ESMml6i4+ib$
%1XDsQmV'WlFU((8[d#iPTSjRYQ_F[c[+slr@`Sg,>LNYQ%^\CYp,J]14/JQqh4+V7kcO>d\_@Vi(7f?Tq,t,eUE,Trp5<d`Y..EO
%i6oE2oc"[@UI#G6.;P]q)f=*u")(UA7Fli%DMX7!:A--K!R+?k@Q8Oh_mtg^]02USbBgiGBbCB*S7Xo7?,[.QEM#1"k2+9s(Y/,.
%"QaHl+7.$AO%\i6;_=N1%4[;*N\Nc3gl3>=?eo(Z06C30<1<i/Jd\=023/gq?(TYu&aGI1g(^=@=(a`NDp:=TVt\CP>]?V2>5tR$
%A(Lt+QM1u@O*=!sP#,Blmc;2<2-[h*)s,[I]^)j3071Hbb7oG0p"CqQDrJ2Kg9-G#8,;VBmAG+#]HR@gB;dM14o>+%8t^ae9"]k:
%R2^LJYA\.;lfS*@RVL,5XfnqmK71u]lt]aZ1G%`oS_0@bIPFMr;U9MCbdU8ANmch:EmACYdj._.3P#hF5C;",01j`NkPG+Nidn>L
%0?P?2*r&/WPQcM5F"@<b^?7]I]Y4J%[MW9)=d#"Xj)$m*?*FR!51*sIjjnnPQ$3dQ5$p<;9.a>OQn,4AY.Jk;HSst=a$4J'\!f:T
%d8]UX%gD9tK;rlHgc'URO>YQW3]KepBWqgd"NWdGc\o`'!qqb[Gksar?`ia7]H?JXAPh/t$HkmsRoO"4[j$/RMX`'FDF7j9SEl`=
%7EebTN8G=2(K'?SBMCITc*bMq8OqgCEr>ou0ApNuk.e$1]8MXrgX]NGQK;ng?)^k0H8LpJCj+cYe&"I!0\UrheiNNCZ)U1;bkqN;
%n=iG*_n9&f3tDqMP7j<^kCC.Z5B0@q`I>Doohqp=%BI[Q>aJ[.<>Ei</k(iYh],Q"I7S>']bXsp"7=WU5;DMTIp!>_UG_r44\ate
%,+HZdj0I(>]`kZEK=EB"Bn^[<jmG.e>R!f:IE0r6!4QIjm>q!MlZaL`2i%-A&;e@!/hj3F.<M"<b9!qEf,<4h8RBB]mB'jKT"ME=
%*SCiq*J!:)_s[ZL*ee^B!<:4(nQ?sIKhDYn(R5lD^M)Ta%YNk*HAiUHfk!jOZd45F^hg3H.V"YN1;B82C"#Z2/iVXX>=`D[f4M_Q
%lNMHtC0/euG,ifq]oS:=MKV1!XV]LJc[^&3dH.sMpt;V0.>S(R\X!@)1g:JI2*".A;gPqKJqKV(\<fSV\E*_KCM^\6IAW-X:ouS3
%hU7Y/BcCA"j[jogT(6b.K&V8@<OBtdi'05<\l@*mVoe?]h//U,f0FE+[qM8;&[M4__ViCQmLD&m.^>>tZ!n[*9l5Ar@PJ<GZ[8a!
%`J&Oh\p(+aLNVW'XN;R1q1s*XlPUC7N1B,99UAAZ;gWGm/XW]6I:<%W?^[^#'@T:c'J+H7C>COYnI;0Ki5"un^"uM6Ts"\8H#5GN
%%(c5@gTNoQW3sj`i(Qon!#=,Fm7J:"rAZr>(RR=f-/XgHs(Jk@A,=k@MR=9-_&!raiqKfE(g/"<pe@&:Mfl7*hNAXVnF(mnG$\DG
%fAAc,KGJlNoGlOE$[$6-?qP^Ono)`nCPCs^<m\#N7)`.F3%iD=JaY&=_.I(7/<fW]oT,Im@D7D,6+>FQk>tj74Z.M]qM#F[LSF?:
%j$AB*gJ+TBgf"E\KJg,]"dNkE\HN'#`ET4+Enc(L!NT)2qW=hQ@HfE%Y+WZ0=qkE`jk_7NBl6WR0$M(egWXtZFOQM$J4?>g>4&e2
%_cIl<Eh/g=CR1u<UX_ZTrOZ8-GpcSPV2!53^Hq=a)qF[<a%GqOKf;3:)".T8#T#np;BnG1?%+(`'siJZRL^/"I,Ne&<PRD-V5dgK
%f$ltRBD71^4@cZXgM64r.h*#R<QV@L<34pD3K)ENMSAg!odInI9^]R=D/ATkoLLR,-s?]NCW0q9A[mNd.+rFMqIppIU>n31UdX=b
%Io#:'SC.'5N"`SKl%E/28?oXr`iC1nBHaf-[;Ze`IZQ4J)\%_ckJ!K1`TZ%:[qL9]QIbCkqCEZ!WkP.N/D@%&@e[3A=%C=*M:g^C
%s%=LqXYt)P\f%3?&2M)%J@+99aQ-73If99<l!gf+ZhqSNKNr@oC8CRI'TcG<YD$Z]=s\MSGSo"1=/T9C9/[PW9MXom!lbt)O*uS3
%@$iUT.X2BfNUZDeWe;0a0k>dQ<DB448g)](+nbuRqaKAqn_#>qn&t(r,e&BCIJUNXRbt+9%N4*r]H5](Xk&Q6mC2A]$h`_br-.f6
%[BJ/]=&%RZB>%V9X((Et$3QB6W'>'u?*<*[8$(LE0K+tFItrK2jE/=snaO!nA[.T;"6uV@TY;qO?OK`#eS@<AT9&,!gU0Y7V[`N[
%EL&@BWB0fb^]>S?'0\c!$h\e#luZmFT(cr$)qIFo57EmmbE4dlpBF>@KmUU_3;-DX5N"cCrgi_g_TknO037TG,Ee6@qK"R*HMN_d
%1<G1EjQ]6:`P3kUd`I)U4ZK]q,7bR?ear2unL_NK\NOrD>V<`^2_3HX-+SD<I)H]`p2YOE1NSGRM'l@gQf<k>gO)-V;+&[$hpV&U
%cb`gIF`:WFcV"M#PZb_g-2$To6K1E!.%LJ4G/[6op#pZih8lQUj4=":?(-6q27$Aa<3`&fgJ??$Wi"TY=ajLL[17E4p@=c>h"K/r
%]%"CC/iVPZ[o2b)FE:bl?=//HkLQsK.<AJ%8?U`1.+7PRBgLI%ehbHiI/?H0c$WcB^'Ued`65OBX7;gAkC]CZokia^BOSJLS(lB'
%#A`NL0$i*(?)b4#E)^Z9T?lZOd<BfLUrr=(dAdqZ*+OW+I&#(qh.UsAl#1Alp,hZM<iel\ld)Z=#TeTkIJHW2X8BH"jN:MNg29GB
%e&cGU5<$nA'EVK]<kBr-Z#e`M8/)T1N-7[G`GQ[lEq36M<u0rFfAm-bh]o;TLC9m@W0LE$.b7DFcaHoWcg?MVmY+05KbrdV4Kl9G
%g<!XZ[)?:qh:D-ql_!UQ/r`YNAgX!![p%NNcfrR)Qc[^']2hmj?*R@l<gPp`2'sYkMf3n8>.'iHWH>joinDuR;@B*I:*%jp:>M?h
%D+uk]4_pVAh:E.LHMF4_s/PGF=qd]4g`!nja03uA]fUk\WAT$WG%#EFeTs>6irG<eT&$E1>1*7ofn?asi9C&Vq/U4O$u0'mdP!*=
%):r%6kKaZ%CX$JJc=ZEHah6Se2P+T+(6T^4>*$"Ng@`L8b,s7?bfYq3;60\IW_(EN<4CYPX52Q%V7^p6>3gFt4ZdrcV&[%r.[;%r
%8p7=]CuEZ8I5VQB?F?)qXjls=H`^N#qFl#iHfJ-W*h2RcC6_eH1I(2m4KF7knia*toDZ'!C;!o9p9X?GY'$nFf'R5$S?c;!e""\=
%^Ul(Ee7qZf5:`R#Y?Hk4_;%E7X]ACqB7/lh@I7.nn<?o=XS$CL7eNj*YBm'<*jskL94q%WEDij:U&!j=D-%8:DA0@Z[9h-8hE>X;
%q`&kMEN>?UCYIU1FLg",Epr(;Fm>^.[^>C-CMS.LZe!<tXmn$C'ij;Bg`u&uFg("8lbUa+e)SQfK57S"8"Vk\[:0T)/,j[d=%XO)
%I%QTD3q[dm=q?+j^5hbEe[<u+SbWJhQ)lpXc#$7I-0$&ShHWU@[BElf>'#Jjj70O4q+XiS_REf$Y(gVgT;V#hC[R+LE(lkAm='>@
%e>g`ob\k>,mRtlI$gY=R<6r_Yo]pj-hL.FTeY%edgHA29F*a8)g0IE6g)<J>ItH7_E?jp;V3l"A/lpuAf!J^5Y(gYhSU%QPKs%3%
%jPomC6#0bkpZ<KB1"F\^T1Q0Mj?d8ceiMK%QX=\O,d(6i2RgA+D4308NB=PQrbGqpe[f^_G4b9KZhf&Ef=Pena`*[gqY%o#@roI`
%^j^TN,(EmE4oIX#iREqO;`o!\er.uu"jf5&-O\/<WrB#1*D_Zbr+*Nek;2:Kg@uN"2Q*HWJaDpP_S,-aF3<;&ZhMq0o&G\h.G&:R
%`4@^Pqs+"MrFBD<nUC=ToX<uZ'NK32rq`qf;'<>2]tJO8ThjQX^@RAg?R0EF^XuJ1I)5XNAbW97FdbsSb@8o,5@'je9tb)shG<Tu
%$d4R.T[TL1*j_'%?iSY>DJa_arOc)f:->/CC;)l)/!"!?cqBl[lCLdq'lE'doBC&Nj_WhPe#)0S483f&?_?1[5Bs/R52B4>a(:l<
%>E::uM$8sDleBkMnsnCuL"So8e)^<rB9bV3UmE&s;)RO_>BB+:"[;&q=%uWHmHNp'g(F?a9:`@_TfRI^/BlETUrpne_7$&0Vs7gm
%`\qb3-f&G,VK=3UcF=FXhp(&OSain)r$.1c/&bH+dfTMgL"'FXP'i7fcK#"+2QXddl%Z0*gZ-H#o'nhH*98Pt_-!+%B?39#DMHO#
%NLNq9K3Vmjm52"raC^6GUY_<<:&dVY[eu:RH>\*Dmt^%VlK2kV/h-6:*jln"',ReI*O#_BMRApXcW\_ZoLnnZ<@Y[&SpAnEWkkb"
%X*\oqRgNN'FuIImRQK:aj(b\i:J]WNFs]DQVcKoL!As$$Q1)gJX1;GW:i#(1ZW>SnbDKr7(]nqt@9;f/0&BboHIR94i8)uS;FcAJ
%!3DQ(/Ndgf>Dj$d>*n5_cWZ1)?J;%ACbDtk4DVo*auL<jC>Q%ar5M2-n(%iTQ*1`f'9>@bNPKSS`:r<SooZ#>ktD+Hoacd@VE-V3
%_sc3@S@ck6_9]Gp\:[O:^Y;BFVp4kXo\#\4U$Zc1C(gt(qo;<E[W9Yu!a%hKIU-Y6Q<KTq=X%?%^HMCN]YmEkl`Q&.=EtQ]XkGgn
%.3%md/"9K(8*ZbhC*:O(=bHZ6W,^!4=p0'YM#uJRHrQ#&erNbM`e1h9Ni_e?>g4%fm%/E&c'Q.(7Xn0CMtL`.ll`ka@*4o'_rGHY
%,oGi8^A"I0I;4Z;^rX1J2[F<ioU4V,Hm`Yrs3)Sg+/G-h<GBKsml7t:UuR_qT8c!(a7o3erk[H^DV\*E?bk@9R<XN'Oro6bGW&<S
%E6]0L@@XQ*39Ss]C_L1NO!3hr&B!.B"0,^XnY5g0:hfLU`ii:%ZnRkSS@?,eZtordf@KnEn-m1W>+"/:(=VY)1W\,KW5"RVg\gJi
%r<9T*_P)Z[2<^#@2rXP3K9"%8rD&jN6h?<-fRRk0VM`I.q]7\u*qjiLe7OU;@,4?O['%mLAj5Y0j$D.XGTC'/GN53beqitI3-Fob
%r#hrA\+Z\el9+`aR:7pF];ip9Ba0,0b\s4j/t3[Z/jn2kPONJ[RX5?6'fqT(F(-'$i-!FQceP="Ed;\;4%.tNFpq[-MNVW0A3QI(
%AJ7?FTS`Ea]piRl;5?).Uqm?sf4tST9:iJNkd5dc@!V\Ha*0?fjOAmR_E[IOej5#S;MFU*C3"K=c[SpI%lC)jpU_4aW.e=qRW_l<
%[%e<#[CCEJXm'`6^=^TZ9?4*$CW'l7]u]hJB0O4rllDD7QN*[L>2u<4HD(5)lZa<SrhcL/h2TQ%)s=Bi]2H0LZ:d]*iBGq<(q5Nj
%.^W&Qfn*D>GF:ee`HtBr/bXIlmcpsql?RKo?H;N*9O!%]QFEu/%:?%gbYL:>&F9[iU#EI*!+XZK$9O!&_d^+Sg,f3O)A-eJ`mW-N
%UV[gN?lYoB;qs[7h=to/qWtQhK<NTrHYSVCe"CmM^XH@Kgn(k>T&"7-`Dn"Jb?@,ro6*@1`D\F\[W26X%q0mM)=KaP];steS":SN
%hihKXdjEMq_6?Q;Xic"fI<AB4leE'?i/etdd]lhfmu7HUf!(k,DDZ59X+rBI6I'MdmK1)Z,X<I0eqA8cBQXgS-D]+B'S']ZT(H,T
%hm]l:qp#X(FLUD@J#'!;[X7r%(9'E<?IG>c*<!<uJ\UI<9QAY!4<Vr;6RH7ZpBRTcXB>U=$1tW!F!TPDg&%<e!rW1o<P_%H.`B7]
%O`p#j$?l8C"g0GaquWgZ1BVfJ:TsLr%mB6<"2%s+ri[>iXEYJgL"+rG3K1q[]_Tq-$Ldf[fXbRbbsUY]*Edm&ch&838#ZFXRd?W%
%@.VB\ZE'2bcO??1]?\Od\rH%K7CbBV&9u6NFZSkM*4Zabn;Td'3PK[1EUVj?@*;`(er]W<L2J!9C_fbU!dDn<Nf[7dpBRkNc?@li
%!C'os!lMK&9Tp<dGC(+Z!LuPb]D.?\`iW_jb?A<2"F14m9#9<VpKF,tK8^?^`$klJP(70<g(,pETt;7p+cQFUfZ`2nR+ZBK-:IS[
%S4ranNal@jQAtdiW30H;B7aP(@U7b6SHbG#JJsmED]J2P^e)2jZQSrLG7*QbSoZJ'W(D!=#'tV$I9",K`KWQZ.c>/p]q33h]l/MI
%>gtiSjmrUs3&;ACGKg[s#hL^$R1g1GS&17#&4\4GRpfaA]2W4VYKr_/R0,*lf4UnJ&UA*<Mg8%5IP`mQ4CO:1*-d0IK*T_P)%6On
%+pIBk<QBZ$5D$PFU72kOJ8u5Ylo><563+lISc,[EY0t*7UUS>WlC7ss0r/ET-!DF->6!Uhlk]rj-S#aom"!8Tce]=.;pp)c'RKK8
%YNd+lbn+C&*Lck?\'AW\8%Wn-PMA'2..a0`qI]-L^Gjg]f@S6Y^)1%cER&nVD.MAf_P,ci1SCs>].`R6W<LZ,NBk*!.7Ce%5[(Cb
%@-pG._*C:235m1qHqoo()me*]:r[V^_*N.sB6-W(:E\J1(WI[U\W1>neDjQLT=Gs'%`ISJ8*Zf?O_(f.TAgX5N'Hl7P@766Yc,`i
%.)%qPS%i>E.bmEHAJ7Dj>Rn+#[`8R_SqAgVLjHj7HEDW+Bmg6oAlUgd\.N,)+HN(;T<DaFRQM+=II20TZp;BmPFq!H5,&f>Sa.Ns
%Cd,cG!b]s<lXP5<e<=qbIT(K>2*1('b&)-?79Z)OnZ&c%3-7LX6[ShrT_7aj3O>0J"Z`[a_3Qr&W#t?_CKVm6L:7)d'[Oa\*oZe"
%52Ledbt%NIdBUZ5Y)cAlVp>(D^57SN"r,KT+^&,0[DT?L:RJ*I1G!olHIrK#>e9X!jRu>0r&ha^h[&pq5?ru4k@'T7l*O9N4a7'd
%7PjFG%_L-HgjOAMe>8M"E3KW,+==9,&f0o!bdgC^ddq#0iE3&dC%%DVCE'0f>ZZB%=K6-[W,_=G]MB)0Dn=BT4<a=E)'QC(9+-%C
%'6*Yt7B)K/Hi#%-VP$]-L@[cZ*A"u,I1!:kTVB)CdPj<o/5KB$H7'1<OOr/%/_47d<qM$!lc+Pd!fP-$3q)V7`lV.AFnrNbT3kYA
%E=h#>?f?D3Z$_5_5DjDDs&_I?Z5GcpcTd_V)7RM=oD-GtNPWu\_8H*HA,4+aTo0#.oD-GtTk[%1cK?:m2s(BO*&sJ75F)i+RurBq
%q8`&'/MMcq^><mX/0EVk$m3dX:VcB]pDblWcU!))/E-"\Rj)IMPl*J\d,=MU6mA*9IT['M>41k?:X29BUWjefLtaC>q5o'*V"b&6
%U=2"1lmf1Jn6M/Y!&/)#^oh];Ug1LRm\_ciB8V%lgDn#2$]f0#AMuqE)KDbUWa:\i<Lt`pIXa-i%Le9erO:-s5<-OJTVK]>j*ff6
%j#gE]\Dr2]>ljQ:5CP7bn=BqiMl>ungJ'&ZHN6:h9rcB6X[5lY4S^;Ah&OR'*5^OE3?Z)TT`o>r-i.l+]6A<L^Vl[^)&.8G2o!:J
%)hl2tL@oBA5e2j2NhDHIn`H/tG:=<#4Z4dZrdeOpH_-OUQLHI"*r<Mtha)2lUF=9]0eTcA^WgcEOM7[M4AC_9'fPKf4FZ3,"6o8f
%o5kP=rpjJ9KQ+:!7jET#B<L@cW1^>$N%>qRfjYFVpD]0*(9VKL':N3t.Gce55=#Zi5;@jFrp_o\^rPOW,<,&?!oZKeHf+'t_X!cD
%Cl^EJN!'T"!;!oH>!cd.H9GP-lHj%nG/WIO>+L(4$eg1d;;<A_,:t<3-h,+Aj&IW^JBZn@1E@&h6ZuX@i+cVi(6kr;pVe]+L_[Y1
%EIBVRGuWPtiB(Jm>eJoqhW!I-mh(s''XpRGAd$3M*"R:NBB<"15Ft"c3TI,XO).&U^?sP`\oBa3rLg'I+@Y6AJ5\ApgHhfDm,@@k
%A<2dR#p/=Y.I9OK;[_Mk]-&[:e>8b+4L`#%GE2l\l[#/e30Xke;W*K=?3?f2Jq]5%?B3^$?H$eH4(Re^,IaiM!d$[5<1knc&XMNu
%MQ8j]\t3\b?Zt-5RJ>W^>$l@Nf8eV@GM6ci\uHiZOM_>/HtXM9Q5L,A*;`4BZg$MXi&`Arhha?:rBfK>o%s-Hqe7;?Wo-ua^Xn(o
%Rrkk.k%iT+HfK]7&+@d20]!aQfuSN(U[d3>P7)W-+2Z25_L&UN&onVJ0ft!^7FQVDI_m-i*\O8_L.kCXGdsH\2`M:B$Zt-Wl^OR2
%TWu6u"pj1<5reW8+f^K(ag8(qf[]Sr":aV/T[;=V6[F\;bYV@oOq[g(%n&g$cdVj1"^cr;eY#>Y<%ohEs*-*CW,W3O6T<<!KUESm
%"K8@;;r55:#>,;"ffR-uRg]n?8VE`E9o]6Ar.56+JJ:Q.2o>d)Jo0#/YNI_rcHjT94E_dedak(P6QTP.Y'f)gH2RXg"I"5[a?8)'
%-lbu@g;pp8OVT]-01:c>-mJ9(JRi\<h>h(ghoInbG;*.G@,0PBT$YFWUX\,VakgD$X3Qhrk!?^Hhf0iK,P/plj@gFT1=%[5AoQV*
%,P)o*R)+&8SdXM-\e,)Ej7TRYdj81WQ^\X])[Z2#.\"U.gi!]?_5;O%3'?j(ZXF6TS;Y3Mjb]Y[YU4LdQQY6)_]C@B1]_/'4i2&[
%h,f&*1/!EFg=(W(5K.s2H`i-24nG3Ogu!dTO-fkClnL#9<a\2C0W2So-R>!9.Ot'bbFXZFS*IN0[1SekKor/l-;rtrYf.o?!iD*V
%C]Xco+oMXWk:-2h3t?'$>G>ZKeFl]si>gR.<3OIQLVWS#]=AT9n4-U5A(Y-1HKhfQ&gr$^H5[kE=cdHFr5IEq0GZ]?p1cu]ZM37O
%#a3/)7M6u)j46[4,`;g8+!cc@oE<9^-+XQr,J.th"mb)"&V>KTKuodEo.KY)3eSG'*4:"STKMDCp=0'd6$]VC1]!b,gD1(Ki"$Qe
%f@t"h,Ub=ahK'AsH'[afIBB2qnc6d``9$Y6PS_2GUrPk_qT@Q+lnA6aTnd^J3*>E0`6Wefj>c\7a2[/d#>5GiB?Z]dBR846[,G;Z
%XOD(,_js7#T1k>K\hG#]-HpO,O6,Atj*(^Whcb"eGLH5W3IF0B?0u?bn'OdR0N6U`O;gShN]so:QfY.)7-/'fPb23-/=isaDm!Z_
%1PO9QCA*Be!FNLqCp0sZ)s=heNV%"[Y`[VVf.NT$bf+:rhW).X/h.\Pjq@a('Yj7RbV"+FE6R@m)=3\pHp'OKrRP5UqT%C@;S;6/
%!-dgSKjH(c+C$tEm`mc(KDk:6jCPMuTDaE@[c[0dXj.=2(6T]=<bL&*^7F#inBhi'2NB$QrPJ!`ZtHM_V8Y*k?pA.1inO7=pC?o/
%\ap2Zqsk-gCS%/Fer$JqhQMB-]Rp*^IY!J+fA<oQ*o:be[>sq8;`NH,(SA?T4m;t]R^]AInf*5YJf=jJM_9_sWSR#u-oXV5a%dW'
%U<E_GDn&oKjpWm@e=?uK?T,DOT%Y.SSqCRKLR`iVh$h+%)%1Sb=/^N>S:efT:9X*tY8-2j>Vaq.1:d\%?I-kMk',8!f,F.)]q,u0
%GUDkNfaQY9r_1Q*4I]f9gK&jhl$jN+0K8;X7+hRJ/=V49;i;eO=s5KY`l@JT!cD'FHm`M6'`01nqRi#]_g0%CZW.IEN6/o:2<W3i
%"8gk[OZ./J'\MS\M-HkRkQ:Y:r*s6t](_<kp4:5gW'9WcD,c(7DQFK:gs]P1%2.=V(=e1%D8_!R"1u2B$g_rhb;fPcMSMDsWT0cM
%Cb7?H^co5K*iH:]6"$>>m[>\BUCHS]4N/=X@%UY&+5O&Y1pG<NjInc,OTtNiNNf<f@.:rq-TrD=oo0.1)`9lgTC^-j\V<Qof]P/I
%A'W$;_[#ngA(X.G*+`NMS#A%thK*diI3B)Y7hOD:(=b@$:(&loqs(PmJUQK<D<Sc!\#;K>=W:4GT3G9%O0<X"^cj[X0OeT=JUME5
%I;TWI6O*7pg""q`gjoS)C]X5iWnhA6$g_pR,nG1n0S+Xi;169-:X:'g*WP/FO?Z]PT;+t@)>s@=m"=a@Zpu*W&!DWn7$k77?TW\t
%SFY?&m0$_T)*/u.gW=mM(kPSnppn5H+-Rr1/UjD]M?pl605O^4PMGh&Ce$0]<u&>ueqPseOO*TC4a6Vns%[*NL:G#PCqQaf?+iA:
%5BKt\\>S'N:@?8:a-WCFk<!+5Bh2gq\Res0G<:g:P<,+M3JgHo[XaFnXRF@4gcNc+s52`K%!MFghe<2!*eQ-G$g$L&*W#=kdV4:,
%s+QEro1n*\Se"!6jaS8FbNJl>n=``$QiB(9.H/o2rEoPZ=3oh%s7l<t]_jF)DS+KVn55dX(\3f#]c!4"\/.'5C$`$2MnHGV2#Vn4
%B-P)m:(/5nk=]_%amLK1I7(q1NS.a:;kZe4I_h'4Zk.]Z$lAAGOrO9BWOWQmE<h1)_?h+.[/E*A"">HG/o]D!+!9pdB^>GoB7D^F
%TN]-b,lLQAOL.j>kAXBN,V9F]gn3%j[,>U!0aG:A'9N&a5sknR&h3_skcQs6$M%eBoll2PM!j5tG=[`Ng@q\8LOhW.)dRbW,gA.!
%AIQS*L'`)jmi+a$n\-=4jX5G2SqlZ,I^A9M<m^Ld1"X&/a)QYt-82SiYXT9Cj%SdoX)*FP4AabGIm?IfQTLpS`utq_K5NT#`r4Q*
%JXCk>:jCGZZ(Rf:M94:m,=l<0"U/*)%+'QWi-YsIN6$A+5pf3#'Lb50'M3X,o$q!*BKj#_q_pE0]P$-rr_YrX>l?UMO=!:en@SNM
%jEqBGpFi>A54#t4p>49YlG%eGOo)hA*7FZqeF/FP`DhUos1(3Rqn;_7.\"/J3MV$$meuaPo7W(r]a@&r$DZ)<^P=^r32@^3UPecY
%s*!bB*Ts#&UOD7orpH+spC?2-a+Fs,bp+\%&MUePTJ2id>YUlaiV-F'"*NN1dIiHp$4?aJ[g;gc+o@>7?^OR\bf>E?f8+,GG;.No
%]^A"GWlJr],L[\sc-6.gWGlWL9>,bVI8P3m-s+_*kd7QSgp+4?e'l@h#s57$,.oqShNM-6IDf$/.']\YIioK@nH]p[3`$q6YL=I\
%UJ'lB&k4d8`Fr9S_sTu^jWhc#@GuGPXRmBSHfKV81Ic<Y%3'M<1LO68=0FZN2PSAK?TNiP'&k_te-1FArrXCubMaCagI(AtM7X5B
%S:k6b"IEOPG7bmQr@FqpNL=80KK/[CHhk>L.2Olt]2ut.lL%ep20jAZgjDj8kdR[()J=;C?`GM1/)s(0&7LVRmr5_%2%UCF\9c<L
%$6o(&':1Yu]OqUY9t*s/]5`bQ)l'Z8hB@I;TB?C2ZW=%Nc$;`$)AA=fe&2@@iki41HbVhaQKhcAf#6s0>HOhBH8XO(9D[K1C:]'o
%N81]+*LYNIa\K<jG.6`B\kL>NhUObuj:]2Yn<I:S&94Vq:>T3\LXm=U32IW2T=lH?SpY;/RP`s8ESg_>13)VWCMk)EH9,h)FfUeU
%GmKB'/j2:!g>'=h_4dF<:K,h_/0sk#DE6`XDN'<&Jtd!G$6`;nSm,;-;(fE+lu"QfD2')bhe5b+KQZ/3ZBuDTp/fhfkBDab1h9Iu
%l3V^*<:#O63TbgngTl<V<KArT/,k?)dg'm9qje)N`47TQCN$0HWm6.moj5h=`t-r1EQca0p/2uaE#I#&B0j2]nDS@qM-HQ2(ph-?
%!m%%.;<>du)iQXB!W`,VJ5Pd.kA.WW_"rPYT$sV]@O6F^@"$=iVGH,$H^u3!DGN#$oVsE_:j$W8`]$W4AgbO-A&-'+rk:(Ei#h)4
%n7Fk7@cP!hG#:.BE(`E53g/q?jA5)+l(,FND0$EShiF887s`B0F&KN0`3@p;a/nq#mX6n@Y/Ue3@`YZm(b1Ed8M.L+D^:1B9;C96
%QV.GWOPS1fE9s3XrRI7PTNlLt,Nq'n&p1m%h`ZpOcWo5h+<DlTmb7Pg0iTJ-&=45EcZtSUP5nP7$5$)L/t+99kui)rl$K;e*G=Q%
%mPTs&%UR=?8AH91s"Q?9Wi/u`-V"kTl>l3Ois;iL\A[;5^c538"6CoTru1*?0/c:OA?dtPS"L""VW6HQaA*,%-L.Y\!_u#Xm'OPi
%U&/Nc^38u$Bg#>;Sibg.0,eBec(H5:?C&2>)0WfW7.:gQnVEL15$1?bfQ]ec5BQ[^6k::0`$;irSUH/:#&TDqLN=!VWkXY6YjmO_
%"IQni'#SmlF7nlU,gd>Q0(F_u46`E"`-umX",/#'dF[W"Qg84:&8?X\Z9hn`#6^+\EEV7f:Vr&&?<0U#1STe"I4d#Qa$bFFZGPIh
%oH1WF0Wa#HaNFp9f?bVPXO(/%rp43M4U+m<XtkCkC@XD/Z<@]ViF2M_<^U/;BSHDqhKJ*jV@7q4TtgVMbW?fV^C(Rc)E0_Z%b,Ae
%JjrR;X7-oHq?I"\N?G8:\aXP`nXdXQ@;s\:\-ifff"C%O__M$l[h8Cd4`<D%lSG2M5Ye,5#AUIN%m:iODEG4"Ne&A\6R?.On9+GI
%iM$9gLLXbqU^2&#Tg(epaflpA4:Dnl3J%VLbmncTf]`G/TGJ[Ghfe3pVtGJs@K5;+,7;HRD`\@e,7&eXiNPi\H/W2AHO>OgaS3I:
%d"XeV6%c:jE$mfeKng-e%ScA:kgf-UL]0EI1&&:(qS2OH5<?eHMXZRbO[<B!kg*.7ap(KXm_V?*2g]I)oGeh<W$g)KLO:tm[iP>@
%Cj[\gc3k-f&!%Z4]I?uH7i$.(F5(,1>/9UD_`mN<*;%*8.)d(6d0kL+00C68k^.gf&&"cLr([Ur^[TVM[_jhg$>fJF%g2PbUUflu
%O79ZAc,ZF1%`@M;:_t/_DQ<GRiM$9gLYTH':kAbG;5c'aQjXGBhbuMaKnks.f5u_[JM@75Gj)ntkjbY`HJtRt[bHcS?QS:F6e>@C
%[iP<]EVmB;d,4U9q^Zc1YlBE4U!l^FGN#59*9e4Wlu8p6Ic7!8'K;W.5SkKQ9/58S__A[;Knm?jE1X#GHe!n_nBaC!hf0>bpk=M&
%DD4`:%"$s,,E0mP)07?EK3rle^Ur[LAuH(JrHJ#6oGm/56V"&.-!^.jiF.PUk9qrF$l)f(r.Tq*[iLWH7WIDGMXPD;PQ3Lk$P2'Y
%JpBgQO>_t(&,f:O=JlUXiM#pRY5ZXr//u&+&,f9Npha"!J.<ZsbAKBMa6O.X$)::X/ofY=RFrnHZ<#cWXVF>BA)Q2l+-5n]:Nf;"
%RJ0i4i;5kpLMIkU5S`Z%gZ>iKgu>M!V5>65CY#bl4f=cmhaj01WaYSc+kX$eGM6o1o+=L9b\fOgG;q$_Y!98"#`e2-:EHV(Unua6
%4S*mNda\!2DJ>sHON3[3`SBhX=(5e%HUHM95?siUrn0!bpZ79iIX>CjbUrg1:*1I(TBb=+2g8CfXhEj,9%W=@F??YoDe[N:Vk4d+
%Q*USQlJoO'W./1"<o57-ee;6WfD,1+hWI4R#mZeUX/iRdn#,OH<-t`U*6,/l=(`l1fe$_!m;?PanaeJTV`!qD$Y4WVW9MIDq:T=A
%SU=\#/+;A^aX)(A9e(#HD+LM4f3N+6Qp,ArTC]DV:@;kp1\#.kTP?OabMBE<Q[#*,cHKXlec#EU)1_H3e*c!MnI9mA$$ULnia!@=
%pRh$BY9tna<S.JCP\jJRi#<H0k18/XGMW+RoE]2NGIlU2-f_pXrKo1_<0&CZDpMK3)sp=5>1)3sn`iNU'!L6_em1(:2?&eSBnr&e
%GL.HEP4A4nq>$73=fn@CNgnCaD`O[,C><f[$f5BBBY&M1(P!\EkLLM$``1opG[%1SPP[cV%pPs``aPPr^6\"9mB1"]Q,QXMiq%Ed
%C/'+E4kEfhWaB)iYAYBM(TM:(^J292MU>Qeq3f4,PrFb>Mu3$&C"N2_F2,&qGBNSCgq:;V`kS2O+4nt$PW2*[E@^l[Rr#4&9Qq89
%)kOXl:-,/JB;gR1kjg:p3MUK62UJ)L3>.@2FO*\irOJFBJ"gNAY)WE3Us6*.18R_,+G]#q9?CXXlDHJN]sAr]Aj2g-Hd^L3-2;-K
%DV8jD?BTfBT7"$fbju>dZW6<WL4@Q"]^s[pgp=,BD]IGL36-Ml1&GDe3_]&ShR/76+AK"fPd`$l,eQH;b1lM6'gIdO29X6?H$f2u
%Ir`C6IsFiLr]Nj#,-R3`"fBD'?Gmu@OC.1;AR$L5,H&9:f@:nsF!ia?`lSAratDOUR_X?C`)4ikV4(?ro,?I)S9'+R,Z`M4EA`[L
%q##6/Spm;95CS%80CJ5GcYQ]e#7:Xh[1BaVk#Bu0'&07Z!CaTA_kqb>A:N8F\Y45.-`^G^\%28+Z_,@nk&'3^_X3M'(b6+]O)'GQ
%3?q1bRn)!3ft#*[]ssN=n8^C)Nf?q!.H"4r.Uu5(.jY&S!FJoP,r9%5^ESS''E=q5^M-Z_k2M_Yrk+f"Im1Q/dD*rYO^@mdA.#p0
%0S_*e2=lfF<W5;SF)pmFo/eU:5(Dg/CMqhmUJbPV-Rn_pWQeC+J`aF`3U$fNGb/KEZa<<t&*>ERm_'A6+`5i2:+)'@^HS;42cm?\
%2qe%%+luNXXQ[L4L-O6ohWUd-I!JX=-?G#AC%L7<a&^m]QS)9F((?/MZoYb)oNZ]7gtfQDka(h30'^XhfK]XJEg%@fVWMG!-C6Qm
%AnMmVRu4Y"[IJ[%<9IL@RFehm;i.q`d=[)-i_TCF#X);0`3E3ho!D;>fU^Z$q4@N<G@joaK=:ZroG;g`3lT;&]*U7KbT`D2(uK&_
%c+(OV48<NE!#/Fc0m\mEagR&k,b`g86lN#L1Q;[\S"XaYqYJo.M1`hgG\!_K/t$a_*bUh<+oQShE9BcZ@<mO`*nThN&ASg\^<O1O
%fd'S&k,`l:l?oE^O'cm-H0Dp!rQRf[]MX8a(-s9o\QsIZ>d'g6C28Gr`N=gs*hWUE^nD7\agCr,@a1SYIQsQaQ)HL7;g"s4d@]%t
%M)8tE\@^7TOJ!g)^Ht8X>^Tm;KjQ8'1YdCM8!nXShts)nOgFbWg%;"Um9*!?%DJtW:E86Rj2opF)ZHuR:FW,-qIa:%E$:gaI,'S)
%B4ap!acl7/r:DO(^TO`t+-h*9i-IJVBX^q1<;_"G>E"pHL4,Ne)QUp%8\@6nqlDaF9Ac%T8^uVNB)-`DF04u'H!\+Q3PAQ[?i2cc
%gpo4aOVXH-?X$\cV(EA?gN7NLHQr&9eP*gH8a'=c[F0.9<I"JUf%b0#Pb(e-'C/0W9De&<7;]@*G1&B.mBfXd@AYGQVAdEsHhhi:
%fGI6Nok8KPW_\Lje#eH1[8;6:9n.T.o-UulAqM%>,k=WMDA4gkn7hJ&9uXp=;&hF^'V)YXDi"CU3lT+YdIGpXWMo./rDn?=pTJne
%^)`]HSZ0odVn'4Sqi@XaqXh=(G[#'u\95GsYH.!VGgU-&rqDM_Eq(uql.ER&e[`)S,c[&>q'\BPD+e!eaJh10@U]:YD.0bSg\@;0
%4k\USY/tJ:l^@G*c<%,H.b<\jHFAPUV,j[k(%&AdVrp`WgKsmuE4F^b**!ZdcW:oXkf.8sB0+mNdnN&Kf[fpWh$7iiGVsm7#AEu!
%il\XA@7TXiPUV+.45VHf:7[lB=Gj#j>PhO#mc2Rc*dTNt`gRV)mZ+1XCIn'BD5?1_\bX9jU/jda[W->K^FnL9X8'(LJN"\k%]h[O
%D1P!MI@h(XVC/GCZFY4i\%GXclCQ$TT8fV,d*mG_AMZA1a4Y08]/tCm1#.f:\E:$G8\H]sn!tL@7,K6VfkSujAr>trZImd9$TmNJ
%2+)0T&1X9Mc@/jgrg.ceK_to[N5LYnBNaZ9_.,I0fg+BL=+a@-Yg"e>gR&l4JA]q42Vam5h#&'3Bhh$5#Skf4>:XY[R@=;\Y`Y4c
%[(Eq1>Yhc'[Ir.8_btJ3WUI!fRL:pjgJ[cSIG9!1>^JPN/T/!=?B4[SbMsl$$Edsoh8tZ>6fkD6T?pZTVJu(gI3l:`f%QJ5bj*uL
%_oHBO7E^cT?YSMq0mA`*BZ"^]F>f>jgQ2%!bH(>G2;eC$m>la-^UI#5;)Oj)nk=B$[PIhJHCl.3WTHPKRgf_Yn]EqdeR>MMS4'g)
%pH>M\Nrp;P_W-&()l%Jq'!_+,.oi.9i[^jm:+olr"of^K/ae(Zp/*?H/3JnA>0V"5AI,&G%#"QXM7&=V*5]/Em&E8H4D]cdb@Y^/
%EhiohnB:)6#q-aD;;lFj:aT_FgBdfoh5tE!ki%hr4uVc[7<WM5>N52lEqK11a#YfNpRV!7p"sKs(t7Xt6ZSU_RaZ-LeCj0?B1+L7
%oPusBL[dO>n8Nc:7uN5/L41[jTS6n8OSlYr1uDS*/'?F,>):Jtf.u14^%H7@,)qn\b;8dg<*GZ,()MiA'gqgRl]$rT^fG(Rp"T54
%etIGqajI$_*MdF22R)mUTs4&Ie$q'.ZSNWBC?rXarg26+Su$=`%pB=th0h*s.@\na8PAirNZ6#bK=(Q(@m3t<F!1ros5MmG&R.04
%Xf^\\UghjB^4s6QbDLCF^IrJE8>ihJ;7Xq6X!XqdAr;A]S@N&=43n+IE(HNX"O]hnnVKb#o5)36k,-VENcZA,X:M+hGrFS+,F_"R
%cg^J]%F810lrWc&<:Nr(:;Fblnof1.Suc_(Gj;96MuT<(V`oPm@$fao5'C)I^-M%9MC5"QEqi1;',O[/o=Ogf;*,/f1P4"7lJ5,T
%dV5KLBT258@":C'3$T8\4$2Y$H8(D7>LV8#3g?a,`$WO[&IdX*%9%c6T%h)3:]+oZk4XTi3Hu]d5Hl!=C(C"ABuB?qrhS^8G^i6^
%BkV8+D@br,CUDflo2Y1HlrQgTnXlnrQZ:d$;!*3+H^U;T67mYQ#eT;.ARj+"P=mdnMGZjGbM<1W[dm,">PQ9'<.d<B[eoVWagd!"
%f@A^QoGQdR/25Le^NKj^``PBp]3de;q"5KH_BZg\T&StC`>!GA=e8Pfb`2S_$2aDDdq=*3ZsGEc$8KlKDb*L+e;5hCR(V/DGM3Xk
%s//?D12d-Ykk?&1rL)%\6Vl>FIrt=b$TA"Nk]=,s5<8S;(APeBDq`QfGkB,)j7VQ\NkYC:1Wn*X<e#<N3G&KmH18/A3!)bok:S4B
%g5l:BQJCK7p6hNt9E^iNT^;!i9npp>LAYnokTuSA2CkZPr&W*S7Fp%d]dnGH`QMHDr'dr!Q$b^aD>YB@17kD614EPi^H(V%qGu;2
%g-@i[0Ah.[44jqPXP)2GOb(:+h8n&kZfI@EmbHJNcDU^Y+GKZFYjEiW]C[qT,ec1B"9M*D=aB?'?,Bu?OH8occEY\Za-2njVd&N'
%9$[tS\!gS"A6j(0[rsW1-J1QodZg&j+#eO"4u2B=<.?QMSUrARb[l4-IW:2$Eu[ESJbMFSK!DkH2`$qfgY^kt\[/0ra6_"1l+L=C
%f=#X_5oK_Qh)%4\-]Vu%e)&S8GLP^P,'RAT-S/h]hhXe]MpaHZ@85k[@;77jD"`LIYr`!$c6nsPR+rZL4/(:ej"K/ukPO6$m`=Yu
%a":OF],s-s6!ZR?SRn?g?9N<]dNn3/;(T**3'St-rS[$q<I)'kVSGZ1cg$2NL\1AF$bG1K4EuI/k'!M%c5qBh0IT.@h[-JV#@:f*
%Z+M(Kc'A#:G<kuGi">2sJ3^nG#/+P]LmK5cS_07Q+>X*uMmnim?@lkl<uF+U#AON=^25IM"#U33TQJhQ@.VAe6_2GNAqkl&".ReQ
%e";S%*h2:SpRgNlL#?@)LM&Ra%KS[M#?3UfoHp0dQO&*Fmt$qhiTVeDIgKb+g=UKU.GPW?/poQN)0=*[[,K\&^*u_J@(%_5\i%FG
%VHZhu>/5>"[,EHN(XHEhlh)1#>f)5g<'&p@?M<NT#AK#k8FpOs_G(CnUkS3*KGW&<TZSK2@3]Wn\Y&B@Je2Yq1,u*&4)Z"b&iS/B
%CkrnUmN"jiRJVgPMfa?DG^mR5.%NjV@*Z#J&#.#)Ci"F3"?n("I1J8*f[ibU(?n-Ir`g:V@L^=/dS;)H2s;G[G%B-1<G\%?V`:K?
%n^$g=q-/6:Ef1H*[c=?^7#GfcEBq8R#e?KaK<Y*0So&+a/Oq?X.gGYY"I.$iafg%2&%78IE21nW`Js12&k>!$7cp+9<@m9IgBu<]
%Sg?+Y3;O[$EGj+M*Qad5Sg$lIA&3WhIFIO_ff(_<L?>(g>[#NeX]Kq4.^QGhk(A@JqglEU\?KL-=Mr\Ac]jjJr>"p,.Et$6@MMu<
%-2W6<Ef'u^nPsM0,t[&M)Gp.Kf=k7R\%<FKiC+]6[\$uJCKj:A#'ghUql_Uo3E>M0R=O<a&f4-ES`0+a]Y,Q*8P83TrcgY%8s0"D
%d%@3K<^ee?;8I`g;n5FTTT'/86(L[s=?Q,u%N.u?9gN)B@l9=q+=^j*qNuLXHl/]TNI#Ida)0YSpgUE-Q0(b%@AYJ>,#:"4o'e*r
%^`kEWc9HBT]MM_FQsP.mHt;tTlf[Sn.ua;:Z>hgYI5VeZM:ZMn[e!b3,?=P*Ib@M"K2tI1/<+i?0;gWH)s?T\d,3"+QQuPAp\Gba
%(*r]l2K%&^ia+p$>1t.7Z136ff?([60"9/b1tF97)S+W3H%:ROcdL^nPD*TA3hL!&HCYitrW5S\Ra9hJ.h'u%!PGA3(StutD0J'K
%b`nHk(Z$)e(T!s&m8o@`AaB2G-![0/==P?JB=#O/Z?qo]iM,P\fB;@9S+jNdqA]1kh05-3Ak%UIY@H@:D:a\a;k8!p]YE%KpT>fi
%-MjA[`H!_,J>uArVPZr3,n7QE]WZ5BDS&(65q.$)4Vi-mJY86QmiDit_E^qpCg:I97i2M(>sn%bTE>=K2ZNNofO*<:cA:TS>V;=&
%rM`lQ8+##WXV!paB6!:Abkd>N?Sj7W;S-*qYQ!9.2ICsJWf:n4+dQ7q/*uW`oO@L$=fKD=N8C)4n3##2"&gLn<YOD2V"*ci\,=h?
%p;H39\bIN-X>ic^$$CT_7$D(I-+WTW6mJO++12X'D+M^257;*`(9/4DQOX_r]ld%X`Moe?j6Ll&rjgP&?E$gK$#,@:nm5IJ=\lF8
%GLuQZSX&"(dT*m.][\Vng\80Tn[<O\?<UZBIV"GR;&*`FI8H`qj&;J9>L+_Dna.Q[SkGE/0H1uZ]Ur;Cm3T*DWGJc#0^Z9WMt9;&
%g*a/Zc9Q4s'V+3i>S35Zb<_P#+HNN32O1F0kEVt48rCQgd8fJ*o0HbYnV3:^3)ROKB$.<6)*4a.SEiM:HRGU5esbgKKd=oc0sc9(
%:$*o'o:]*Z8MI5BpH:VJhlW<`^Lp/R4S+CYpcK.f_N^==@ZO;OOh-W+gM8Ie5BpOaj!LT#@"*.ZK<+,g_.MI$\<UL_OO(/9opE0C
%-62Ro2RZcs3)dVdAVqL#1e#BlZ*3(M/Jbblni11e5=s:$0.e(=r_DUXfeQ-ZV"&)3QKuC9?pQ.Q^2Ku&^MY-U58BL\iq?,*Xbm`T
%=i_SQI:@]l3E71o_H=&=jui%!2M$X[,A0?((-T&80TaB"BLH%p,[2<ZR[ff0/0uqbgW%BiG.=,lW6DPP)n0I"#3217HaS=26)GoV
%.\Bb1M\Mf`@XB!I^/n?c]i)N!Tm@Q2G;5l)=MI\bDa/H,PSh*%-pOuoP]s3rYB6)ricYch]M0'c\+3MUV^YH,Vk6m;)-?F"\Gi_\
%>UXugMoEgll[d&Y'm=AaYMt6Ia[OjNCZcM%[XL4-Ml9Q=44\`NOJ+IZ>.N"I*O'ddZepXObCY(;bt_380>H)/Dfer<Ijc&tj0.dH
%kP$d%0Crtt,[;O[6nsn!gG5]2"ViB.R5OA**FpJikp(>t_S]5lQ71.?7(n#-[&^IFYplNq>uLu2abe[?ljR0f9j9>\:@[?kCWQ0]
%dbLHXG4<=E3`?t^Su/ro1n3p#-;0dgIHfBt9qj\J`FGlB[']j:Tt=(C4@3DdPisG'V`DXRfqaJ@M"T.Ih6XX;SYrUCQ<YPO9(hRD
%GNIR[[8bHbFb3S/MnLt$`DQMeWq2LHN245TXkG8Ug9IMY"c4*C.n?nYq4[sZm=VP&3O=E1Z/S'Heg5(P4OpE!]-2<c@Hs'p:K9Mq
%kb`+\PS9(CVYC\UBW]O58P$h$R%EZ@gq!>6]ZYrqqUYcY)93-Nj45C6A^;g%dRaF^:4,*&gN:M-(+**AmIMf=2LhJ_%TLKh=&ufS
%"4cP(j$:".?7KrjG%))FlPYJ:lg*SR91Eca]0LrB-A]o3E3OW&30+f)N/ZS%$BGhE3(Z<OYY:8,kh&"s`3qUK78I49qnjF;,rtrM
%4%*Y*b*Ee>(_7^W4a<K.-6$C>14`Yt5Kg]22*?ri6Cd!ph"p_)8U/9ZdMgi#\\#<H@Whf5@Q$<AE*ITE4+SG-oDO1u=onRU2p%V%
%Xqna@r)kA8So+efW#E_0[eEqe&-ktShjXplVX&H1SXAM"OrQnX1mpo+Q'(R&&M.=M%mV"/#*0%nBn<;SRi.(4YV.^AVrp<#dNKMq
%=trLPZ+J0"%,2>-Gg8]DmL,M/n(Ap1Q0<^h6NM6<!FmBIZp,EQ:c>;;LQ&G^P+$S.5W]DtK7=E0N-'jf$"/:ZL4rZ#ne>Iegk01Z
%+aVUYVGkYbV3j#s$%&7d`jbXKTWZM/?#HsA/fq?>V(W"<F/$STBn#Hl%%r-@8B\LEV%:(K>Z!gm6_W[lAl+_28BXQA2T/f#Kgo68
%)<N4ndP>S,[+j/t%gklXUV3D&i$FTf"_=bpI\!0c@"8!e`&q;##8n+"*<I"T)SZk]_O*H'9$@nj%DGAs7$MB.]%/%(CjEMOb%[u"
%^:J9qfg]1C[#%!%/sP7;IhC:oZEKHZ'BX8P=`;D7$lb2$aj*Q"`]ZWV#da,+4)(#a]ueZ5k@MA&f*&e/d:MJeeT`A'*FX+t]F]<6
%kT+)T?IPqr2Oj,bfm1X;ne4$hm(Bhc?3tpJR%9ReRX9YCjQNo@>$Rj%gqs#%k9[8#8C0H8m(D[1qj&SdGORVk_H=OGLSr^CnsnBq
%B.[-eVZgT\9:N=hQB_WD#!@'1^+oWjYCP@617dnT5ib`5j//5V7kAHG#Bl8.+Kh-m'KQ'9e?6DtlKtXK(6V(8X-8I2]Cp7DfO*D;
%($b)GiLY=>b'r7R(X-<lP"fm8&#r$!QBUH(mkLZ#\rbB?K3;iYoN^6V"'5+AbC/SNB82]OG0XhGp5\"5S%cd,MLL:5T0e%qcm%,=
%qJ4;K_M^7=9Jr4igfA(=N=#A:'^&3,B:_ngN=(0lM*@Lt+.ZED5:oc$J(gj8f,FPJhc6JIjV[qd6N>u9fmHIoE\U#7d2tFKF<;C:
%Z_V\::;lk2U%4FNDg.,If5@_D.(=]H(<C.?#Q#<!`RmM9Q@;/s(Lsf8SYRW4*'HoUUXgeQQJ#q0lhJk1kpj.;Dl_RZ`b5gJ[8-+c
%?B(L7@th7q&75D@E?@<&r?]G6nW3!c`r>fPqs2,fKb*\S0`B2j(qog]?hFUQ0OO6kgU3B?DRIA36K6^1+iSE^?9`2t9"WebV:8UZ
%VpVmoiud+7XX\Z[]2:5rI`DB_W-,/G(\I$?]D9pS,\!1"7LbuRT:oF-n*p4(Qg6l%J;Gn1*@gMYYYkBTb:T1_nTn'cs$b`o!,p;f
%FmE'-2ui?\d+RO3e+lM9ZWXKk3>n]XHG>Yabd+-re\Vu6.f+#R.;6.uH%gFLgoXU8Id_[C3E0k5M3F"F-=YS.s*rbp0l>&th2c/p
%+]^/o?)tn]Ioi@)ALc6Uli.n[#.J^8'1Rj"Tc`O#/h(HK9cMcuO]0@TP+jAgQb4R_)HgY!_GnN^^oOShs8%`Tg-rdT6D+2iPGQnt
%m-[/s<Q<D'e$6[Mjh-o1A%B7'I\Mfm:=?7/pWYqcAP&_JZf4+i=C6=ERb8;m2;I]-O)h:ID@[V#n2J`(NrR;-,&W"NN!T=lDIPLO
%V0,3]@e3_[S^1m_r:8OBO[`W>6QbI==uNG?2khVKfR-Gf"j(C<-tnt--2KJHldMA,2(`TW6t?d0)]S+HaC[JMG0<ttCq-Z0AFSmB
%8j(?>b;bVY)#U8EG)a^<_ZZ-H4b4^!G2)+JViL7m5HEus7DDX:3j7X+qGU!ZH1Y/W2\#e4TA\Et^@p,oJ&.P[DWsf!&U_TJd^sW!
%R.I!V&eO_X3$gRCYGc.aRoLn&oX(\j#f$cbGMO<b#n=PIVK:FlCa(..8?,gU/'*P]&L$?[5sUS:+H`LjTI>rMn1*+5%SqNT&hU6,
%3@1QD=<Z<6Oce4[osCHloHPTOPI!8Q9U5!SS2_YmU5/j^)6+9O0gnHdY/J[ZO]@ba;:DPHCU#DkLqUsPH9PqSBpF[*2O@-NAN`Q,
%nHcD=#mh/C(k=SFLo-"9&7eGT8j7)?8tJ@;8S^("E`mBk6oAGZXJRjD@>d`1D9/a"8udbSP*[UC:,GgeU,WjDTnnR>8W1^?d*,@W
%aS8+Zcr?@1p?9[l%(1_R,Tl1EOuuKaR6on$(Bu5sI3P[[,%^@#ZsZ]V6"#:fHW!V".>e3S;@\tVAP5U*o28bUOJ,!6Wa&,%VN<Jd
%7"L3[:a^NsEM=[KTREqWR]]+DSWsUo\iSAuA>#*?AD/$V]UW"KA=Cks4A:!^6Gauu$r!<P;.NPK=1!redG@o4k,XV;k9O&cWDo;<
%.uC&N0icA#>F0/48Y\FfNg8[&@S7CJ,<8UTU-VeRW1mJ"P%;M\S;&q1aB0`:a^W#Z*)j1=PfO+AH7kaINK?7@8P)rc8_(7lJP75,
%Or"<M%UGe:C;FZ\S.a:Mjut(N1",lF/f3!82R.G9>!B./O=<Lh17W;0D4EkZ6K/-a6P,pS%Y^&\'dn;cV@b2UWgGc.o#M0cZ;-p#
%jd;oX/M3+0C[#*\:g$@i[nH9I`PdTec<&hq:i_0AYZ`*9'tS/4mT2bG(,rNeFK/1(dFYZYAB.mQf=[\E.OE-XnM&oJM?sr)>d+E3
%-`SGj%BJS:1t($MC)X?\>04rk9[>arJs;(ola@HbDkr@T10J9VeZ_\e'#d7q0Rd++.MGeoe;Dds3A"jA3U@5a<ih`jF*TcX30d(Z
%OL2B,RBYAOT$+19(^CZr:e[)Zj+Y`=FGV?E%@b8u1t\F8frth[d)a07U*Ja34oEuLbg9AE$_,K4-$c0Q1;sBR0Q,OE6_0%Ek2_V$
%Ojt_W-4!AnT]\0(U#O"IY/[c1@]>3#5*,>rVQuA"eh5(f'GDk2pgJ4RKp!2$L<[h\N4;h=)cfQMaS_!.WC"^H_]R(eZ>"C@,]&mD
%a0Zfs'4.E#0G2;8RrbNl]VtZPMfXbiMWKZEoB@g[mDa1('."8@Lp1=U?uhF#QI4F(8ud&+?DNrB&]PQTLY>.[75\P:3>0MDVlFIL
%l8d![b>E,>j[NTGUS#"8,!!"5&RlY1alA&@.4.lEn\sXa51*=Am8t+-<V(=c;#pVR:PW<=q6,'YZ)W?SRb-nX]LX2cU57ccbsm9f
%Wrg:USrsBo5_@8DmD68&Y^,&X#tKU/@D^2%'..15@^FIT_5]V9<MGs'Kr;aZZ8M=k%9?rLK]g0D=h>Y$:J?S#iJ#NGKF"XLbZ0KO
%3'7l**dNqS/$[EF*\<?`:7@OU&]4^?N<g1u"ft]qV[rl&=F9Bd*iqbjF&]r-Q#,1Y8/)^a@^ogP&L##kJ@$fR4cTT"YkI!Z1g#T;
%++OR=_h=@)-;;?s^h0@XK2hqb<MCNJL$-:pSEXe[@&];3/lnGH.rck\R:>/D$jUT,,",NJYZ@1^.e?&1!#1=sbKO#s0O]7"n1qrc
%MARtuCdb5+.Sj;\#-?$i@:d_o@WPtG&ZYpb/<:H>UmNhJ_ZcNh#THeJbZ0N5SdPp&@W>hE-)(DmXM&?1"H&$J0ta^CLbN7;^fk:r
%XNWJ/jh/"Ijd<9rLt)J=<jiD,,)*sl.ZF*Z$:Iu2OB/3J#nrd6$XdEU@4=_I%9DUf_FkRV-,MWK,=-r^!GU)k@!NZlCnBA]*is(l
%![90+'OIZ(5S;!>)[R^i$>?K;$-P,5!Dk<sXD,NQ.]f`(-$bnf!_!r%Ca?Np.\NqBR.*dO!#%hU2(_oqL#kS:aV,=3_K]K66%i5=
%C"5%KGp9>+ScT!<XD,NQ+tO6<?Da)T&]P>#"X:#T8?8Tsb7e:b:+RS?71#X'b,Sa-QRF1QK^loKJd/7Wd].$!nhaJ%k)\.O=D#G8
%J-X9XKGQ'a:5!W(7Y1lG!n&PS@3qKN$ZKPe@@7G&"!Xg_QNT(_"H"mNfLR])<PVe70]@;]EaIi3hrMU/,?>%3=<8ft6nptON#sqb
%/6E#8Cs<QV(a'-$NlLu7HkP'OqhXFNjs^,@8"bqddDU"@b)o3tCOiLgB\f=(iAn,&)E_GY7'JZihIV4*YQ-#_9JLN2L)X0R7P7eq
%:Yps8XTU!k$!*p;J.4[YXDB@"NWb94mCUFQ'-gt2@-*3?K/NH%Xg5LsE%G*OCY49cGd)#R%6bjb!!t#K9TY(hI?c%?'%R'I>NHi/
%Ed/cZJ;HjO76;Ib+]!fWF.-BtQRO7Z`,NT9&P3=FJ-<#1>B>$=/-(Q!L,H(ESdPpF_FYFT-=XJmj_3_.2*h.AX<e-G!#LsXARL%Y
%YY7\,+=F7\j%Akt`<;&8?<B33=^_c$_UUJP5uq*<'U&r@R^!te/3jOq;bX!CiJ3[COr2d.e$tj$/BA5MBC,lA@`+Y3/BA5-JAR-W
%'.78!@HE:jLG_=@=)<j-TE%;0%ht3=CRQIj3NSaWN>Wj;9VdL'Mj5NM*nC=j>a[/OZGXgfCX6d;@[SeUP/D<"!>:*>M(XfI2?KCN
%"!hp+>(XSDj2CLB0fcN$4pWEhQ#g*?,VN(iTSVWgN<1]_!4c>d>8GRpH)-h7=Nd#lBs@Xe]M(&B,*#S[$G9ICUiWr&=hos?.e`Y,
%]NE@Eja"+O/n^O3AVu<YEBLR)+N><BVlOCR!bs9I'M=@mCg!>JbMr^r'GDkRpgp59N\s'o=4<H=jB-_(Vua3BR^OcnN<M<#,`2mA
%EW!*Si5QZXTrVbJ!cBP"'9aANfs3_%<mKgoP.XICJKg+]2@B(Y"6=R3Cfs#ac#U]tfs/cdaFYtJ!%5EI0l\Ct=#LEX=9IW+2(_sm
%-^Mf0ac9rMT*8q<AK*!^U6mnPa"&)4G,t^b\sddna:g'Cr:i's/6boU+AXO!'OIT&5S;$c)[V6M8EuYmW/1TH`9&mkNUV4&EC'.5
%i5fYj?'#jO,Z"n8gp3&5'Pi5pY1S%H0EEG%/SgE]7?Z2#'.4bkQH':b;bW\eig#KmVHAJsm#!fa"=H<'<`cE>[n*ech#d29@PKf^
%haO-((_O\.)j++)#+sZc%mC"#:Qj7F%:PB0FggB#,Zu06S3/Ml,)@a-,2$E7OP<ddZP4^9,g4*D,0B,7C]a1Hb-hTY7#D9b6%#pL
%aVS`Cm&mWhpGsF(/-(PrP1:Eu!)&U[$85:NTEsP:NCLoi"(ZVpC4b@HY[hn0)Le/%9D*r=1<.H@=-An!-;Xj8`^V4bX9$b]RT:t5
%)9X8D@`^Ae(8Qlm8E"-;M%i8RYn>(qC[_X:9hQ8aN7I=C[n*gKPQ`LG!DYV2@_tMEGAKZf`You=/%.nQ:&mkO_hl?pV8`e^)(QZ7
%.0CiQM%`1fYn>(sCOd\6VC;oE`bO(jQfH0P(/hZ*2H$2A+d%p&`uQ*&Q7U,K.U+mk8?t?Q/<VR=#D(C0ZD#tu3K[df6l^,],WN(P
%c)YEt!fefB'T42O>-`Z'b6*Hb.4.s2n]=7P,7F(T>,Ek/aD*_^r%3r1C!-R<XJ+;nH'r+c73'?a,WN(PfrJ].!fegm'ZQ8H((-_U
%E\ILq`Is(-DV7QWA3mM&bE`;O=o6:-j2d[t/0N%Q\m:Jc.4.s2n]OCQ,n':WR^OaiamqEr8@#*E$V7Qc:,nAF_F,BICa;!G+Q'52
%b6!^*9i\JjZHSO:.:`HSG`cG:73&4A,Y53`hlCJ6_AojD:b7n`1M&i^=kU#P!h!LA73''Y,\XJ+jf<+<_DJP:5Q3!(Q@9%Da9&%(
%,/j\B30)Z?ct%9dpXLB97>I:AM2e6^7']:BIKio['IUR,Ku?PX%(E;NM,^cA9`&Sc.7sS5QH":90U8`%20$L<A9j^71<%1g(k,U6
%)Q@7iOSVtR0]>U/9&:J5M^5?<oJ<'aX6Ojg>F_&d&]5]k6mRnr%MHOV)T<!.O]?GqfUEj`Q%$YMA9iuMil&ck(nOhU,'d^AR.F<h
%M?HadH'DDF=d:R*J0M&JlOAq)-;qd$`[VSB,HJ_`YGspO!][JJ;Cmj0WmD7W8!ZXP02kQ?LuF:mU6/&KLM:*qR0!PRA/0HhA!:H&
%U<m<u=d:MZb7kU<@^op5Lnp3a@G4eop:sA-4A[Sh/2LdE-<VB<S4GAS,)/$WM+Agn*FsS0L+H"DX4Z`pc&lT6"AiW/H\p`.M?sqN
%>d6mho#U)MkGpp4CbUo$Nt[ErbD[%#8!XAe02kQ?LuF7l,*GGsLKRuP/IN66.b:J`,KV]F(1r`;OTK)$M3PY4hUi*qA9F:5<AdIC
%E%G-5-l,IAm=\js=Z(,ajCO2T'QMp5;4u%r0^UBsAH>Gi#E$K`2/QL3P3%83M%gUNi](ME5a'Z+dT=nb"XI5>Z\RE^aYI?AE+HM"
%]L4Jo,*$.k$5?V`-@Ib2=[8,2EPa-0VC;m4Z?@rF:e[74j->T*7951(?VO0/:h1<k*e0(lCKe#o,-/h/8RA9]8.ilm)Zbht%[4Vq
%Q7Ut8nj'H>ZDJoU33kYCGaW"B73&LI'M,Mj9`)s`=hp/"'Q3[`8!_jL##$;cj+NUE-;;?tb!pq+X2D$Bb`IO(A9j\I'Nl=T#kQ,P
%G!R6K9V@4%QAkr5<ejgbR3`4SaX[5`Rg`H2Ses/D/<:KOVO0mda"85:MC_HuR]".VbTr[URi.;Z2GZ%.1WeeHEkFd`E?\&-G\&+^
%8QLUL?h;c6JXL'?\ios,7lE#i38lj&4A^9jJc\@PYA?$nam(#AX$l\E+I0$=j2>EK16h8R=n=G)3'f8CLds?IWFU.5qN\@O5UKXU
%??.T_/00*YA<Q%?@Z(m6,D(/M,EbW!LM:*A)O:C[amq-jBX/7^-,E9\Z=90]AI8bZ5s2FbaX+"*`30g0m_E)54B*l'X@+(G0UF=$
%'jdc1:_CVl)i\[>3m@LOALULW;-$Ssn[F@\<)r-9S#ji!jCJ[U'L@,P&P4@N_pkm6P(i.2H)OhE=_a,8CpH0$G`dS%71cqE7+03B
%+SdOqAmmT#a^.k]W[tJh@6.QE?D]]=K#0neVeecLam(SUX$jYq0V'a*'T4Kb$keq(Q3RaM;c'Cuig#Ko7TgaDIq8g9bU=uE>@3CA
%b7%RA;:^I/PURqYA9%OQ;..Sar3*D8,)'OMnjp%<Z>;`.F3;Y:?':O'-rS!'bXR1:$T#Se"tecVnkcUdZHSsFFBKY6]LY>N,*%".
%&qjDT!L?lqJ1k]!^;ZBqm9)]@Pmt>N-W!X,LuY1g"CDpVJ2Id>^mDH!T<Vs%@hu:[3KsMhK#0nqmqa9EZ7u6XC!?-q=XfuP!FYG/
%9k+t.A`^"!P*[UG<5e=P7Y*6$'>U'V/5MW:8?iH,VD/GaZTM-1R=ZVO*:I\h(pbn$XD,oLPZ]H-irHkCZZJKb=_2lOn.Gm.ME&o7
%88r0L$<V&dJul6X-Pg9Z=gKf_XDF6a71'A9ESRm_i69%PYfrO>=_2lSfUQ)VdDE8r4ApElJjMmGpM:O7ZPpmdb:[h`5[N,+"b=T?
%Q=UAY23:ou:VF*J,/ls-,)1;BNC7A]%:k%7b?9]9baPA%fY!``#N+Udk,E8nUNpElAkA7<a[m0\-=XJseS$4oebDhB;GNo>iAe/A
%::<XLjNL4VVG0%uX@1N?pW+!^,[u"0eVN:PebE[ZGk;;737b0A00(@nQ4:RJkEZ8oiPZ$0&i"d>C.+6.C*4*>-FFGM-o=t,<ZEeJ
%8[Ff57Qt@.$<TTs,VN%lUkmuq<?mZ3<We1dV4:#;_NSSWUmRZT>`a?##6hZ$]LY>N,)00"NCIqk%4$PERXtNnE+UO2(-aX2hkJ=M
%7A8,aZ=_2u=-=@K-r@j$b,Q%F/usOsYbiQOZHE<JR$:b&PQf`O!E=<3JjMm7\#^L1r3@65%G!@J6%2rcCTf0&C"BY(6%W6r!t$DQ
%:n3@#PuT&l?rdBO@-Q@L7e=eAPR._:@WH'TK7r<P7Gjgc3Lk%$"iZ<8/m1%Ul")`6$J)Rr6$cZ_C[HIc`iNn"K(Q?,:nU?6OeR`n
%P)THM<Wf=/Z(>>gOn&]f_#g-oHs*lmU<-tfXC,AC$h=o6`JHQ<fdP3Y2380r11kgC/3o(aQaMcTShCJE_TNW-.cP\bUVN5H5WW#j
%RcOj^;V&&Q?rCSgCR1mB8pSB.aibA4.cU59UVN;J5Y>/-SgBV(K9BXD;CH81Z=Yh*(B%"OEB)n\$47GdS?l)Nb\A7BXC]ZYc>6Oj
%a5>t%>39W2Y\R7N,VN(mW/0K)N<!Tl!srBfH^8V_).f*=MFj3nm9.;nc'd?j%O\nW6#e*/F#FAa=Uenp[Hq&3R*B@c!%;?C=WTUp
%1(02\M\HjSiqR,\5ag.f:0>u8"_hQL;G>@e"+UmPbY!/m,`jH'<5`e&7Y*CsJY]NoS>CLC%E=g\o&J%UZYWLd6(V50'MbHs5S;%$
%)[XY<a9nE7p+/`jS#9tT2*T896NkIcS#:I[o`u6F-CQ(&fgoYAeNcUV]I$RAE-te_[E%.`bL3G\1_oLkl.r/K&d<uG+MQNBjI"Km
%Up-4?5[_J#AT`@l/\\=&oF'!32/GDFncT,Q+C<`W,am3XXKZsA#tfHV/<:F-0WVP1KdY+8.,j4nM@r2pZ4TYaX+?M>P/5]h5a^(2
%Hi,J8XNjie^mHu9]-K%.:oFZZP`85&=Uh0[V'3kta>+-b@PMKJB7M\Z",2pe-r'p8a@7DpX9S73@Qd"r_Xh>]h&:^202'iKAia43
%8V8P8M\HjRK",>9P%%Goq-Zoa(8R<$:pKf$b`i8kAcYkUR=[ao&>*c,Em/9G7Te-,"\E;Ph-Nuq^+;'Q6'>BmYZE8[UnBsb`$64`
%/@-89#`B-)JeZ"fjcO",Asl)^!QH[O'OIZ0:_CVn)j)\X)TW3-lrfE\<mn+@01VEf9V?>.D4glc@cBcla!hr2`[jXcMtI4jM9VFL
%@:Cs'fj72OPZ]5HQfLRB$5@L8ZB:g(Jon5_4UW[E4B*lSXD,u^at+&<?DaAl&]ZmN$-Fg?#\t<bJ24/U2?5;NXD-#_b,g`39CahA
%Ko.i2g.5%P6!@C6U'7&i*\*+)CYH+F1Woe&8/)adiqR.26(.sK@82(aE+WfN@L_Cd2=4O3R5OPY5u+/I3"a1q)[454a9ZS7ZTM``
%LPa!;2=4O3RH8G*M\HjRiqR.26(%m*@4cgA:hFifr#'"1=gK6m/-$#1;,EpAj.2/4@hrU.26C#KAX3FU7@7Z+/4_NHg"RPj;,EpA
%j.2/4?PXo?2/QJ&&8$'&r(XmV1M04==_+9]B!#@#QRF7Y`:;)AJM4(@I'D*k;.5>bl>orkMHL9#'rI@pg7q`FQq/sMnBPd28270^
%KWp2+EPbRbW>eQc.:t$(9nb$..06,DU7a1P_`+Vb,K6_k;SoG-Sa_kH<OG<RU<HN8]a@Z];RU_/4@)7WL0%E68;^ObjFgNS'I>kQ
%Q:Hd'R8qq/_c(/mP]60r7>Vik=Y1gXAlY30<m=O0!6VBXRiF=t<n6GiJ241Y"aQ5^,"2p$X;6p<ZRSWSWu;[$J25:m`M1SVbd7PD
%=Ulmn83r@^L/1j.7ZLUd-A5Be)9[)5<SKRB3O;[^W%c8n`g,UR$47J%I'QpDEm1O;+"Xa/@?+J3.McZ_fs3<P/.WJ%VP$`t_^hcV
%,fctn1;Ye^(?V!lX]_,KbKO+V@TKg:.:/aA3"a%WX$n;SX9pc#WX8n:TZhFAYo'eU-\*noj+NaI-r@j$b%_M[1989NYfrVk8S/]Q
%j3'/hR5kY=bh>mE1<"o=<ZJ;Z"?<_;bR(><5d;cE4AIHM/DCQK/@1d[QfKD!$57ElZ;G#RW\>TtC!?_!/<:L'0l't!J2,4lKpO5:
%<5e=O7Y*:p_M#.j3=?\19$RWk`L&OM=hpET1qP"d;c'EKj.MA5@oe:D@82@i0P5U/0ZGZ]#p@H42us'a`JHSBfdIDD<L=BLZtBDL
%<ls%qYSa^D4UW[ERVnJQAI8bZEW!-Ti682T-S.&PGfhRu'8nV]g9Z;bbN"8>-n%d-n]jUT0rr0MYbjPk(pf+9NBa2^ZCH@taXdr:
%?DO5b&]ZmN"j3nR'>cMG(+,I2O^`<B.0)2lA6-$0!h"X,73)>D'M,P[bQuD9=dWc$i;m>lAf4JHBpM6r02bWBLuY.f"D\c"Kr)o\
%<L@BaH;d(p=dk=PKkY.5MX"N)@KIi'LjM#mH"L'D'fMDV0]>R/oXZ@ak*`(?VQ2Ds/A:/R=/)?A&]?gONBFNsa9sLsPjk2Ga]9`(
%B3(lN'9Hg,[R%ce',2XB\7HnJAQAt;@:d%/!Ej#[OI288VI"Me/<:B<S=gu:`$$(^,dSso#V2qi-%I^#jm;NH(pbt"$=M*#[UfMN
%$47M6I'O>U1989VYVP&$^aufS<%Q1n9RUb3bq'A??DaAl&]?%9NBFNs9F<:+qh4.V8m,s)D9a]_'Iq<_.s!"^Ob*X'&?fn<o$"*f
%-S,E.9Jaj:`M1R3;\l6ujcRE:'GMsI3+X=tAQAs`@@8hXZcl&8MIKLrWKdOKbf]W'`CgmZ-\?SR,EcS<KaD2P]jE6_1<Td=U<GB>
%"=BPuOi#9U'In^EA0[7J<eVu2R6:qabh>nP34$i#KkY.9W'Hb[67":F;`4uQ=dTn(2GBq!Ufg9uLYj<#ZJ?)91FqYUP.X=OJKg+Y
%2A3)oQkPe=Z[amU,K1kOReA9Tc14Ea6ja88ELa@ti69&sYbj\o34"S;#d_`1K,.9q'tYG=;,EpAj.MA7@hr[02%<a)R,rn9(pg)"
%$Ri>>:4PSqE?^Ee2A1sOQk7iUAcZD-`<sI%Z_fSf(pf*9QfM]b$5IQnZVb,S_N_:%29Sp1H(\9(=jrfCPZ]%U]LY>>,*$k*&tE*l
%':)e-J25<O.4/Vl)7)$?/.WFiU7aIXa#P(F`[jdibD]SkA<mIX`L*KhJ4X>f]-%Y6-rS!'cUNL?$Zj0?CDLNMQ$<:rKNVp5_DJS]
%<-Xg_6:DmgC_R_mMObG^ZeVkoT4_2;C-f,qbc6uT<T3Pnl;Z1'8e_mdMBmpt<f]Y;=bTWY.l.6j@],VOl"^WuAi@s@":Cc5f&XaA
%8e_sd@^p%CBV_%r\?rJC9VEgfYpm"+?WuF:bfY28#b*Pa'!Q`$$&T<L]WuiOZHOe'<`gT=V\lZVZOe@G0rqOp=1BN^&1"\D5qsR<
%6WT7=N`h'3#ck9C%>E+_MdU#K,pm,&AO.4AT48W;7BoMV1'NAh(d;(c,"ZA]4sR/KK"_p_aXi)PA'A[=QqQD%bX/8t1'NBSs/GF&
%>-6J`XP>JMs6t33QgZ*KG=5B7"Q=q>2XD.b-<XfG<FhC2rd,l!cF)4?qckiZ`A)48p0BPX>O`7Z@\.4nXg+(,0j80F<l2S[MO0QE
%bhcF4XNNhffm0L:fJ7f+![hu`-n#uqfbUAp2IdtJSj=,rAf2=bAj(TR/=C'IE24m2)I(l1UguAN-#E-+M]K.-Vm\4m)mf-A-=b0a
%lb<>gIA/,:)CsJVUgl;m,OFs]OV\]cAf2:AB$Zl8Y[s+d_3q$rBWP`KOI"S4)e&%^1!&!&Ml=-?4'"@-`g0aqKkG.pP'!"q!K>]j
%SZqRb_F^08m![")^AMlmc9"J7Rb8XE[SPmR;,DAcZ4W&KN1I1g0oJ3$N/B-lF#Ak5ZV1^d'I?1\3?(8Pbub96\$O^BH\8UW^C.A`
%4c:Vm2^j*HKScFnkU^Bl(pb)1@G;-r@*B63Y:s0]RK[,c0VO&lSEOd%,8da)qdA$!(-?-s?ug)agmDC%=mVNh;&T6Vc4i]9B0.'J
%R*F7h>?73K`[lc%`b\jn(5uB#"\4H%U9gDM@*E5aK\bBc:hCR[;eA1='J,Zc6.lbtROAN#c>kgp17PN[G&CrtA+o$fY.kp^o4=e,
%a"3@),=OoG=jKPkAi'.sY4X>HbRuARR%4VJJfV0k$I0>S7;"b&_O)q9\(Zlij@mRp2,ECe`iT+O67ufm>+,'XOd`(VOmQt@P1a)2
%E4'&pc5DjLqi15Q8=?mCWQg-]=o6bBmh8,E&_YFK.%/<`*S51I4W0O<T%;G!b&$ga#s,D@luOjV'G?P9Clk+=>YoJ.rm3rF(+G["
%XBkd0:msgF@%Jbm,"pT34gV\\iS'c06Iou1Q[_T5h4H>Gc1W/eBV[%*,&>jS27'iTi7dRP-^-@pUb$/eHXJ.4(.l?)U83T]ARi*k
%k!FZ8[r6_,FCs:QZ.k\S)b%c4fp`:-M'GGT&_Y;2Bpm5""BSC)M4@^:AN@)gALg?YL^MEA77C`?)l.+)(K=X&bpK`.gO?#9CY&)n
%-#7\e=e$n_M9&jY8C)*)A@OZJ,g@M\9:GN=;G!;\:10eE-R(Y*+=4@>(W&@^X/FW=b3T<9PZa'RQ'Bsap.:dRM+Z/ub!o3>Yn?]C
%;)g"/R;HG@rh[hb6m6%U3PgQHSEOd#6Q!.3#eTf9M2YR_AJqg1c&si?W8L?H<-3;i+d?-rKO)dS7*]W7)h96Zc8\JFm)]&Lc4i]9
%B0dKRR`/I_2?PO&ZUfsXZSTmi2%,r45Z(3s[^.-Q=fd9^gY#!CChrqE055Ul=d!AefdCd:-n7:Dfa-"WG/BQ1B2P*d:mNs(+bcFh
%j9-ifEh]n2%H5N?-g]^8Ou&#l9P;r:Ca3Y;e9qluMNX^?S.-Xd@O^Ztc5pN@2?7,fZQ<`u=gNVcbnNT8B0R>%S&J:X\Xu%+RVd<J
%V`!dk[ZNG*UqfMu:imJ[&Z"*uV6DU$M-FTZmZFGZ[bF<Jbh=-4gH\J,WlB(fLFAQb>RB/K;$+b=W<.oLB'jNZM+_Gt2>;Nn-mfkE
%fcHo!2Gku@3=QWYB$7pbbF#D\ImISQDOtg=-mT^8fcHr#2Gl&Bbsi!XZUi1pArAlZd$UpMcL#nOP\;UYH]XiP`1=-_T/gH+QG0R&
%;J(hOF\%oh;K/K].N1t5*i*F,E@5Q[;TP4o;O0*(9TUueTYNrm:,Fl74\!P0i^VR@)(-iVg3:1BQd"0#,&t_@Kp+Jo'GQOlC_'E!
%S%'']K.NA5+t?6QodJ!8Z\St6'LbH#-ej9\bU2V.oe=QHZXl@![P7#eQ>:*uIS/Qi;,B)-Z9:b)CuS2lqf[;FSlm=M.C5U:\7ZRK
%_3q$rB^B8VOIk.DSZnDm\Rp#K!m^-6"V0+g&&L_/:7BI+2LmNO\.Q/%::;l]b.d_qR.YYH/t#.'E24m13c!CSb&$',fU6ADR71)@
%1->(Y.C4g;c4i]9B/pnsR8)HC3s.&`ZR'MiQ81N(/Le%!ga@*=-n77sg'Gi;ia19*BZZZ2<8<n4H'Xt'!/2bWJtfTDN?HImDM@bR
%6I'C=qt_sYej1Hj[U/hR9GHSVB0R?NQqc?B47b!AZ\Z^YAnR\]AJR;BOeSN4lt7OkZ\_=`B:^D\(/^LBX<iqO4gT!t_hk+\k\OlV
%(pf&\@6MkUcg6,LftsiB6upQ=#)+C]JtfTBNSqu,Y(ZI!b;HU0Y5e-*m>7":AJRPIM5$[,lt/W[ZJ5_$IDgt8B!%ji;9>o)$n!Zq
%[3#eR5#RT/0!_#W;)4WN')$.]#q3.RMmS=6B'lKh':6qsmlu5m.#Nl&DDju+Cnah[jL5e%AlDi6Ijq_Geg49NS$%/Lk(uDKZBYks
%17P3V2VIs;Q-:Eu;jgAZbX#eu_m)@"'G?OVClj\1`.bF0(aW_:-Fj&uQq\>u\RZHci^cpE6l*'o3bB$A_BsWaiJq%dAJqhrP:\5i
%E"GNsOs72pNR9JM\.CQDMFD)7m;TY%=h@NVm[27<&k@h2,-m@@dP76$&(Z@aGK_6\9:>H$b8mpF$I0>S7:[hdUgl;[,HQZ'm[/^O
%^Pl;kZWo5SpVR4`MK0oHP7>qpS%'%gg%(_-Ac\,BbSh+!0oMR[6r?cKG-XD+AePutHCX)[f`_`XZCY[=@lB[%&k?]"13@]F&WBk1
%K[#^E/^,9f^A:KioiE=)QpjbXU*q?L44t1Z/D%_`0MB,2P-TJg).q!W78e*%-n79IfatkKf>5`h9>9b4D?,tU46%mfZFTCe3)^M+
%Sc*@1?^;X>B:^DV(/]'YefR)Ob5s%J:m;Wam;*&6QMY'&S0_P9(`S"ebK`4C_JF,e,gI)m7;"b&_3j=R=MLQ&0T2GP@<Ud9&n[7>
%QmdiKc>kgr0?\dJ1XD4;Mkj$Rf&J;_biZVMi^cpEFEXu6KNYI1of1,0ZNgK7N*24J>VQVbcqI;9FOmcAPZdF,of1,8ZNgOcSQU=9
%E5aAkJg3]UdFli8E+Z']p@/?):oIjSr\0-3ZcQO,W*hM$:#Dg^13.,GAk.Z/=_`T&+#bhrgQ_q+VC@ucY>D]E3ncb&_aFOQfZB-j
%e[!g1HQ!tKae%ZQYP`KQ:]"0@[`Y2niWDZ,d\3q#*C2_tYlaX+D\uuZ/FqbCXFC:hm!88PBTEef6Y#jOK!`Wtn`u_u?U2tsI<M[_
%i_M<&[(dMXP:T%Po0b%TfY!4e7C(G>l@0nQ*a,:L9!S@^6T)/?$-j3\6t>IB@arIsjm-uGGT[#3p9ZJr;2;71+fIa$]_4?*-d%7b
%`cVDuOJT6abH"SaMi^UIf#%]Wa!)c_:6Z?M?0_bo*K)eYSlr$Pp,pqoA6H-[mAVu:][ekFVhlUlZ""e?8n4jXoa)]N,:L>O,?'-c
%n3Mc5#RSciV*nh.3eI"C;RrjK<iV)6P\g6Ij!_=ST%CBqiB0h,/tEGe!;DbI>u1>d5jX@kcaL"T1gg1k5u"W*#`]R06taU[6%#M(
%=-'Is]cn_#HC_;USQCII`ecIFZYGJ-]Mb0`bcU*@T%7::ort#l8TnBpE0r$t3nr3kVCU3,cIe#G.jAGklO9nk\]uuf99^!Y9ksmP
%Q24]tA4=E/ZmI%JKUn6jr73*pF#Zs[&tMa4!54Z?>A%IM]+l3OEpJ[cjL,+73)5\MSP<l&\!;hT4gLg7MNG@"l8^)/&+#G13>a-d
%LsDkTK%3JaXWCWE"SOtP`Lfc'?2VV]YT"4D-VB6@Z8I6\8qjC=>,_N<-s8I/5=Z>F^]GiB:_XS6D/09DQ.fD?H(un_^F&ht0!'Os
%p,a,@rb@F@hkit#;@\gpCP_C[.V_]>Q&VI4(&:rmX4>a!mq^(t4pTP)#nbjt`i+=)QI`CWD`1_oHM06MrUO)u&HEbWmmkV`"J\BT
%&6Z:C.=B*df(1Ka`3racA*U.=jg".E*-n/[UI=V`=g/+0HDOfrZbLFl<:kM1oo.QbCU[LRl)_Z+c4d$BAB>ack*7E!T8i)&$0eNV
%ajO>hqjp+hY=JuF';\*-aVpr6Q0MJD>JpUMlE#EIVehpSmLW@dHB*C`a,)PqZ=FEmmRfpLSl_oG'e*9Ll[/0$fG,RGEMAPNCfuD_
%\mbuHAQC:'4o9P]Cn9+Z4a"?-@m-&aROB=')qH-kY#N14KTCm#dTM-`V6aA#TKZFf"QtV>,-kSc;Wg[&WubKEb]Qhc3ig4sl>f$X
%>N]ss-7)5r`>V!SV;Bbc(1E;@S[GA<m?c+5G6mJR77M6d-mLcGed+;e<NaX"8j4b%Z@#]2Xe`9),WJO5&tN$<"J:t%<^!pTcJ$mX
%?T+t*<n(9uZ-U6C;+,NWXV#q]l<0[gQ$h/2m9OAtd#'k7&449&&^f:>7M&b&?Zh*(&mF%tY5T&;4g^s1qY\NDIV#*!,s&Zh!(&3$
%X3T(L67XaqKN8Vc.'t0C3)5\MSR$"6Tp:L8B4rTd'e#J>lcTD'[%?;_Vf8(Q,<DmV#XU%!W`j!lS[GuRg@iKm5-%t:C1mcAE1A=$
%3m6([3\,?PH>#1*[CFN9i8RP'eXdsacAI_A4Ae^mQE:a8et;3PQX`u2:ttlWGuV[sgaJPgC7P&j(Kt%PcRKs:E"GKRP*.[<Y%NQF
%<kG<^jVhkQ`_!j^)/cK!-!,5k[C(k50s9cU[K7gbU*q?,44c8X:[<@-cWj.6Xk>CBpHL%7<bkl?s%L>cf'7ICkAS&e("bS@3LD0$
%M8mj6$rY\l=7pj0IAGBX&"RV<4?b4)s7oZ"mHX^Fg&B[MST&Jm';\*,m<SscD7-EjV[LsOCGSY=/Odljh211jm+ofbJ%d2_MYKI;
%"\4H5U9T,0K+tfKA\G[UWO3WnVf`$-_[<3pRDiF_l5q'h&4jX"U82I=@*]\OXm]8<IU:n/e639Fli!q9o2s2D0)tO$od7?*NT0-o
%r-DDTr+(MF3)UG)NA^&?UqtS6CRpWg-eWNfj[T\4Rh\dLdsC[<HO#\65,aE9<,e]_.N7'o1J!Y/?.Ru;Wi+PIArs1Ph.];UmMBGu
%?Tl`l0/cnH8[4Ir+,#KFS7l_LcQI)-G#ba2^8cmOP/!%Crb(h+bK_/iZ=j<@#Eo(/?J!*:ptu9%MK5GrP<FQj\NX*foq0K2oe_$Q
%$B??B='IU3Y5rJMXN0"S#@#meEMOp17;!te5_?DEH7)J:<pMb3\W5s$CDm$?kK?"j_k_^WUSR.j+t#?IPS9UaC]k@$/o)Q3Y0J_*
%^Wu#C=m!4<.BU)flX@5NjeJ`!&lHK5U8[:WAg?NDG$4:C@5D"uRVcEl34l5oV/H?'G:1tjCq9SPc6^H<]MIN\;,hZ2ZOsRspTg[G
%?"N\rd_GYM-#ljiJX#5-XJaaLXWXI>`W@MI:_XS6j_P&Weun<08"A1BST/g8eJ-]5f@'Bccc,;(\Xe-YhX<V1d?]1nB8WFXZ^hQ`
%a4aP\dqG:tp:P;Yh9B"(V%-R;NK`D:n[(.$FD1ai*%;5Pc?;*t,\rb>]\I:nJbJpi:HR/&G#'"Da]e<j:U[(`e(/pY7uEJ(Z^d#J
%b.a3"Vs8<'kLo`EOIu),ZX=.@n5R9=\uYp?[d;FWpH]]H8rCo?2M*VuQaN?$\6;S*2ZPj>2dm)#s5D,%4]BRl?"tr2KScFnkcADa
%.'oKB<XU@/N*.Y<p4I8,q@]ERfl=m>4\ufU.^GNQd/e%7FP3d/1.o?K77NRr40D-]pp0U1YO<,n0bIR5`[HFeYNk[_kKO-XfsIs^
%nn#/6K>).Sq]*fnKg]H#)l*tpY3PX`Zb>`7oOX/Jl-%@B%f3KA_RVg*PS0+,Clh\"];eMAc2Pp1?T.S*rKf4-r2E'#/<YT@78XZM
%aTe`![EH/J<kk>i08lVW@Fh&4jNA_q0N"&JObIV1EnL,\DRVK/`X1q9WNE59F]l=Nr+rPi4&9HJM'GGT&R!0ZBo'1?]$sakZ7"nB
%Ls".W4j(4bQ^r!!L^MEA77C`3)l+k40'ea+4j9Lnb9AB.Qh<>m?=,Vfah46D3)UG)ObIV5\lcSEbAL%_\j&cR9fm`=@Fc)`H]?_F
%-]o+5.>j#(:,YXUluQ=GDtSGa)7,eH0P9nZ"V0\"&&L_/:7BI+2M*X;8T2jrEjCDP<;+jL_Q:K[[9&d@IM+ZWOeSN4XCXa9Z^pI6
%R:jX/79#R-47hg>bg)Y[6j74\U8"ua%:RJ(Z<Lt7-"Ajp%DX`2B:s[<g$C*X\PM3Y;,hWqZltC]:4he*[%tnI.T;b+H1lAmZ_%=r
%BVHn'3r@SAc>4lCeScn4bT\E-RIu>2_Lq[<#@X>T-T_.X#f:C*]637='P:9qX$;<kR:fl<2Z$),"@n?$U9gI$+j>,8>A'NR@2;_.
%_Q:f2H@:dn=E1ZjT>QM[T]g3)6hmsXjAo'_(\tAPajO``bguCObX\76m5dcO77#>ScA'\W43=UrAM<Uc'3tR:bBfPXj6Oj37WG[K
%:?"fA;KS52+b\N:NNi5_R$+CZp:7g5ZHnsrq]*!S.illZ'ZOnIdPZ3T=-0.Zl@mJQF',k3bG\*Y2BQM8ZK9be,WlH579S#?dp>o*
%B!EEN6,?Y(Is,(."#'o4VZ>U<"G?EAj-O,B.8#K;QM(Ya3K"o_%fh=k8@4>5>I4mUr?5p_G]$:k"[uokH\H1)V2j2J%4;<Bg?8:;
%&XXd0\GRkT>WiHBEN1E=)N3<"9_0h.`/^l[/a1V</Q8NpcJ#1le&"\H.S>W=](V$05"f1dcgASW!MO[A&6P8rlh?=0kocf<__$i_
%V+"m,H\JGlV7tRsDlJDUH'qk'$Fg=d[DWHu($.koFaJi,TuGa<'lg40Q>r=1m0^B/agJWk_6K`AB^BZ@0Q"0r*rBI^_Zg"m!O'Gr
%YB<l:Y9d4gW$j28/)2XK,qTkQY*_kYZiJ9MCfebB8?tAcSAhb%\."oCD?S3BEK0<oASJU56rp0t]AA_]&oEJj4]IX[SHWm:cSeX[
%m*<+Sg+k6Y[G;^e>hep!UX-KF]]cG:6cc]m\n$$+7GW-W-SR6&gDt<+\0YI#XsbqagY<@[D5'eYST<,g-!mHjl`?1hMlb9!;-%d^
%\KRd'7'3aVjJ$kAXA&/-Vd*,<Ns96:XsbqagY<)*D;oG9LBZbnE=TY\DVslH9DU6FZA4=#U9hrN@G`C]Qea),rEH/<"l'u90+r4i
%JDmK%[-6jr6R]I$$>*AZV:+(;+p1c]SJh/G%2X#XZ(ebl/94+6\;=s4=2^s#>/Fjo\-<>?\-LfCBW*=13fDc1/hWF6k3VgXlEBk1
%ab9W#ftVHmW51B=X2an5R^AS/He]GY[YZJHF2".Z:iVV^A`ER<h%S>kAhS<'5#`42O[X/L*nu@eZbr=o/@$;pg=Lh2\AL6T=Clio
%qn^B;;NqiW"`BPSgP"Chch04pd)./-VM@8%.A5X[dIH-9.8#K=l8D8*D5-IO0oD_m,&TUGJL0:c[p5l[Q>saOU:c;`DkhF.-E<_e
%190k2.PC7s<8?F_3GPuCl^m].=-OM`okfe.gI+cCcRm%R5oI-6!F*PaSpIBnQ=utsU9o`XE2+-&->K<H$'uQJ)40IEcAYC:[u:]R
%'r=?0Kc?lK2IRit9"EGlbHrf8f0?("gG.WcKi:EK&R"$]l+'Mf9)D!jUP2Cs%cMQ0\1?!*f.H$7F%(?dg#5CL]1pdL]7M[.h'+L[
%j3F;jQ+(7.E#.VOnoEu2EC8Bg<)NPJ1+"X.a6a<A=?c/#=ean[V?P"td\=(hNFCmG:$i;!,ifRj9?:C)(PQ+=(=?)Y=EM!^0m$YM
%Wnft-FPL1'JYhDPTSk]\_1GTSC!kVt`fP2>X`aqTP&ZU"QZ75n73*1QTqS3bkcAi8fXTF5]2L?8\-1!\EEC:WAF:d(MfV=4d95Xe
%Y]6YPG,JU;EI0tQVN8>e0)E(O$]Ysu7;&/1_oS\Ng6H\Ma<b)gO?5f^<T9#p_bldN$B*1f2hmDe't,XS;Ch2!LqjXD4loQp0%!!q
%7<-`.kJe'RWQ02$>jB<T>aCJ`JhGU6NY?:u1fonXSUGAY-hfaWI9C@bnb0/ngg4=4Vs8!O(]40JC)u]Tg332coX_qU2MfZ=J]%bW
%L"<GdQ,KL?)XH2=[g*e]B*)&\.0WAU!GJA3n?DI_aGor3:K16fnW^?*bPs\hg:/4bG1%#KpR.bKBP_^Mh_lhC\n"B(=1`Ac?R>GW
%TVVJPmCJ^13O-M2#Og$.n#TjQf:I!>?$a8KSHDK'SgYj&)r0J_ko`Sr)S2/loV4P>5rD4(=71:DW;V!l^r=&qKC@Pa2JgBUIZ8KO
%N.#M<'1G<!D0mME2j..//gBtKSW@berC1g7Tmj=fI54]M4G>>#Pfk0e?Y?RecBSn&p,l2E2"n>tDtD#/U_R0-mamr+0B%6*k_i%2
%3r5BuP2/dhH'A)ckO6R6YV3PJ)j%,`lmIo0S10>Q`iA`%jl;(NF>N:^YKgRCha+g,Fb=^_J9'Eo,iAVU0E2-sdB;a^9A?-+M5$AN
%ltDI;QB+,MW>f6+0n.o%"+-]RTX:ooIP:\_m>eJ*s!&?@a+IS6[b^]#4,_`_!/5$BU8"od]i!`M8j7>qlm&7cZb?2,-)H*NG/oPh
%I?JX6Q1@o1c6-?+nig16h?+E[3RLsR*l"h)9<g,YM/mWDrUO%oV&LfBX$>KP/p9b<al?5A+3h6TlCaBFdW4rC#RZM)"[uoKH\:m/
%6`IY2p<dKq=_tSDP&c#ZHA@`*0e';:?0B)u,pe&ss.S+A+t5KM':#B!O)6!5PV/G;D^`bh>-\1uU2k\4a&&f/':"%FW6b2H=.W,F
%<;-L7:6r1]i_33KA2^_8GEj>@B^>Vco:qo!Sgk7#q(],AUf$N^1,],VAnfT2efQF&3kfpRhfJ-0U4P0i;,Q#ip5ci.-(AT6F^OlD
%NjY8!l$ct$o1,jRUu_0C4k0h0B[?![m"6VQK.p/e':%Zqk?CPMZAH"R?UAYjnHV2)k'UO14-VY8V6%E:^0bC=cgGsGg1LXpO6.gP
%'V$V0MTUZsn1CINfh>VroD6l+\Mpn+Hl_;Y._U;*1@gM*<]GB%4ic/ScKlqG-_%ls'LbH%6T[L".SVkNT"Y*dj4l`Mk6ILFpYd4M
%mOHfmi,NJghe;^Wqs7`aX*t[Y_3q$rW,-1oO1S$9c*U8>e&]EJ.k`CFlb%.g5=YT>-/Tg<[N6sZlsHaIKT'hn'q?_1MTV7Yr4&et
%\s`9VK,^Sh/a`.>c/lH"HZ'X78R%g9g3864,Am>#qqQYn_0Mc>W9e1N^7j>e:R70A9_(JZ/SUh!C<gJfERkXom`U(QZ$3Qfr@7VZ
%I]rfJ0MrMuPo]82\!*8'oB]D[FH3qV[+Sa:oCIFZIU(4uG,<l$WhZ-.(D$``2*o>6)qoC]get._S/mShkjq5S1cDH&>8_U-):mB.
%rI"8C%I<iS\$;[?BWPoP%)ppQldDKQpAm*3.FuS_;QT&:UfcBT3ddPK8rCWS[KUZPhoiU$kd)-UkZFIVY3S:mlXWOcFK>KVS0ppc
%`f@JrOf[rU:+\O&%0\?LFR@79/aHpXR>RGU.f140'?*@L5MMogeok2o(nHCiJtb,31.CNY$kj>W;hf@?SgYp(]@dt=['n/hXQXaE
%-Y-Duoj=H$5D^kHejp..'LbH#2qt'oeok?TMb\DH!iGY)r*-P:bQ!(oU30'IPW_hW'90\AMdflEoj:aAnf1<"Fl(`"S(9C;P%bB$
%cqI;;1q'_BMJ@"[Fc"L%b`Zb$X=VtL``\J,i?4-p77C]NgS3?OG$V!aSS[QAagT4Pca'\?ZV%M\J-#g13@Pm4fbR#b[`c8#kS\&*
%[bd[-CcrF`ajr]aNYFoNAhtAn[Pe,O(d0)qak""=<0h>`1G-`"a0e_&9Mni4G-`?.CV-amN4-dQ+P@Z1=gGHM&m(6u&JZ-38rCiA
%2MQ$bQZ]:TSnSG_eqhJSXZb,Kd]JROT>[.lXN2r,@gL\0?'cPuWHOABS_)bH5e+878g3(1;8JBhW5pN)@gLZj^lkHUf+&Fr&X=YI
%H`eqG>T[IJ`0m@$aD>U$(tWq:QQ>J0G*$]\2Ns\:`jH'+6H1mgJhohuO]g;U:p-@>WCQh!Ll?+;AJs)@C^V-4L^K(T,t2EK)oK1o
%bIS,H)/MmTcHBc$kB[>:P-0joP%KTW,."D2iE\MGdup<=QFq!DAVo#f=!@&/5cA(d-7W#-@2m+sFo\Be4bG>Sf8.RKY@k!ap%i@;
%'T<_p7:osI`P(CPl>kN5Ltf%-^L'gL[=&j-E4PY0p-BTHMMoL"p1>V*H;.,`jfKFA<,PF+9_5j>&(/$R';,CO77#='ffl(I0X%a@
%\f@'!!p91O#R0hr]6XAQ]DJ@`mFI("c4e/b@pAh<&k'FQ7d>G*W5XASkF/U?n*9Remc=T$lNa+jIV#*!-Q9&>Q]i9S23q-)pPG4M
%E3I`u+$A#cIdS@4-fA=/o7V13SgYs)CYFQ-+S%Bi;YSB.ZrD*@UeLZs?UbCFf7XKk'P0^C:&D4/_nLk+l@)H([X=(-/Gn/)J#Ab$
%jBiGXJYJNFlt@J7K%S])8c:bM?;f.a:=m5ZbJ%:s(@>l_Kk?4ZU9UMB@>U[b;_ReN[&@=F/5s;iOV[WUFM\ImB55<31tK#E/3sDT
%m&'3KX_Fd&3aFh!/-3B;F/`*o26d3-78_H7e%Vd!E3Q=3HKA=PY^r),@*`)9$9"T0,=Pb_g!L"dYc41>-<kSrdrfM,VLuRF/NVPK
%D#5K:'LbH(9,kdbVKV7f_=FfsNRu+kPd(,.d])c*=M^E"YitFgK4roe:d)-:Q!P+T;o>3[Q<LK@=nbLX.12!Y_D[4*9dS=GgiDrX
%!ao0`1YPao25,U878_Icf`puNWMFiP>;!YHW([TRP:a1KVmG`B3)GhRSW.It$_'2W4kXlCooV-5;o5-JQ>3U['c8BWMU'd2LkJJC
%eLT=9KoN0-$[X4)lFeNFE2G$73a:>]*]>lUY@L9Ip9C5UbJRZ.(-V#+_UAj)C;SDA[^JIiCoXOBad,>2KOp%n/)-eTNNgc';-7r6
%[R!l/WiTO[Q;h[R`Du7BDUHBtgTBRoU8[:WD1ee>SboG1.lh`i_6tK7W<BicmoOZb_*7%[T0l%e&R!oo.DbFO=T&g#YX0YgLrqKX
%rA,(kmAIG.:D<t$A8N9^"1r&UFXd,A;Gb?Xf1'>Of[HD0(@:paEp\K=;A9k.V/;SDm#K'8O'2FUJi<<n)h;X4GC*i>,4+LMrUMK1
%6obk4fS4+Wmate#]AHN5`jTfVG&5%`I2F>FA+p>np,l2I7/"#sWj"SX<qg$mOGo0l//c(SRkduP'.P\6'GZaYD3ug>%aEPMolj<L
%`Wf>LNBJU:+CfUd1OGcC-R,VF0O<>%HE6qUViZm$2?;LOp6>u-@3[6Y;\PH?ZDn@4L>Ai>H3IKXYn<:5A'[\=2Kjip&C(uD7:]C;
%V@L4JHhI@(0ilB8*]nsi)r$uXe;$c"^dq=%6rp^()R2BS=3kLjak.OIOKiH$,o[e#JWZ\*kcAK.aOm';X&lSQ)ges:b-J98foh<M
%dlrR479L5Ve:t3444RDZ-$H1YCgpu/f`#VZQ.Q3Ic4kt$B3-%i`pQf64gQ`*@M:<9`qF4AV:a?3pjJqd.m!R](c$94#4%[oW>%FR
%NPO,M4kijb2R7oZ79S$kfuC8$4#L,e[\Zl<6=oE6So(G@41/jrKTW"-kj3+qkh)F5XCnu<;X?6[-=HZ%A"j#c2PPdJ79S$kgW&`f
%4#L-DCl:J8Z*JancaM>\9sEPL9it/]]kn0"]2OLXb-pMDVf=<l[Z<SX/c"%9T;7mLYitFjA,+]I>-(f873A",=[)Nf\)_$X`!U+6
%_P4BINT"AklEQrF(3OG&Aa7o(gld`S#!fRDMNX^?\;d4mJ!=%o]<Q`?@lK;ngl1VZOcO8Dq<>AnU;U`HDf_"Xm*8&Nbq]Zn@j<Nt
%adsT;PDu[%9MnbGQFAkH4*IM[CTlsd<0'1BIB:J<G5M#HNV]oL'd%oI.>j#&mP]i7aR7Pk?0re'%G>l?!2brcX-&!/G"qiRbS0)+
%@rIjS1h:fF['%Y55ps;4B?G8#CGAT2af]T!Nt]K#@qV:K'P)E*Z`^aCjaq:OANAF$)_'iY""H9.PSK1KD%9L+h6G;;k",n>fg*]'
%Z42?(%G:n_b+>O<b,)AHc!`*-44dV:qrTY8ACh:+QEongd^UJ?:na;OY\<B=F-qjOc?7\od?9`RYUh5MAm1A'$f$;PVC3u6qq<$e
%,.gdG[A-&`G2(Vu.G=DsC0Zj[V!NZ,S7l_SF-qFCc=PQ_erl308-'r^VHPa\OVAcab)4K92MdO@A_&ZiP*4YLL1Mge1Y@kS?,f'b
%1IY^ag=4,]ZFS5kg01*fZ4WDaA:%E%,o^"'OeSr@XD3A9fj&.Vad*=?Od2bRHa;abm*bW"S1+f'cFu2mPKe7$c3c#R<dWW4+ks=T
%2e4-`0N&T"SXjU/-(Fe54krq$2R0QXCeqOqO^3,?VO=0_kU^S'8D.6]mHKp/Z;W7mJL+lS]&f)kKEZ!\_K*D?aM8G,b2u1ZR;U-h
%7TbtAm=BteCh*]>MR&t_[gaNmF.r8#[j5O'_$Qq(R;PU=0)Hp='SStgD];*ek!EirKq)siANAF"h3*t-OK(HA'G[1hD%J"_$a"'Q
%,psX7R83Ga\)_(<CQ:oBZD+\:%3fAmO#lUs-C4@&P&1PUj-FLsg2A&bg%3[2@mu4dg#!"5a_k?uID.@%NGGg3Q6g+g%nXo5<cFoa
%.O+35-q2gK>-6-210.5o*`a'.YUDR\PHq/9qm9,bmit7u&R!tF.EZO-D!cE]FL!]Q17`6nHVdF[)Z/0Y-45UNg,;VtG,&+(S;\(;
%Z?+igIi@"^mMs`>D3ZX/k)"+&ZEXkfP23Xr3rA;tP\_UV.G;g0$J/f5.l^H@Q6`c@%F^NsYgtk+',>Jl!L<%_k<)TB-ejTYc\\Bh
%LobC0'P03U[8%cUaiVgIJF-l[ca2\C""H-+'GcgRD4%'a`hh8c"<o-2=]nA*hc7b=7T<ci-n-@pg+Y,3N@M&/2c@`<c9$Sn-/5%a
%gle5d;$A15;%Zs^L2"bI>\Q?B/NMLR'p,_6XsGM9=i$N#YitFf@n>:49<Dj4,q1p:%Ejp?B<ig44-b4,B8XPM[&FKXAN)6LcL7Bl
%)]*'1/5+.ZQX_Yj7TaW,-nIEkg)*k6j&TrB$?8j"ZEg9B]<?0JG09\)9GAdAB42`Ha_omJmGX@HZLdp.+ZS-rDRh)5=i$N#Yion?
%@n>:49<CA5E`"a3ZD;;4[p50bImj2m;\PIuZaGc9AN-d"p2nJPg&"Rb+D#o2jf3-M"_W_0U9hCi+_<U8[@ZWKUhk]q8_K\Q\LJP,
%_3q%%k\P-H=P8[LXo0\:;YGRQfhT!5<_1=::gfkC-TZV/(d`E+7dHIZaiFZ_QB48)/IC):Lk:JXW9ESb@gLbI)m*bY,p=4(R6L>g
%[H(g>(GH"+78_Icg.(V;\]q],"q-c.?\^d^W$JtrQ<(L@qjO.+)_4O>`p0u8.EQI,B`0(CcpB&3"O$GBlhh<BCgmQ\MP?iM\1LQM
%Z5Y]*f;"eMJgK+%iQiYqa_o^Tdn.NAm$j5T+2j;9W+^!b9:1n/L8EJgo%OKWff.q1!#Mr5F"\tMA02U!"nP,Bd9,+g0I>B]>HR?u
%KlM]:p:gAUA@JTW-*NF/*]gG4a7_2]8;bEm[Y1X$DU`=tLp\l^jC@ZE5AfaWX*luo)k0C7M5$q^XD1CqL?o+medh`j$J="snh1g6
%07TgIm-!:*npR)X-5oP2&uHb_;4$tI7!V'A(]+23VMjgPQ"p9Mh+f.D1fG)(ND46rduW=`bBekFP-GUb.:]P@M`*K0Jhoi(dFd!8
%0`BW5l`AiPgG^b+L4.4qZ&OuL`jTBtIQt\hU6oW\BhOh>lpb:3/(0T<]fFaqp'S4+@O!?^;Nqoe%;cXiS#WPkW[/>U.%?K9@]s$p
%-MDFcq]sH$KgfZF)oKVV0'a;g0#pF\VMFP7Q>5g>h+eS4H_Mo:3ZHcq(,khfcW&*DfSI]"Y\0u4DX?CGpIUl($B*2u2Md/`7Fj9G
%E]Nhj(BRgZ2H1_,gJ/>/3):3PWjA]7,%4E.ousi!N/aK($%(f<C;r_FBVm1/3m65"&iR."cX=r@fLO[%9F6%M>AD/AcEU1)9Mno6
%<jk:>Cp($$<(Ohp<2P71K<5kuG<8Bpm"qI0kcAQP#hW*b]n.gRfNV>/$MFh8k[5Lq5"RP!@F860#-kD3_g2JjZEOq,V-t;mYCpc5
%O;&T]8rCp62Md#\("OngP(\gj\:qVJ/R$fIf`3H<.E[On`\rX,?+I]G^@DddQ!:LHlWU:;MJYSY>e(RG.f1=t($.kpBcEi]]2F-d
%rDn-=8o,\_.G45Z;Qt]dQmg+6aNc\9+a1iulC-&B89k@)o/*X3gWtm[.)`jg3$r$;+a1>I`VsQGIAA8@+rf8jL"I+jXP:gN$4>F\
%D#gG`4cCG``-,)ZgH82*R`N?(9IG#&%dQW6HTCWR[=#=Gf[$.c@/F"d.O`sJKO]A!-mg.=g+\fEQ0PF)W5],nfEB?[Yg&N17VkBp
%7uFSrZDe;^Lg?^h\r@$=<j31#/RdE,Y>g>VGdkG8)^pT#aIY:`+*OLKlK=<#P4C0kmi-qJeRMtdm9n[IV,hW@JJ=P%$B)us2G>39
%V=s2>B@4OB=I+S&'.l5s#ReolKgfNP)l=7[@Xn&l1O3,K*UM8:lEMSTEj2#tQRZ1k*M-7b;3VcW7;\D]lq6Zq/(UGL%B+f3mBMs.
%Cd\FsMR&t_UlD'V=":DF_%nWh@pBt<ARWnm9,;\hq]q+777Clc)a_EE<*fGb<utE!3p\q\Qs>WP/.L@kN%8Vpa9p3,KgfWQ)ahQH
%<*h__/bNNc/5*qTBM4'3L]%YUpR.JSFIdPk$k^*LHhGUkeqe`L`Hi-#4R<r&$^fR;$4[ar7;$*L_o/]W>s4r7eR9[O9>n8L94cb3
%$;D4'7;$$J_o&WV>j]Y!]!.5OD$$#XmE([*Y`E,a8Jin6MU'X.L4rp4[X'7Sa2>V9LtgIqb4;c"fbX._OVOB8$B*3X2MR&oWOdC%
%>;WUGF87:n@aARX-?e8oBr3:03_S3E-?c6ZlBQ0m'721Z!6[4(=0tC4]-C<0;Nqoe[;?<g]2F(Mb-pMC+6S*]//R'I/ZIAc!E1[L
%'G[1@D%m`^UUg6'qPkWcfX>5K3p^JCp7i+EIel'('GlbRD%4pJ?+IMWfmSS/YQ:##@f'd`@O!9\;%s_(X_j'GKjC[fqY@bo9+%]O
%e\?Ef?.f-Z\PU7o]S'X@D58L.6Xsb5_fT<glE7:M$EDb08m82%gRotEKjFGt#NpqaU9Uu*@CiZneQ5tgISHbM2n5VV'tXt9"B=_k
%iRf2!MM]?][YAM6Y2!<"H'ZUWM3DL[f5@7CMN+RM85W>C[^@td)g93olImU7TOJ!P>K(In'JQfjH`8(h76/ateCH<rfTiM<X8N2M
%Oc%sQ!*dFNVb5o/Cd<\dMSc*mW3'LnYU`dVcTFiM2Sub!m$VNY`C<sKVC3u6S(\dX%_GVgFnLFqWS"F'fd_1:pLI7..m0k?U*qH/
%MqT)H&\E(3[DuH+Yr=+>@aA.L.Q4"&,=PJW=jdL/Z+7Mn#$Y!1>MH51(#+?mRFjCaK/cbn'qmd-$l,8cX.SRt_b)6j)d-;n[QRb#
%2e"!_3)^KV;eK#J7)e<fC6,gQM1)bF&QgNk7pGE"L8PcH'P0^G>8tN!jpGmb[[Bg*?tHCk*c8.r)b@erU87!(CkJ,-gg=p?Q7B-G
%P\"<NZK4^FN=&Dp,t2HR)aqX,nnJ]D</<[@I4iHUP8"S5bI%l?85WE0G.'\1Chg.[_3Rc2A7_1]*c/A!)e$RNU9NkJCkJ,-gg<3s
%/Xb7.=X[ZecX9BmG1e6WVC3uV451l)2HO#,A4n7-_Qll%R;C9h/k?_9'P0^GCE(41jpGnM[No=krFf=Xp5HFj@[@*hm>7R5kU^S'
%LtLga^=o[eo$N;2k'c2`Co^qm+/RW]dr/_bM%NnH#&2%/ggNA&aATM`)dul)pAC"gCh*]^C8,a*/8h3s@i&mb*o0sb)gdg^#adNY
%QXps_`ZF;4Kgpro,-nZe;iG"\a?&'CLl/J/fDnSa453J`MQq6Vk?sl0-R)dL0ZD[uR]LQd:=.#+E2/dYFtUc@f[t0#JSCjCLhpnF
%oO8UhZ*rP8.GTi@S1GU@qkJp_Cd8.oMR"G3Ymo0??*M=0k=H$5f_J\NC`D+/-sV_%p.:W"$Aup52G>oMi>1`a$l.3q&XB2&gN031
%1H(mm1IY^ag"(ml`\-%U4Td;#fEf[KZ"KjY*?/G'RA-pAXD>^1@i+F8p.#\IfO\Fi-"D:PTjI)m6Oh6Q`C+6<)l=C_E/4*[[3T68
%:r(&ATpAr",R$\qZD+\%N?MdJm]`:nQ=T?F2CqM@T"1/'lnnE-S1+b;5D8a;+`-M^-.Z+d;7IG^@9GLshcNFh7TOK(-n@?:g))Sg
%i=9W6[bQeSQhhh7Ha)U<m*tc$S1+f'cF,WcNEs'6g)`RcM[cb();Co<p0o6q0MiGtSV:nh)7sjE[7=H(`C<akNU>DbMm7gJROJT%
%cGhbsO'T97g9W@iA!d-<[!cc:[bQh4g-1?L7:FTsg;X]0$eJM,CeI)Q_Qni2^Til]NND&/;-%e)[P<0r_Ca=pgQIV'QJ;U,p<9u+
%A#Fa<Ar=I"Za>_N@i);Qp4j4DfZ;4`Z"LL6*BPEDH_Mo;3d]Tu2Kn$plPXS3a"I82Z?5H$D+VcC"djn(U9*SFD56mY+!&q!"dY3]
%m)s8j</j%0'ro8ka8GSa=A<7f`q$PAl,G@*AGmY?d)+Vk#g;eDkD.u*1FkF`'GZV`D2Zi&?*MKJrnlGt/C]].ND74\Z&eO+QD#>r
%+_=#0,=PJWf\EnhmF[-HX:5lNZ2G3Xe;\=0C_uubBqJS86j_7CfsWTJfS,3aO(=3BM/B@3"adLm,`Imt@c*f"34?ka@\U-/D..aq
%$^XuAJ3k_DJhg>B%k&<RZ'c>s.12!QZF5I$`\((u4l:Xs)>e(TJF-efH(qTLll24<&giKfU9U\7@B-R?eQ>%3Pnt0UYn<8_@bZM]
%@l60<68M&=dFcsW0\+g0CTIs[19hFVARZT,i*eDiH_)W4)Je%BVA-XMKlt(F9?X0aa,V7r_m]3#TbRBHDh%SJM5$eZ/88=U;XD70
%ehbd<LqQ[=-MGTh?t(oB3)^KVXL"N.@U`8koh)W&@NT*tZ:sVQC;Ij&@4D(!c4kt$BL<`V`9%Qq_[H\9`C<t,M<th?N4mjP$dKH?
%7;#+07)e:$CI<eDm,Qk$/.qa_"Zru-;"?fZkD<ZBZ`"<W@8hgO%(9Dt%A7MFgOnmr`+DhbU*qKPbM"'W2E+`bYiSc!6tL,c1Y?.c
%2Sh^97:FSHecsO+WPa#d>HYq/Y)U6FYW^WJ0D5iJg*^m;-nICegE7CmG?E1!9,]_*1,\D9Cp=eG@DSA+YimWSK6Z&(@;Vs)KtX\i
%QEZ>^:p>A%s#Edf&tO/^&HA3AX&lAK!?3^qrq/smgV63QBV6b&3pYKBr\\n$cW!R:FTPOt^L!TLr9O59?j0&8Z;PeQ[6a`Vbf/-3
%mD;PFf_>'I#YTTuDW0curq63]gK7<^6rp`^qQMbu=8R2'1A5-4/CV@Oo0`)POVOB8MMfKl2G,'7`q&ElAoJY=gV83[M`30S?f-n^
%qlHNASZVbbqaaR`7$b8iqQMdL=4cE?Q#0p\CKqeY2mAoq0.H*mO0[*J4AejA2R[&jYVS1>hmWsQA6[\B`*sa1oloL)')$kQ%SRP4
%6tB::V@PaeH+!Ze8&d`/iab(%p7iY=P(Sami(-^G6oMG]qQMc_=8T0%AaI=K8P';?j^:.M\WVS.p.:W"$Auoj2G>39VXE_a!^amj
%Cdqtsf`#-tPoOU*Kk?4Z,-n<[dtaKn]6XWaYco"2Bjn299--".Jhoi(&R!b@l,1g!?X8G(i33diAn?aZAR\_j"JLW7p+_r4a[m4M
%eqPWlcI?16@P)iW#RYh/1Y7eF%B/2U;-%eiZnXE(9]aeTfRekVrnGE7e?E#Y,n7Inq]sH$KgfZP)a_Hfe6_O#>3s.=<gJG&2mm1)
%,:bHG'G[0-D%$_4;g7mC[b-@`ZVi^_;o>3C[ZH<Y\,&3c'Gd6VD%%.@;gn=4[TJ>[YUgODPAL=6)bIksU87!hCh&jbREDRC[)G@J
%-=rUt*c2:QfDl<('SStgAK/P*c;\+5ZRlr%hlsJI^bi</[Ol$!pT[NR9Mno6f![;,lqHfs1Y[M;c)`H.gTt`?&K=l(OeSf</8\mA
%fU9=O=1/8GqdsCg93]AAfp618^/*0N;-7q+[P<0r9^U@\gObL2YY63eAm=o44$j)a2,S'KHeTB(G,Fuu'lH=Y^/<QZQ6g(fCeI*<
%Dnm'G'P0^GD];-dk2tr0m4!.]OBq76_1gN2`^_+ogBVGk-ncL>gE*.#4*,PP.1(iICa<TFf^hJ9Z%3UV.*@CdhR5r=_Tl+c>u,eM
%-$6Dmr;oKD0'q<Y8&u<c@5n'Ur:c>JW+^!aH^HGPN;_;WId&.+FKsT7<@eru3@X0$f5%"2H(pgBlth$97dQ'Kf(Z;`3'e@mm:Xb.
%Z!/tY5fTsG5CmgKQtU;OH^I:h9^UB<fsWf$N/aJ])nQt9,\&&K3)YtUNFcr;;i%!L^:I$8^r:2$?2s;$g\"@tLQ/+2JYJNF/8BO!
%3pb)@eL_XfUgbPt9?"?;9&_nu$7Bhj-nH9pg)d+$4&^S#b-RmQ,:lL,Sr&b4CkMt)C;SCV<jb(a.<_QqC]A0Y+r.`W#Kp/Q/\iV]
%`J2VF:)#!C@o;!uP[\8TY[4T#AF,9_aOhPLai-_KE24m43_S0L1,el.Ha"e4]3QA@j^QPD9.kC)q]q+777Clc)ahTAp?LhOo!";!
%`C<moMeu7U`/WEj$I0?>7;#O<7)l).lPXOqak2"TYZu!?[Tn\qlTU.M79S$kecp-!\]!3sD'g'GZa*SI:U\o5NMPJt;,VKO[R"/7
%C9X;O2Ns%.Ub!88Jh;1U""H-)'G[0eD%IAMqlAHs"[q^K2??Ihp0c(/fX:(00N&T"SXjU/&"D:R=0Nt_)d-;f[Kg#S`(!dHVC3uV
%451l)2K`-*?qVhi?b-T3fJD3DM-]jIR]-V:d+R(V0sS:1H6uiOYn<:5@aA_G.X"7\@&,2$3a:>].Q/#EYA?i]G2LW3V.+e[,nmm;
%?j\6<U8#!$%:WeENt1KbCbgDqA&!L'9O*NnhL>;L`h&fO%McrOA8rQa(HZVl[='>YEA'5CZ:&O/N'(nZ"Xf1Z,-nS8dYaTo_YS_$
%0iHB:me1ul$!X[@rO?F5<pW[B;`%Ad'p5&(Qr`QA/_9_S<7&Q95ftpgZb8%k/%5Bdd'n:pS;:ut_mEl#lESX$EIoOGIuf4sZ0a`;
%YSK<%34?ka@Nr+[%9&1U\APlp-7!%F-VMCd?fXa_MiF[N85W>S[^BOIYnM:_gTS78DT+5>?2nbNQO+"TfEfV@.*@CfU,G[oG2`Sh
%R:aRZ7T,P/D,6G8V:ZY\i_3'K:6@t^Qr<:h"kGKUP)51&//*@W=u*>p(7Zf\Mo_bR9IY.Z''nll'f*&;I^3c'gCk"'@cs:sE2"a0
%,)b//[Fg<tX?G-tLqQ@\&UVN$19hE+(b(?"cB:)?Ln2&lH3RS/YtNiQ//-cj/W&+?m=RArPSKlTD$Ue:EJ&CZ*JDA5fZ;2jZ2KB3
%>HnbUS1+f'cDELSM4M/ng7p7O@[Fe@==UaL>HYq7=E(,c/3<+N(b0^g(2M7)>`0&qC_tj4/bWZ:9aV@E,t2HV)ahS>>[_KsQ<UU+
%Pbhi9[,k?TN=&Dp,t2HT)oKThggBHjQ92@pfE<`?]1c,<`(noJLa,>kd952C:pC].=3kDM.Q4T<<,>@=gkh#pi(QjI/tJhU$l(jD
%Jb;^FUgf[3+g=u5R;>I6:AZ<]'SStgBcBFY:0_3jP:`cd#g6,NB<jr@4!@TX;Nqoe[;?<e4)ot^B3R-rbC6fL'732Q;R+[NVY3DT
%;KT@U;,$>;qWc8l.j(>7Q_bA``4"QK:EQFco@%Vf7>]FEh2WV[fSM\k08hAdMiFql)gd$)3]=9q1IY0gf\DK8`Rp#NXIgU0H!*ER
%HV1_KN."fl+SB4@D`E-:-q]B:g3//6`D4omIFp?3HEdt\@+s8RHV^>=liVKaEMAh6ltf1Z>3nX?ejhMi:rY]m'4o;<LYYbA`J-0q
%Q7*srgY*7:'0C2bojQTYm_hReQAU+'n&a@A]oV,;;,T5o[3J?iG/==H,>V'"`'-'Z>JrE"\.O(/ZH#O7EaKh)8qLa/>[Dj215-+@
%OcuVMgEVFKYg3[ei^cpI1j65N9HSH;mcp3MahgMJQA+]t(+!d+"\4HUU9UI6@Ht'1PuenQUgWXMR;H>9E5=$j'6YdNROBC!gY!19
%#Wm$Aous`&?S>)<^\0(6p,-iA'1GdG=j%#sYIV#d``^`n'<ne7CQGg#?_>s&#B?Of.meU9)#?+V<Zecgk9=_QAa.f".Hk(O.6(.g
%'V2pR&GMVDX$+gM$[0Z3J`U3B:8J_B@Kf8ZZD+[q%AI0MBsj'ii\ch'`G<(g5R7!s%EP1%6n-MdcN_e"\Za^3/N7&^-d0-1pd#YI
%8.(=jAOU5t)aq@$^1u!$gju$=7UV))L&b4]T3'bPEMOp38S:a:7(hZrlBu?X]LGqfGl<eWehrSA"%>f/=jdMZY.:W[Am2LCdo)RK
%](SgUde1.V-QX_ZMU%ACLigmQeOBlpf1=%^Y!(6cEK-X,4Aedop9[,5CG)WYTpCAt[%Ag@\FrUS^@cad!"('1U8"ul%3f%u8bM,>
%goPJdFgA2`;"Jh=p(T-n:B'4]OeT(9/8BeO?W0VjF8^#RW:h,iRA.)rIB'tM9Q6RO,pH"9.';+R:u1a5>1V>OSK8Bo0>BU"jg8)4
%CqRJ*)=&-"';\*-4WC9f)Z-MWqp<0flgl[nik&N6?RE^klZ6l/p*<L!6l*+;MQX4OqS#2,J:LdNg85!WY02&!,q-;f8)K*q-rE<!
%f!/XEY,RKY=i*CZTN@,39We0El9CB'<fNL)4AASVa=9)A_)9_>5?H_jfiIck[X%P4<:*bZg9$L#4\_.QOX4h2Ebjs6INBaF-0S;Q
%,u^f:B*f;WT4=M2H(pgb/7?Bf>#PU4a&^]h&X-p-HZ1:!)CU/NU6(24?c2M=A,13an+)atXNtrN8X;tS/?<0Fof6'#_.fX*Lb)lM
%<*</eoLuH%;K#198NkNQRFH`nc4f;-BBL1#Uo)H%R9rgd50pJnR25J>Y@LLkZHhDk;,2eQXs#'*WgbX'4&U\gE\\)=J"BJd20+<?
%6oiZJ]>d[GWG1'!/9P$dkIE5Fe>Fme;K4Ql!n0O\d943'E2T[Gg*8/6<WaX@SbANU<)u5lln?+/9p?9]"`+TkReijD_GXn:o.MI;
%;k3R&6%.;!$-gr[V!'@;@sHI%0's7:lDfu1.8B^4Vmbl3rT0F0M/o>sKT4qa;m5hPY\6]T-W?E+k6Vl',:>HHPS9T6C^agB.]#;F
%U+X,.=gGC^=E:7ilO_>S77:bl)afje-KuCU;3V8SVC"It.r*LBP6Ack+jjH/`mCN\6[IlrPbcW@4\)@o4l\%Qd[Ll>-;'-?!]GoZ
%rRf>.9V&`.S?O,AmJZ/:UW;JJFL<cSOrnP5I30kpMT-/"%+7R]3cfJ:\_<B&aH,2FUse%Z[a/8C\m4RZie.Mn@\U,Z4eqXG^I%Pj
%Ren#J[<`9>#h%8G:;Dp.[Vc!=XFcJtVlXe4gGDbu1fghnQjRSlRb_^rrXCIkUt[c1rc;^s"mPa;+b$<c+%o@XXNY069U$-K"md,(
%J,8i,n+VrGCi4D@5t?5b7FLeP5'*OS.j"Z5pHNg_eFGX(UGN:V)QVIG9`$Xqc-8id8<I57V#0&<+l2#,i1KH^s%]nDDGu/I6n-Mc
%]UiQ#Vk;.Y*6kVJ<ZMimV#*h2a7Ba]F/84"hjdsE\=Z7Tj).0c77#>R]UiQSVdHL8?`l7FqnWB_Uc0^FP.%:1chdR>A@_VC>N][k
%-mor!f/$+j[!BpH`F_oLj@T)kT6Pj&ei[ZmYO-,Tq_hpH2CC=WPS9#clku[BqRNd)&RJhT\bWGXU+3i:Gr?hC8fK,UX4M>sI]gq*
%1en_uN>:dtVK^bDk2L9ba&mAY-RSM4Ia6SNC!X'E3B-*:`<jd&j[<b])T7nieE/mKD>"rBY&l=\PC=6jV*2j_^\.@!ji7k^CEB:&
%U7_d/?t7:+YM5RQDLUUPeP-,nod7L[BmZGa5P8+$4LdDfH(p\ilsPIUdZ<2=VVQ&CQHH(sU&i%,pH,Y'dW5kEs(Aa%rSZgk#)\#,
%Z\T(M9>?("El6RN/9O[*:sSBU75eN,3D!SWql+m:8naY?,u&"i)oS(l^%pf>Zc-$]RXV&5VduU^^9kr5P\k8Q#8\dN:_XV7I;BI'
%)Z=9+Z.(N<SCCEkQhD8CF)jEn&[[15b_%lN'GI$SC_0tMeXNW:c'D*qQen+jI(:ls.JA2jSbN*%%rP'[SgYpHbLdrKoOBkAb8"Yc
%Z/eQ%s"!$f9/dZaB8WfuUYfuJG&Vb!*s4qtdFlMDOeuL1\[^hh.@-do%Eaj2*L$3Imrod6<B!Z49p?9]AS_onqRQIsXi!86:U+G)
%:GK!.09Y/!l'Z"mH*\mU:3`E[-p$,8+QE%>=s%b`S>((S+$DjS@ICcid<8<jZd5PQ4RIVR4q0#,3VG`W.a![j;Dq(XZsD9p423Q*
%cZ7hA]UoohJmAAH_u8hVcV7+t]:T4(@%o%s,$W_KrR1.G4V)Iam\c9>r*_Qr;kps-"*QGr=/!A.T@jD3:lf+M66eor&_Y?^.@IUP
%Hb]HlicE4rb-6AEZYJ1fPinZGO1NsoE\ij3cK/i6K6`oUFHOgaR'LG<Y4k$#X$>KcMO0NEl]O3,QCUqAVi819`U5JjAEnR1@k^Xl
%'9TtER)WjPY+rT/D*Pi.ZZoo_M:)[P=^A$#8!!-8m3&-T,=P`I=jDb9SUN6YjT]gpTY*MZBVon)dGm8?GH1',5GYs,)OWd-.XRg:
%-6gXd0ZDLa<HE-`\g/N^I_=/l?C37&Utf&.XQk(,H*ur&-Sq:2RA-pA/82r.:YUT*_`d4OBCF'UL$8XtM`0@lSr&c_C4lb'MS^RC
%V[_*AD&7B*%%U1(jaIrI@hq`_/'G*h!7N"(H<SsHLDl[28rC]a2G=jn?.Z-g%m=E>_NO/Cb1e[gL:'6t#+F2#$B>g37;#126a8NN
%dSur(fH+D%jm;8S\Mbo`\R[jUm;#jK5FL7i#pVl9&_b]gOK@i\f&Tl=#qA12p!mt_>b=Jdg+9)opRV#Hf%!P?.l^HA(7e0:%+X&a
%Cp1!2HaM&\f)USP'/2&*XZb?\P-'i]*3%'&d+R!iYc[<0Su2tE*c:ND3hPkK\4O@>84Rg[H@BiFK^0%?iBU7<F;D;>N,&M<,r_V_
%fk19S5?Fi57chAT-='i]mGqLS.l:.g'qL%q%-cIuCmg`6RA_*$7@W&]J4c<f[3s^(hK:IJ,`EF+7;$<R6bIRD/iTV>Z>K>Wjj#"/
%gMLL1Q`iR*G*9%k'q?][MpBa/L43tUp<9[4cX^8K2uN&CkCl/bZ5_FPg6.#XpIUf&$B*3X2MQhN#^!PQB='6tAYc/(""_!pL-;jp
%HIs+7Jrue/kcAW2LtGJ<jl5n@\(M[Th6>b^Q96+f4kl-VNMtc';,hYG[S^#jMll7<#EF:?Cgu-OmNN8?Z?1GuM*4*%*%Hi(`oct%
%dUR-\Fa;H&h,d?LYtnb=WS%1fRFk%;NYEd.@r6Q]WNpuVlOp,!CbJ+&]%B9j<3ZshikBVgMga9fJ\I2p7-2qNg0S1pXmNu#GP\OS
%H_QF8[HD^N]%DdfX8P:$qe5jL$krk6@qg:DBskD83pl1LU<8<JG09^Y:Dqp%acR(;Z&ekQ_0McFBImu'0\t<'?'dThk2])h2M/5F
%lso`FOcGF&^e@U+1cDdDR"jr$\k[PIkS"]XYu=fWJ*Ya$OTIR%O9-(a6.+?9?==bTmBS?gqQOlST&aB+.a,l@kK;-6@0Apj!Cq..
%-nQA'g+,kC[9_E2:X;j16?[t8`=fIXX<f)1Bu-L;ZtM",Y:shFG%%:5IJ@-&N,4/Y);1TjdXb$aZ(hbg'LbH#@=*]B]XI.;r+XKc
%A7TUX^rTj8QCMc%"_NXtU9gs2U1@Wl:X=,U:3L@kQK;Z'FA#C&OnMA:.12![_D[.5I??dcbXNEpAKra!b!+t5QE4nu"c$j@Ep;q,
%K36eC.Far-#?f`ZDZlAl4nC7l?m@6_<0S/h`GH/>q]_$R"7@9b)edo6p'eH5KtU'oJYJt(XDWZ8fb[60(2jFlg"t\1Od8/j/XKo7
%K.p/e'V33[&1dW%L"aH3+>"O0=^#uPUhhX[q73G2IVkr1/3:u/+C=b1%eU7>jCKPebKHL9Q<LPM(*"erMpClOLmWUQ6p8F>M:lT-
%>dg$5_C_50j+?G*%Mbg/B6bH7be?WCT&H!ZCntX1fdkj0RZ4Pu9Mno6f!drpm#+8HcaRFsDqfH)fdkpRRn^!"85W?.[^T,`m)4n7
%GC4gY8_fN#IG^Zq.!t_@-ZN.0?6=Y9/W,P/*]H\oG+rm?LOp<[lH@K@.3pCe*fD98Zl'^N/'6!53[2I7$rK)p`Uuc.`Lj@mRs8pS
%4.l,")mD9uVPV1-S19DSa=9,DEH]3rl[8OR$*1DQ3Ih/)[IZCu!FL2D#u8?2;-65p\T-?0'D>_h[g\#qPjNJ-o49u;q=GU91h\Zq
%0N+,MOaV,;$LL68f1uB$=O>f7>,Jh."<55^`U/4HENCQB,!4U?4k^3gY9*lo0&,2'rZ/=5?.sR9'IqR$>[XKY/0ZV#3,RB+Wir$"
%N8]Bf2WHOrDL][]\=gW##+ifEU;VkhFlQG9-gJJ'8J`CbJm^Xp46iQXc+r7>;.)dm]5_Sn'=M<3\TgDuRh1r&GFk3,MmWdQNqQ.D
%<^_,CEJh.;eR7jMM]t+,Z:42PF]%43>]?bm0KNFo+=_T00'jU&;<Ap$!b/%O^#La1gg^aPMfUb48O@d[(d</<7dT:eo+FDJgJ#gj
%](::lU!_-#i)iiaF>g`sPjUrIfIQGheb6L.:b]$>Q$B9FRu+tlU;Z8sGCsSbM<_?YjJBS-!bR;F/+Z*hp)"fhJYAgFkU^t2W83:;
%Z<-1bdd;#h^h)fe/+ca.2??0d7>]FFn-2b&'@gWscqE3L9['lV=6QLSm4fNL`OV_]kcB&^Gi";"Z?PM$e!l2^WqQq8<5Hhpi)iia
%FLJhJ<:<5/ffSi#lohLgfPTAiLL.:"#FqX$U;Z8sH%Y>;M/'@ukXFBuJXOCL%_X9<%q9<M'u`USdi1^M:/mdt;_L2hj+>=qPeMA*
%-0^nD_6K`Mk\PR_B]%U:rET18)(t$rrkk4^C:T-"#!h0Sm^ta_2Hgc`XKh2AO9sop;j$d+_937PF(bNdn3l[!@t@&)2\C[`7=iig
%pV+EG&\kSHHW:"HFi'/V!bR>Ih7k>!Z)%9:V8H0#.a![hZM3H,MYW7>g3M\0icd&k^_FPqdt6G#6a$,N;,fA1]nT,jmi.b(mlQ91
%K&1^TJACfkgZ>YipJ%a)85WJGQFnk%;8dCQep\77d6chOiNgDjFuh9%IQ)WgiET5j1q(&O9G$k93jp+9-8;*ApU26tlF0(K!X%^H
%!Wu@iEREG/^:6Rn^StiBH--sX,_$I]9E)@)bmb*'h[Rok>Z##gQFqrG&Gqs.[TD0/q7G[(A(f`qmumTC^q`oH?8T+'0/$2`DsZ5m
%D]R+2g#'`kd_G[,SOWRi6/9;UU:b.jH&\.5!]Y=?n'F]/2uj$bp^4]FJ.jXs<tguG[,?q<J5c.7NkM6=pAr>d"an9q;SW;NSh#\W
%dY]u>"&AgLc_KVkL0D8.RH8t.R:AbhD["GG>Z#$b[_,HgE%9h<_3^V(7mDQV-%S-3eEkGq^f40;KN>c`*,qq;?HJPV]a:&XJ^<Bb
%mG=ULi!$$9![G)?NM:u&+nnUC<:W3M-_h?_I';U(/`23ibnWZ:B\aWH"/fJnQ$fRtRuphppe8D,pY?IP`OV_a#d&KLLu;7X]ot++
%i.T;e_.W?#c>Q#RkDCH.[.93NJl>&29"nhf_lM3$_'^nsJN(@JAr>"\[.''LJQ##3cFr:i,;)Uk?a1D)n:k>e:f1PP(;<X.E2r0Z
%Z'RTB!=tU[JZmQr*]O4R;`0-*ru]k+J,V+9s6'E,U[e?qKYQUJ(4Z,.5Q&!?r7g--rSRYDrX\N8s/1@lrhoemIs(`tr#b`[nG)OW
%Ie-Y(d2jmh"S=cj\\nEhlH;d)L9#CohX[9<iTD;TO8RY>H1ts$pRAq/s1eHks6>*;s'ql)rEoD.prgFb5PQ&pVZ#o>r:*#Mo"4ql
%q`k&WH%5>8s6b)\q#,^;e*m;-huE[O^\Oopr:tR:rV&O*pW#M4\"\Abs4*/pr9<s*rhk8@e*heaq="=AT:\oNs.T*MnCN0g2uiSY
%s5pNa-SBn=2?~>
%AI9_PrivateDataEnd
