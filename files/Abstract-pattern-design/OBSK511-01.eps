%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: OBSK511-01.eps
%%Creator: Adobe Illustrator(R) 19.0
%%For: Jelle
%%CreationDate: 2/2/2017
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.0.0 x44 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2016-08-05T06:24:29+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7hpOn2/n63h8wa0ol0KU&#xA;FtD0cPtGN1+t3JQ/71deCg/uP+MlSFUPqnnTU/LupWvk95Yr7XNSKx6HqNy6rGI35ANqAUqRInBg&#xA;gWn1giicTz4KpnH5JOkwnVNKuy3mQVl1DUbtqLqBI+KO74iiptSIov7n9gceSMqgNE8w2f5kxSi3&#xA;Jh8u2rLHqVmzIZ7qZkEnoyBGYC14sDUH9/2/df3irtb8w2f5bRRC4Jm8u3TNHptmrIJ7WZUMnoxh&#xA;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&#xA;NvFTiqr5H8j6l/zkPqWq+dPOmqm20q2Mljo+j2MilrVioKsykHiq1DfEOUjbmigAqsZvPze/ND8t&#xA;LXV/ylj1C1v7q0mSy0vXxMvK1hkG6K7HilAwA9Rv3JqOy8VWR+Yf+ce9a/LjyRa/mFovmX0vOeiV&#xA;v9VneRVtplkpWOBnpzO/Gj19apFBULiqE0fzL5r/AOckvNVloGqXUOg+WNIhju9U0+1lrLdSLRXe&#xA;NX+JizGi1BWJTvyY/Eq7/nHbyz5G/MTWfMmvfmDfDWvNTCT1tMvv3apbunF7oGq8uFeC8aCGgO3w&#xA;kKvL9f8ANN35auvMnkzyV5ku7j8vr26WOWcJ8LoftcSN6GhUlCvqqu4ptir138zfyy/I/QvyP0rW&#xA;tF1UJqiD19E1uD4rnUrlqF45EBUhQV9vRp41DKsO/KrUrP8AM780dLh/NnWpro2dvHHothdAJDdS&#xA;AKY4pGHED1BRzUVlOxboCq781dSs/wAsfzR1SH8ptamtTeW8ketWFqA8NrIQxkijY8gfTFXFBWI7&#xA;BuoCrMfyy/LL8j9d/I/Vda1rVQ+qOPX1vW5/hudNuVqUjjQliVJb39avjQKq8i0DzTd+Zbry35M8&#xA;6+ZLu3/L6yumjinKfCiD7PInegqFBct6StsKbYq9Q/5yJ8s+Rvy71ny3r35fXw0XzUoj9HTLH94r&#xA;26JxS6Jq3HnTg3KomqTv8RKrv+cdvLPkb8xNZ8ya9+YN8Na81MJPW0y+/dqlu6cXugary4V4LxoI&#xA;aA7fCQq8v1/zTd+WrrzJ5M8leZLu4/L69uljlnCfC6H7XEjehoVJQr6qruKbYq9d/M38svyP0L8j&#xA;9K1rRdVCaog9fRNbg+K51K5aheORAVIUFfb0aeNQyrDvyq1Kz/M780dLh/NnWpro2dvHHothdAJD&#xA;dSAKY4pGHED1BRzUVlOxboCq781dSs/yx/NHVIfym1qa1N5byR61YWoDw2shDGSKNjyB9MVcUFYj&#xA;sG6gKsx/LL8svyP138j9V1rWtVD6o49fW9bn+G5025WpSONCWJUlvf1q+NAqryLQPNN35luvLfkz&#xA;zr5ku7f8vrK6aOKcp8KIPs8id6CoUFy3pK2wptir1D/nInyz5G/LvWfLevfl9fDRfNSiP0dMsf3i&#xA;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&#xA;HddT9CW3iluYTMIwqss9obcr8Ekv2eR/1TxBNVXmGqaedSuNY1vQNIubby1bXFaHlOlpHO5EEcs1&#xA;KV24gt1xV6l5/wDP/wCS+q/kvoOh6HoLWnme0agA2e0ccfrEstxx/wBIFx2H0njxAKrF/wArLrQ/&#xA;JH5k6Te/mFok50/00uIUuI2Uw+sA1veeiw/fIvWn0ipWmKu/NO60Pzv+ZOrXv5e6JONP9N7iZLeN&#xA;mM3ogtcXnoqP3KN1p9JoWpirKPIHn/8AJfSvyX17Q9c0FrvzPdtQg7vdueX1eWK44/6OLfuPpHLk&#xA;QFXlul6edNuNH1vX9Iubny1c3FaDlAl3HA4E8cU1KV34kr0xV6f+ffmb8tPO2s+X7T8uNHdtT9CK&#xA;3lltoTCJAyqsFoLcL8ckX2eQ/wBUcgBRV35CeZvy08k6z5gtPzH0d11P0JbeKW5hMwjCqyz2htyv&#xA;wSS/Z5H/AFTxBNVXmGqaedSuNY1vQNIubby1bXFaHlOlpHO5EEcs1KV24gt1xV6l5/8AP/5L6r+S&#xA;+g6HoegtaeZ7RqADZ7Rxx+sSy3HH/SBcdh9J48QCqxf8rLrQ/JH5k6Te/mFok50/00uIUuI2Uw+s&#xA;A1veeiw/fIvWn0ipWmKu/NO60Pzv+ZOrXv5e6JONP9N7iZLeNmM3ogtcXnoqP3KN1p9JoWpirLPI&#xA;f5i/k1pf5Ja55d1zQDc+ZLlviXcveSNy+rzJcUP1f6tXcfSOXNhirynS9POm3Gj63r+kXNz5aubi&#xA;tBygS7jgcCeOKalK78SV6Yq9P/PvzN+WnnbWfL9p+XGju2p+hFbyy20JhEgZVWC0FuF+OSL7PIf6&#xA;o5ACiqXapY+f/wA+/Pesa7omjRR/V4ORROMUccUSn0IpJiF9WeSnEFuv+Si/CqifKP58az5K/LfW&#xA;/wAvZ9Bt3u5XmhjmuIlQxGYlLhbuBl/fOvROfTo1QAMVY1N+XP5h+S9G0L8wbzR1GmSzpPbC5jEy&#xA;qUYNF9agYfCk37PLr7VFVWXefvP3mn8/vNOg6HoegxW1xbRUAFHcO4U3EstwVBS3QjYfrYgBV3kH&#xA;z95p/IHzTr2h65oMVzcXMVCDRHLoGNvLFcBSXt3J3H6mBBVYjD+XP5h+dNG138wbPR1OmRTvPci2&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
0 0 mo
1000 0 li
1000 1000 li
0 1000 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
f
gsave
1000.02 999.976 mo
.0239807 1000.02 li
-.0239795 .0239807 li
999.976 -.0239795 li
1000.02 999.976 li
cp
clp
975.023 970.477 mo
970.523 974.977 li
975.023 979.477 li
979.523 974.977 li
975.023 970.477 li
cp
0 0 0 0 cmyk
f
975.02 919.577 mo
969.62 924.977 li
975.021 930.377 li
980.42 924.977 li
975.02 919.577 li
cp
f
975.018 868.677 mo
968.718 874.978 li
975.018 881.277 li
981.318 874.977 li
975.018 868.677 li
cp
f
975.015 817.777 mo
967.815 824.978 li
975.016 832.177 li
982.216 824.977 li
975.015 817.777 li
cp
f
975.013 766.877 mo
966.913 774.978 li
975.014 783.077 li
983.113 774.977 li
975.013 766.877 li
cp
f
975.01 715.977 mo
966.011 724.978 li
975.011 733.977 li
984.011 724.977 li
975.01 715.977 li
cp
f
975.008 665.077 mo
965.108 674.978 li
975.009 684.877 li
984.908 674.977 li
975.008 665.077 li
cp
f
975.005 614.177 mo
964.206 624.978 li
975.007 635.777 li
985.806 624.977 li
975.005 614.177 li
cp
f
975.003 563.277 mo
963.303 574.978 li
975.004 586.677 li
986.704 574.977 li
975.003 563.277 li
cp
f
975.001 512.378 mo
962.401 524.978 li
975.002 537.577 li
987.601 524.977 li
975.001 512.378 li
cp
f
974.998 461.477 mo
961.499 474.978 li
974.999 488.477 li
988.499 474.977 li
974.998 461.477 li
cp
f
974.996 410.577 mo
960.596 424.978 li
974.997 439.378 li
989.396 424.977 li
974.996 410.577 li
cp
f
974.993 359.677 mo
959.694 374.978 li
974.995 390.277 li
990.294 374.976 li
974.993 359.677 li
cp
f
974.991 308.777 mo
958.791 324.978 li
974.992 341.177 li
991.192 324.976 li
974.991 308.777 li
cp
f
974.988 257.878 mo
957.889 274.978 li
974.99 292.077 li
992.089 274.976 li
974.988 257.878 li
cp
f
974.986 206.977 mo
956.987 224.978 li
974.988 242.977 li
992.987 224.976 li
974.986 206.977 li
cp
f
974.984 156.077 mo
956.085 174.978 li
974.985 193.878 li
993.884 174.976 li
974.984 156.077 li
cp
f
974.981 105.177 mo
955.182 124.978 li
974.983 144.777 li
994.782 124.976 li
974.981 105.177 li
cp
f
974.979 54.277 mo
954.279 74.9782 li
974.981 95.6774 li
995.68 74.9762 li
974.979 54.277 li
cp
f
974.976 3.37762 mo
953.377 24.9783 li
974.978 46.5768 li
996.577 24.9762 li
974.976 3.37762 li
cp
f
925.023 970.48 mo
920.523 974.98 li
925.023 979.48 li
929.523 974.979 li
925.023 970.48 li
cp
f
925.02 919.58 mo
919.62 924.98 li
925.021 930.38 li
930.42 924.979 li
925.02 919.58 li
cp
f
925.018 868.68 mo
918.718 874.98 li
925.018 881.279 li
931.318 874.979 li
925.018 868.68 li
cp
f
925.015 817.779 mo
917.815 824.98 li
925.016 832.18 li
932.216 824.979 li
925.015 817.779 li
cp
f
925.013 766.88 mo
916.913 774.98 li
925.014 783.08 li
933.113 774.979 li
925.013 766.88 li
cp
f
925.01 715.98 mo
916.011 724.98 li
925.011 733.98 li
934.011 724.979 li
925.01 715.98 li
cp
f
925.008 665.08 mo
915.108 674.98 li
925.009 684.88 li
934.908 674.979 li
925.008 665.08 li
cp
f
925.005 614.18 mo
914.206 624.98 li
925.007 635.779 li
935.806 624.979 li
925.005 614.18 li
cp
f
925.003 563.279 mo
913.303 574.98 li
925.004 586.68 li
936.704 574.979 li
925.003 563.279 li
cp
f
925.001 512.38 mo
912.401 524.98 li
925.002 537.579 li
937.601 524.979 li
925.001 512.38 li
cp
f
924.998 461.48 mo
911.499 474.98 li
924.999 488.48 li
938.499 474.979 li
924.998 461.48 li
cp
f
924.996 410.579 mo
910.596 424.98 li
924.997 439.38 li
939.396 424.979 li
924.996 410.579 li
cp
f
924.993 359.68 mo
909.694 374.98 li
924.995 390.279 li
940.294 374.979 li
924.993 359.68 li
cp
f
924.991 308.779 mo
908.791 324.98 li
924.992 341.18 li
941.192 324.979 li
924.991 308.779 li
cp
f
924.988 257.88 mo
907.889 274.98 li
924.99 292.079 li
942.089 274.979 li
924.988 257.88 li
cp
f
924.986 206.98 mo
906.987 224.98 li
924.988 242.98 li
942.987 224.979 li
924.986 206.98 li
cp
f
924.984 156.079 mo
906.085 174.981 li
924.985 193.88 li
943.884 174.979 li
924.984 156.079 li
cp
f
924.981 105.18 mo
905.182 124.981 li
924.983 144.779 li
944.782 124.979 li
924.981 105.18 li
cp
f
924.979 54.2794 mo
904.279 74.9806 li
924.981 95.6798 li
945.68 74.9786 li
924.979 54.2794 li
cp
f
924.976 3.38002 mo
903.377 24.9807 li
924.978 46.5792 li
946.577 24.9786 li
924.976 3.38002 li
cp
f
875.023 970.482 mo
870.523 974.982 li
875.023 979.482 li
879.523 974.982 li
875.023 970.482 li
cp
f
875.02 919.582 mo
869.62 924.982 li
875.021 930.382 li
880.42 924.982 li
875.02 919.582 li
cp
f
875.018 868.682 mo
868.718 874.982 li
875.018 881.282 li
881.318 874.982 li
875.018 868.682 li
cp
f
875.015 817.782 mo
867.815 824.982 li
875.016 832.182 li
882.216 824.982 li
875.015 817.782 li
cp
f
875.013 766.882 mo
866.913 774.982 li
875.014 783.082 li
883.113 774.982 li
875.013 766.882 li
cp
f
875.01 715.982 mo
866.011 724.982 li
875.011 733.982 li
884.011 724.982 li
875.01 715.982 li
cp
f
875.008 665.082 mo
865.108 674.982 li
875.009 684.882 li
884.908 674.982 li
875.008 665.082 li
cp
f
875.005 614.182 mo
864.206 624.983 li
875.007 635.782 li
885.806 624.982 li
875.005 614.182 li
cp
f
875.003 563.282 mo
863.303 574.983 li
875.004 586.682 li
886.704 574.981 li
875.003 563.282 li
cp
f
875.001 512.382 mo
862.401 524.983 li
875.002 537.582 li
887.601 524.981 li
875.001 512.382 li
cp
f
874.998 461.482 mo
861.499 474.983 li
874.999 488.482 li
888.499 474.981 li
874.998 461.482 li
cp
f
874.996 410.582 mo
860.596 424.983 li
874.997 439.382 li
889.396 424.981 li
874.996 410.582 li
cp
f
874.993 359.682 mo
859.694 374.983 li
874.995 390.282 li
890.294 374.981 li
874.993 359.682 li
cp
f
874.991 308.782 mo
858.791 324.983 li
874.992 341.182 li
891.192 324.981 li
874.991 308.782 li
cp
f
874.988 257.882 mo
857.889 274.983 li
874.99 292.082 li
892.089 274.981 li
874.988 257.882 li
cp
f
874.986 206.982 mo
856.987 224.983 li
874.988 242.982 li
892.987 224.981 li
874.986 206.982 li
cp
f
874.984 156.082 mo
856.085 174.983 li
874.985 193.882 li
893.884 174.981 li
874.984 156.082 li
cp
f
874.981 105.182 mo
855.182 124.983 li
874.983 144.782 li
894.782 124.981 li
874.981 105.182 li
cp
f
874.979 54.2818 mo
854.279 74.983 li
874.981 95.6822 li
895.68 74.981 li
874.979 54.2818 li
cp
f
874.976 3.38242 mo
853.377 24.983 li
874.978 46.5816 li
896.577 24.981 li
874.976 3.38242 li
cp
f
825.023 970.484 mo
820.523 974.985 li
825.023 979.484 li
829.523 974.984 li
825.023 970.484 li
cp
f
825.02 919.584 mo
819.62 924.985 li
825.021 930.384 li
830.42 924.984 li
825.02 919.584 li
cp
f
825.018 868.685 mo
818.718 874.985 li
825.018 881.284 li
831.318 874.984 li
825.018 868.685 li
cp
f
825.015 817.784 mo
817.815 824.985 li
825.016 832.185 li
832.216 824.984 li
825.015 817.784 li
cp
f
825.013 766.884 mo
816.913 774.985 li
825.014 783.084 li
833.113 774.984 li
825.013 766.884 li
cp
f
825.01 715.984 mo
816.011 724.985 li
825.011 733.984 li
834.011 724.984 li
825.01 715.984 li
cp
f
825.008 665.084 mo
815.108 674.985 li
825.009 684.884 li
834.908 674.984 li
825.008 665.084 li
cp
f
825.005 614.185 mo
814.206 624.985 li
825.007 635.784 li
835.806 624.984 li
825.005 614.185 li
cp
f
825.003 563.284 mo
813.303 574.985 li
825.004 586.685 li
836.704 574.984 li
825.003 563.284 li
cp
f
825.001 512.385 mo
812.401 524.985 li
825.002 537.584 li
837.601 524.984 li
825.001 512.385 li
cp
f
824.998 461.484 mo
811.499 474.985 li
824.999 488.484 li
838.499 474.984 li
824.998 461.484 li
cp
f
824.996 410.584 mo
810.596 424.985 li
824.997 439.385 li
839.396 424.984 li
824.996 410.584 li
cp
f
824.993 359.685 mo
809.694 374.985 li
824.995 390.284 li
840.294 374.984 li
824.993 359.685 li
cp
f
824.991 308.784 mo
808.791 324.985 li
824.992 341.185 li
841.192 324.984 li
824.991 308.784 li
cp
f
824.988 257.885 mo
807.889 274.985 li
824.99 292.084 li
842.089 274.984 li
824.988 257.885 li
cp
f
824.986 206.984 mo
806.987 224.985 li
824.988 242.984 li
842.987 224.984 li
824.986 206.984 li
cp
f
824.984 156.084 mo
806.085 174.985 li
824.985 193.885 li
843.884 174.984 li
824.984 156.084 li
cp
f
824.981 105.185 mo
805.182 124.985 li
824.983 144.784 li
844.782 124.983 li
824.981 105.185 li
cp
f
824.979 54.2842 mo
804.279 74.9854 li
824.981 95.6846 li
845.68 74.9834 li
824.979 54.2842 li
cp
f
824.976 3.38481 mo
803.377 24.9854 li
824.978 46.584 li
846.577 24.9834 li
824.976 3.38481 li
cp
f
775.023 970.487 mo
770.523 974.987 li
775.023 979.487 li
779.523 974.987 li
775.023 970.487 li
cp
f
775.02 919.587 mo
769.62 924.987 li
775.021 930.387 li
780.42 924.987 li
775.02 919.587 li
cp
f
775.018 868.687 mo
768.718 874.987 li
775.018 881.287 li
781.318 874.987 li
775.018 868.687 li
cp
f
775.015 817.787 mo
767.815 824.987 li
775.016 832.187 li
782.216 824.986 li
775.015 817.787 li
cp
f
775.013 766.887 mo
766.913 774.987 li
775.014 783.087 li
783.113 774.986 li
775.013 766.887 li
cp
f
775.01 715.987 mo
766.011 724.987 li
775.011 733.987 li
784.011 724.986 li
775.01 715.987 li
cp
f
775.008 665.087 mo
765.108 674.987 li
775.009 684.887 li
784.908 674.986 li
775.008 665.087 li
cp
f
775.005 614.187 mo
764.206 624.987 li
775.007 635.787 li
785.806 624.986 li
775.005 614.187 li
cp
f
775.003 563.287 mo
763.303 574.987 li
775.004 586.687 li
786.704 574.986 li
775.003 563.287 li
cp
f
775.001 512.387 mo
762.401 524.987 li
775.002 537.586 li
787.601 524.986 li
775.001 512.387 li
cp
f
774.998 461.487 mo
761.499 474.987 li
774.999 488.487 li
788.499 474.986 li
774.998 461.487 li
cp
f
774.996 410.586 mo
760.596 424.987 li
774.997 439.387 li
789.396 424.986 li
774.996 410.586 li
cp
f
774.993 359.687 mo
759.694 374.988 li
774.995 390.287 li
790.294 374.986 li
774.993 359.687 li
cp
f
774.991 308.787 mo
758.791 324.988 li
774.992 341.187 li
791.192 324.986 li
774.991 308.787 li
cp
f
774.988 257.887 mo
757.889 274.988 li
774.99 292.086 li
792.089 274.986 li
774.988 257.887 li
cp
f
774.986 206.987 mo
756.987 224.988 li
774.988 242.987 li
792.987 224.986 li
774.986 206.987 li
cp
f
774.984 156.086 mo
756.085 174.988 li
774.985 193.887 li
793.884 174.986 li
774.984 156.086 li
cp
f
774.981 105.187 mo
755.182 124.988 li
774.983 144.787 li
794.782 124.986 li
774.981 105.187 li
cp
f
774.979 54.2866 mo
754.279 74.9878 li
774.981 95.687 li
795.68 74.9858 li
774.979 54.2866 li
cp
f
774.976 3.38721 mo
753.377 24.9878 li
774.978 46.5864 li
796.577 24.9858 li
774.976 3.38721 li
cp
f
725.023 970.489 mo
720.523 974.989 li
725.023 979.489 li
729.523 974.989 li
725.023 970.489 li
cp
f
725.02 919.589 mo
719.62 924.989 li
725.021 930.389 li
730.42 924.989 li
725.02 919.589 li
cp
f
725.018 868.689 mo
718.718 874.99 li
725.018 881.289 li
731.318 874.989 li
725.018 868.689 li
cp
f
725.015 817.789 mo
717.815 824.99 li
725.016 832.189 li
732.216 824.989 li
725.015 817.789 li
cp
f
725.013 766.889 mo
716.913 774.99 li
725.014 783.089 li
733.113 774.989 li
725.013 766.889 li
cp
f
725.01 715.989 mo
716.011 724.99 li
725.011 733.989 li
734.011 724.989 li
725.01 715.989 li
cp
f
725.008 665.089 mo
715.108 674.99 li
725.009 684.889 li
734.908 674.989 li
725.008 665.089 li
cp
f
725.005 614.189 mo
714.206 624.99 li
725.007 635.789 li
735.806 624.989 li
725.005 614.189 li
cp
f
725.003 563.289 mo
713.303 574.99 li
725.004 586.689 li
736.704 574.989 li
725.003 563.289 li
cp
f
725.001 512.39 mo
712.401 524.99 li
725.002 537.589 li
737.601 524.989 li
725.001 512.39 li
cp
f
724.998 461.489 mo
711.499 474.99 li
724.999 488.489 li
738.499 474.989 li
724.998 461.489 li
cp
f
724.996 410.589 mo
710.596 424.99 li
724.997 439.39 li
739.396 424.989 li
724.996 410.589 li
cp
f
724.993 359.689 mo
709.694 374.99 li
724.995 390.289 li
740.294 374.988 li
724.993 359.689 li
cp
f
724.991 308.789 mo
708.791 324.99 li
724.992 341.189 li
741.192 324.988 li
724.991 308.789 li
cp
f
724.988 257.89 mo
707.889 274.99 li
724.99 292.089 li
742.089 274.988 li
724.988 257.89 li
cp
f
724.986 206.989 mo
706.987 224.99 li
724.988 242.989 li
742.987 224.988 li
724.986 206.989 li
cp
f
724.984 156.089 mo
706.085 174.99 li
724.985 193.89 li
743.884 174.988 li
724.984 156.089 li
cp
f
724.981 105.189 mo
705.182 124.99 li
724.983 144.789 li
744.782 124.988 li
724.981 105.189 li
cp
f
724.979 54.289 mo
704.279 74.9902 li
724.981 95.6894 li
745.68 74.9882 li
724.979 54.289 li
cp
f
724.976 3.38961 mo
703.377 24.9902 li
724.978 46.5888 li
746.577 24.9882 li
724.976 3.38961 li
cp
f
675.023 970.492 mo
670.523 974.992 li
675.023 979.492 li
679.523 974.991 li
675.023 970.492 li
cp
f
675.02 919.592 mo
669.62 924.992 li
675.021 930.391 li
680.421 924.991 li
675.02 919.592 li
cp
f
675.018 868.692 mo
668.718 874.992 li
675.018 881.291 li
681.318 874.991 li
675.018 868.692 li
cp
f
675.015 817.791 mo
667.815 824.992 li
675.016 832.192 li
682.216 824.991 li
675.015 817.791 li
cp
f
675.013 766.891 mo
666.914 774.992 li
675.014 783.092 li
683.113 774.991 li
675.013 766.891 li
cp
f
675.01 715.992 mo
666.011 724.992 li
675.011 733.992 li
684.011 724.991 li
675.01 715.992 li
cp
f
675.008 665.092 mo
665.108 674.992 li
675.009 684.891 li
684.909 674.991 li
675.008 665.092 li
cp
f
675.005 614.192 mo
664.206 624.992 li
675.007 635.791 li
685.806 624.991 li
675.005 614.192 li
cp
f
675.003 563.291 mo
663.303 574.992 li
675.004 586.692 li
686.704 574.991 li
675.003 563.291 li
cp
f
675.001 512.392 mo
662.402 524.992 li
675.002 537.591 li
687.601 524.991 li
675.001 512.392 li
cp
f
674.998 461.492 mo
661.499 474.992 li
674.999 488.492 li
688.499 474.991 li
674.998 461.492 li
cp
f
674.996 410.591 mo
660.596 424.992 li
674.997 439.392 li
689.397 424.991 li
674.996 410.591 li
cp
f
674.993 359.692 mo
659.694 374.992 li
674.995 390.291 li
690.294 374.991 li
674.993 359.692 li
cp
f
674.991 308.791 mo
658.791 324.992 li
674.992 341.192 li
691.192 324.991 li
674.991 308.791 li
cp
f
674.988 257.892 mo
657.89 274.992 li
674.99 292.091 li
692.089 274.991 li
674.988 257.892 li
cp
f
674.986 206.992 mo
656.987 224.992 li
674.988 242.992 li
692.987 224.991 li
674.986 206.992 li
cp
f
674.984 156.091 mo
656.084 174.993 li
674.985 193.892 li
693.885 174.991 li
674.984 156.091 li
cp
f
674.981 105.192 mo
655.182 124.993 li
674.983 144.791 li
694.782 124.991 li
674.981 105.192 li
cp
f
674.979 54.2914 mo
654.279 74.9926 li
674.981 95.6918 li
695.68 74.9906 li
674.979 54.2914 li
cp
f
674.976 3.39201 mo
653.378 24.9926 li
674.978 46.5912 li
696.577 24.9906 li
674.976 3.39201 li
cp
f
625.023 970.494 mo
620.523 974.994 li
625.023 979.494 li
629.523 974.994 li
625.023 970.494 li
cp
f
625.02 919.594 mo
619.62 924.994 li
625.021 930.394 li
630.421 924.994 li
625.02 919.594 li
cp
f
625.018 868.694 mo
618.718 874.994 li
625.018 881.294 li
631.318 874.994 li
625.018 868.694 li
cp
f
625.015 817.794 mo
617.815 824.994 li
625.016 832.194 li
632.216 824.994 li
625.015 817.794 li
cp
f
625.013 766.894 mo
616.914 774.994 li
625.014 783.094 li
633.113 774.994 li
625.013 766.894 li
cp
f
625.01 715.994 mo
616.011 724.994 li
625.011 733.994 li
634.011 724.994 li
625.01 715.994 li
cp
f
625.008 665.094 mo
615.108 674.994 li
625.009 684.894 li
634.909 674.994 li
625.008 665.094 li
cp
f
625.005 614.194 mo
614.206 624.995 li
625.007 635.794 li
635.806 624.993 li
625.005 614.194 li
cp
f
625.003 563.294 mo
613.303 574.995 li
625.004 586.694 li
636.704 574.993 li
625.003 563.294 li
cp
f
625.001 512.394 mo
612.402 524.995 li
625.002 537.594 li
637.601 524.993 li
625.001 512.394 li
cp
f
624.998 461.494 mo
611.499 474.995 li
624.999 488.494 li
638.499 474.993 li
624.998 461.494 li
cp
f
624.996 410.594 mo
610.596 424.995 li
624.997 439.394 li
639.397 424.993 li
624.996 410.594 li
cp
f
624.993 359.694 mo
609.694 374.995 li
624.995 390.294 li
640.294 374.993 li
624.993 359.694 li
cp
f
624.991 308.794 mo
608.791 324.995 li
624.992 341.194 li
641.192 324.993 li
624.991 308.794 li
cp
f
624.988 257.894 mo
607.89 274.995 li
624.99 292.094 li
642.089 274.993 li
624.988 257.894 li
cp
f
624.986 206.994 mo
606.987 224.995 li
624.988 242.994 li
642.987 224.993 li
624.986 206.994 li
cp
f
624.984 156.094 mo
606.084 174.995 li
624.985 193.894 li
643.885 174.993 li
624.984 156.094 li
cp
f
624.981 105.194 mo
605.182 124.995 li
624.983 144.794 li
644.782 124.993 li
624.981 105.194 li
cp
f
624.979 54.2938 mo
604.279 74.995 li
624.981 95.6942 li
645.68 74.993 li
624.979 54.2938 li
cp
f
624.976 3.39441 mo
603.378 24.995 li
624.978 46.5936 li
646.577 24.993 li
624.976 3.39441 li
cp
f
575.023 970.496 mo
570.523 974.997 li
575.023 979.496 li
579.523 974.996 li
575.023 970.496 li
cp
f
575.02 919.596 mo
569.62 924.997 li
575.021 930.396 li
580.421 924.996 li
575.02 919.596 li
cp
f
575.018 868.697 mo
568.718 874.997 li
575.018 881.296 li
581.318 874.996 li
575.018 868.697 li
cp
f
575.015 817.796 mo
567.815 824.997 li
575.016 832.197 li
582.216 824.996 li
575.015 817.796 li
cp
f
575.013 766.896 mo
566.914 774.997 li
575.014 783.096 li
583.113 774.996 li
575.013 766.896 li
cp
f
575.01 715.996 mo
566.011 724.997 li
575.011 733.996 li
584.011 724.996 li
575.01 715.996 li
cp
f
575.008 665.096 mo
565.108 674.997 li
575.009 684.896 li
584.909 674.996 li
575.008 665.096 li
cp
f
575.005 614.197 mo
564.206 624.997 li
575.007 635.796 li
585.806 624.996 li
575.005 614.197 li
cp
f
575.003 563.296 mo
563.303 574.997 li
575.004 586.697 li
586.704 574.996 li
575.003 563.296 li
cp
f
575.001 512.397 mo
562.402 524.997 li
575.002 537.596 li
587.601 524.996 li
575.001 512.397 li
cp
f
574.998 461.496 mo
561.499 474.997 li
574.999 488.496 li
588.499 474.996 li
574.998 461.496 li
cp
f
574.996 410.596 mo
560.596 424.997 li
574.997 439.397 li
589.397 424.996 li
574.996 410.596 li
cp
f
574.993 359.697 mo
559.694 374.997 li
574.995 390.296 li
590.294 374.996 li
574.993 359.697 li
cp
f
574.991 308.796 mo
558.791 324.997 li
574.992 341.197 li
591.192 324.996 li
574.991 308.796 li
cp
f
574.988 257.897 mo
557.89 274.997 li
574.99 292.096 li
592.089 274.996 li
574.988 257.897 li
cp
f
574.986 206.996 mo
556.987 224.997 li
574.988 242.996 li
592.987 224.996 li
574.986 206.996 li
cp
f
574.984 156.096 mo
556.084 174.997 li
574.985 193.897 li
593.885 174.995 li
574.984 156.096 li
cp
f
574.981 105.197 mo
555.182 124.997 li
574.983 144.796 li
594.782 124.995 li
574.981 105.197 li
cp
f
574.979 54.2962 mo
554.279 74.9974 li
574.981 95.6966 li
595.68 74.9954 li
574.979 54.2962 li
cp
f
574.976 3.3968 mo
553.378 24.9974 li
574.978 46.596 li
596.577 24.9954 li
574.976 3.3968 li
cp
f
525.023 970.499 mo
520.523 974.999 li
525.023 979.499 li
529.523 974.999 li
525.023 970.499 li
cp
f
525.02 919.599 mo
519.62 924.999 li
525.021 930.399 li
530.421 924.999 li
525.02 919.599 li
cp
f
525.018 868.699 mo
518.718 874.999 li
525.018 881.299 li
531.318 874.998 li
525.018 868.699 li
cp
f
525.015 817.799 mo
517.815 824.999 li
525.016 832.199 li
532.216 824.998 li
525.015 817.799 li
cp
f
525.013 766.899 mo
516.914 774.999 li
525.014 783.099 li
533.113 774.998 li
525.013 766.899 li
cp
f
525.01 715.999 mo
516.011 724.999 li
525.011 733.999 li
534.011 724.998 li
525.01 715.999 li
cp
f
525.008 665.099 mo
515.108 674.999 li
525.009 684.899 li
534.909 674.998 li
525.008 665.099 li
cp
f
525.005 614.199 mo
514.206 624.999 li
525.007 635.799 li
535.806 624.998 li
525.005 614.199 li
cp
f
525.003 563.299 mo
513.303 574.999 li
525.004 586.699 li
536.704 574.998 li
525.003 563.299 li
cp
f
525.001 512.399 mo
512.402 524.999 li
525.002 537.598 li
537.601 524.998 li
525.001 512.399 li
cp
f
524.998 461.499 mo
511.499 474.999 li
524.999 488.499 li
538.499 474.998 li
524.998 461.499 li
cp
f
524.996 410.598 mo
510.596 424.999 li
524.997 439.399 li
539.397 424.998 li
524.996 410.598 li
cp
f
524.993 359.699 mo
509.694 375 li
524.995 390.299 li
540.294 374.998 li
524.993 359.699 li
cp
f
524.991 308.799 mo
508.791 325 li
524.992 341.199 li
541.192 324.998 li
524.991 308.799 li
cp
f
524.988 257.899 mo
507.89 275 li
524.99 292.098 li
542.089 274.998 li
524.988 257.899 li
cp
f
524.986 206.999 mo
506.987 225 li
524.988 242.999 li
542.987 224.998 li
524.986 206.999 li
cp
f
524.984 156.098 mo
506.084 175 li
524.985 193.899 li
543.885 174.998 li
524.984 156.098 li
cp
f
524.981 105.199 mo
505.182 125 li
524.983 144.799 li
544.782 124.998 li
524.981 105.199 li
cp
f
524.979 54.2986 mo
504.279 74.9998 li
524.981 95.699 li
545.68 74.9978 li
524.979 54.2986 li
cp
f
524.976 3.3992 mo
503.378 24.9998 li
524.978 46.5984 li
546.577 24.9978 li
524.976 3.3992 li
cp
f
475.023 970.501 mo
470.523 975.001 li
475.023 979.501 li
479.523 975.001 li
475.023 970.501 li
cp
f
475.02 919.601 mo
469.62 925.001 li
475.021 930.401 li
480.421 925.001 li
475.02 919.601 li
cp
f
475.018 868.701 mo
468.718 875.001 li
475.018 881.301 li
481.318 875.001 li
475.018 868.701 li
cp
f
475.015 817.801 mo
467.815 825.002 li
475.016 832.201 li
482.216 825.001 li
475.015 817.801 li
cp
f
475.013 766.901 mo
466.914 775.002 li
475.014 783.101 li
483.113 775.001 li
475.013 766.901 li
cp
f
475.01 716.001 mo
466.011 725.002 li
475.011 734.001 li
484.011 725.001 li
475.01 716.001 li
cp
f
475.008 665.101 mo
465.108 675.002 li
475.009 684.901 li
484.909 675.001 li
475.008 665.101 li
cp
f
475.005 614.201 mo
464.206 625.002 li
475.007 635.801 li
485.806 625.001 li
475.005 614.201 li
cp
f
475.003 563.301 mo
463.303 575.002 li
475.004 586.701 li
486.704 575.001 li
475.003 563.301 li
cp
f
475.001 512.402 mo
462.402 525.002 li
475.002 537.601 li
487.601 525.001 li
475.001 512.402 li
cp
f
474.998 461.501 mo
461.499 475.002 li
474.999 488.501 li
488.499 475.001 li
474.998 461.501 li
cp
f
474.996 410.601 mo
460.596 425.002 li
474.997 439.402 li
489.397 425 li
474.996 410.601 li
cp
f
474.993 359.701 mo
459.694 375.002 li
474.995 390.301 li
490.294 375 li
474.993 359.701 li
cp
f
474.991 308.801 mo
458.791 325.002 li
474.992 341.201 li
491.192 325 li
474.991 308.801 li
cp
f
474.988 257.902 mo
457.89 275.002 li
474.99 292.101 li
492.089 275 li
474.988 257.902 li
cp
f
474.986 207.001 mo
456.987 225.002 li
474.988 243.001 li
492.987 225 li
474.986 207.001 li
cp
f
474.983 156.101 mo
456.084 175.002 li
474.985 193.902 li
493.885 175 li
474.983 156.101 li
cp
f
474.981 105.201 mo
455.182 125.002 li
474.983 144.801 li
494.782 125 li
474.981 105.201 li
cp
f
474.979 54.301 mo
454.279 75.0022 li
474.981 95.7014 li
495.68 75.0002 li
474.979 54.301 li
cp
f
474.976 3.4016 mo
453.378 25.0022 li
474.978 46.6008 li
496.577 25.0002 li
474.976 3.4016 li
cp
f
425.023 970.504 mo
420.523 975.004 li
425.023 979.504 li
429.523 975.003 li
425.023 970.504 li
cp
f
425.02 919.604 mo
419.62 925.004 li
425.021 930.403 li
430.421 925.003 li
425.02 919.604 li
cp
f
425.018 868.704 mo
418.718 875.004 li
425.018 881.303 li
431.318 875.003 li
425.018 868.704 li
cp
f
425.015 817.803 mo
417.815 825.004 li
425.016 832.204 li
432.216 825.003 li
425.015 817.803 li
cp
f
425.013 766.903 mo
416.914 775.004 li
425.014 783.104 li
433.113 775.003 li
425.013 766.903 li
cp
f
425.01 716.004 mo
416.011 725.004 li
425.011 734.004 li
434.011 725.003 li
425.01 716.004 li
cp
f
425.008 665.104 mo
415.108 675.004 li
425.009 684.904 li
434.909 675.003 li
425.008 665.104 li
cp
f
425.005 614.204 mo
414.206 625.004 li
425.007 635.803 li
435.806 625.003 li
425.005 614.204 li
cp
f
425.003 563.303 mo
413.303 575.004 li
425.004 586.704 li
436.704 575.003 li
425.003 563.303 li
cp
f
425.001 512.404 mo
412.402 525.004 li
425.002 537.603 li
437.601 525.003 li
425.001 512.404 li
cp
f
424.998 461.504 mo
411.499 475.004 li
424.999 488.504 li
438.499 475.003 li
424.998 461.504 li
cp
f
424.996 410.603 mo
410.596 425.004 li
424.997 439.404 li
439.397 425.003 li
424.996 410.603 li
cp
f
424.993 359.704 mo
409.694 375.004 li
424.995 390.303 li
440.294 375.003 li
424.993 359.704 li
cp
f
424.991 308.803 mo
408.791 325.004 li
424.992 341.204 li
441.192 325.003 li
424.991 308.803 li
cp
f
424.988 257.904 mo
407.89 275.004 li
424.99 292.103 li
442.089 275.003 li
424.988 257.904 li
cp
f
424.986 207.004 mo
406.987 225.004 li
424.988 243.004 li
442.987 225.003 li
424.986 207.004 li
cp
f
424.983 156.103 mo
406.084 175.005 li
424.985 193.904 li
443.885 175.003 li
424.983 156.103 li
cp
f
424.981 105.204 mo
405.182 125.005 li
424.983 144.803 li
444.782 125.003 li
424.981 105.204 li
cp
f
424.979 54.3034 mo
404.279 75.0046 li
424.981 95.7038 li
445.68 75.0026 li
424.979 54.3034 li
cp
f
424.976 3.404 mo
403.378 25.0046 li
424.978 46.6032 li
446.577 25.0026 li
424.976 3.404 li
cp
f
375.023 970.506 mo
370.523 975.006 li
375.023 979.506 li
379.523 975.006 li
375.023 970.506 li
cp
f
375.02 919.606 mo
369.62 925.006 li
375.021 930.406 li
380.421 925.006 li
375.02 919.606 li
cp
f
375.018 868.706 mo
368.718 875.006 li
375.018 881.306 li
381.318 875.006 li
375.018 868.706 li
cp
f
375.015 817.806 mo
367.815 825.006 li
375.016 832.206 li
382.216 825.006 li
375.015 817.806 li
cp
f
375.013 766.906 mo
366.914 775.006 li
375.014 783.106 li
383.113 775.006 li
375.013 766.906 li
cp
f
375.01 716.006 mo
366.011 725.006 li
375.011 734.006 li
384.011 725.006 li
375.01 716.006 li
cp
f
375.008 665.106 mo
365.108 675.006 li
375.009 684.906 li
384.909 675.005 li
375.008 665.106 li
cp
f
375.005 614.206 mo
364.206 625.007 li
375.007 635.806 li
385.806 625.005 li
375.005 614.206 li
cp
f
375.003 563.306 mo
363.303 575.007 li
375.004 586.706 li
386.704 575.005 li
375.003 563.306 li
cp
f
375.001 512.406 mo
362.402 525.007 li
375.002 537.606 li
387.601 525.005 li
375.001 512.406 li
cp
f
374.998 461.506 mo
361.499 475.007 li
374.999 488.506 li
388.499 475.005 li
374.998 461.506 li
cp
f
374.996 410.606 mo
360.596 425.007 li
374.997 439.406 li
389.397 425.005 li
374.996 410.606 li
cp
f
374.993 359.706 mo
359.694 375.007 li
374.995 390.306 li
390.294 375.005 li
374.993 359.706 li
cp
f
374.991 308.806 mo
358.791 325.007 li
374.992 341.206 li
391.192 325.005 li
374.991 308.806 li
cp
f
374.988 257.906 mo
357.89 275.007 li
374.99 292.106 li
392.089 275.005 li
374.988 257.906 li
cp
f
374.986 207.006 mo
356.987 225.007 li
374.988 243.006 li
392.987 225.005 li
374.986 207.006 li
cp
f
374.983 156.106 mo
356.084 175.007 li
374.985 193.906 li
393.885 175.005 li
374.983 156.106 li
cp
f
374.981 105.206 mo
355.182 125.007 li
374.983 144.806 li
394.782 125.005 li
374.981 105.206 li
cp
f
374.979 54.3058 mo
354.279 75.007 li
374.981 95.7062 li
395.68 75.005 li
374.979 54.3058 li
cp
f
374.976 3.4064 mo
353.378 25.007 li
374.978 46.6056 li
396.577 25.005 li
374.976 3.4064 li
cp
f
325.023 970.508 mo
320.523 975.009 li
325.023 979.508 li
329.523 975.008 li
325.023 970.508 li
cp
f
325.02 919.608 mo
319.62 925.009 li
325.021 930.408 li
330.421 925.008 li
325.02 919.608 li
cp
f
325.018 868.709 mo
318.718 875.009 li
325.018 881.308 li
331.318 875.008 li
325.018 868.709 li
cp
f
325.015 817.808 mo
317.815 825.009 li
325.016 832.209 li
332.216 825.008 li
325.015 817.808 li
cp
f
325.013 766.908 mo
316.914 775.009 li
325.014 783.108 li
333.113 775.008 li
325.013 766.908 li
cp
f
325.01 716.008 mo
316.011 725.009 li
325.011 734.008 li
334.011 725.008 li
325.01 716.008 li
cp
f
325.008 665.108 mo
315.108 675.009 li
325.009 684.908 li
334.909 675.008 li
325.008 665.108 li
cp
f
325.005 614.209 mo
314.206 625.009 li
325.007 635.808 li
335.806 625.008 li
325.005 614.209 li
cp
f
325.003 563.308 mo
313.303 575.009 li
325.004 586.709 li
336.704 575.008 li
325.003 563.308 li
cp
f
325.001 512.409 mo
312.402 525.009 li
325.002 537.608 li
337.601 525.008 li
325.001 512.409 li
cp
f
324.998 461.508 mo
311.499 475.009 li
324.999 488.508 li
338.499 475.008 li
324.998 461.508 li
cp
f
324.996 410.608 mo
310.596 425.009 li
324.997 439.409 li
339.397 425.008 li
324.996 410.608 li
cp
f
324.993 359.709 mo
309.694 375.009 li
324.995 390.308 li
340.294 375.008 li
324.993 359.709 li
cp
f
324.991 308.808 mo
308.791 325.009 li
324.992 341.209 li
341.192 325.008 li
324.991 308.808 li
cp
f
324.988 257.909 mo
307.89 275.009 li
324.99 292.108 li
342.089 275.008 li
324.988 257.909 li
cp
f
324.986 207.008 mo
306.987 225.009 li
324.988 243.008 li
342.987 225.008 li
324.986 207.008 li
cp
f
324.983 156.108 mo
306.084 175.009 li
324.985 193.909 li
343.885 175.007 li
324.983 156.108 li
cp
f
324.981 105.209 mo
305.182 125.009 li
324.983 144.808 li
344.782 125.007 li
324.981 105.209 li
cp
f
324.979 54.3082 mo
304.279 75.0094 li
324.981 95.7086 li
345.68 75.0074 li
324.979 54.3082 li
cp
f
324.976 3.40879 mo
303.378 25.0094 li
324.978 46.608 li
346.577 25.0074 li
324.976 3.40879 li
cp
f
275.023 970.511 mo
270.523 975.011 li
275.023 979.511 li
279.523 975.011 li
275.023 970.511 li
cp
f
275.02 919.611 mo
269.62 925.011 li
275.021 930.411 li
280.421 925.01 li
275.02 919.611 li
cp
f
275.018 868.711 mo
268.718 875.011 li
275.018 881.311 li
281.318 875.01 li
275.018 868.711 li
cp
f
275.015 817.811 mo
267.815 825.011 li
275.016 832.211 li
282.216 825.01 li
275.015 817.811 li
cp
f
275.013 766.911 mo
266.914 775.011 li
275.014 783.111 li
283.113 775.01 li
275.013 766.911 li
cp
f
275.01 716.011 mo
266.011 725.011 li
275.011 734.011 li
284.011 725.01 li
275.01 716.011 li
cp
f
275.008 665.111 mo
265.108 675.011 li
275.009 684.911 li
284.909 675.01 li
275.008 665.111 li
cp
f
275.005 614.211 mo
264.206 625.011 li
275.007 635.811 li
285.806 625.01 li
275.005 614.211 li
cp
f
275.003 563.311 mo
263.303 575.011 li
275.004 586.711 li
286.704 575.01 li
275.003 563.311 li
cp
f
275.001 512.411 mo
262.402 525.011 li
275.002 537.61 li
287.601 525.01 li
275.001 512.411 li
cp
f
274.998 461.511 mo
261.499 475.011 li
274.999 488.511 li
288.499 475.01 li
274.998 461.511 li
cp
f
274.996 410.61 mo
260.596 425.011 li
274.997 439.411 li
289.397 425.01 li
274.996 410.61 li
cp
f
274.993 359.711 mo
259.694 375.012 li
274.995 390.311 li
290.294 375.01 li
274.993 359.711 li
cp
f
274.991 308.811 mo
258.791 325.012 li
274.992 341.211 li
291.192 325.01 li
274.991 308.811 li
cp
f
274.988 257.911 mo
257.89 275.012 li
274.99 292.11 li
292.089 275.01 li
274.988 257.911 li
cp
f
274.986 207.011 mo
256.987 225.012 li
274.988 243.011 li
292.987 225.01 li
274.986 207.011 li
cp
f
274.983 156.11 mo
256.084 175.012 li
274.985 193.911 li
293.885 175.01 li
274.983 156.11 li
cp
f
274.981 105.211 mo
255.182 125.012 li
274.983 144.811 li
294.782 125.01 li
274.981 105.211 li
cp
f
274.979 54.3106 mo
254.279 75.0118 li
274.981 95.711 li
295.68 75.0098 li
274.979 54.3106 li
cp
f
274.976 3.41119 mo
253.378 25.0118 li
274.978 46.6104 li
296.577 25.0098 li
274.976 3.41119 li
cp
f
225.023 970.513 mo
220.523 975.013 li
225.023 979.513 li
229.523 975.013 li
225.023 970.513 li
cp
f
225.02 919.613 mo
219.62 925.013 li
225.021 930.413 li
230.421 925.013 li
225.02 919.613 li
cp
f
225.018 868.713 mo
218.718 875.013 li
225.018 881.313 li
231.318 875.013 li
225.018 868.713 li
cp
f
225.015 817.813 mo
217.815 825.014 li
225.016 832.213 li
232.216 825.013 li
225.015 817.813 li
cp
f
225.013 766.913 mo
216.914 775.014 li
225.014 783.113 li
233.113 775.013 li
225.013 766.913 li
cp
f
225.01 716.013 mo
216.011 725.014 li
225.011 734.013 li
234.011 725.013 li
225.01 716.013 li
cp
f
225.008 665.113 mo
215.108 675.014 li
225.009 684.913 li
234.909 675.013 li
225.008 665.113 li
cp
f
225.005 614.213 mo
214.206 625.014 li
225.007 635.813 li
235.806 625.013 li
225.005 614.213 li
cp
f
225.003 563.313 mo
213.303 575.014 li
225.004 586.713 li
236.704 575.013 li
225.003 563.313 li
cp
f
225.001 512.414 mo
212.402 525.014 li
225.002 537.613 li
237.601 525.013 li
225.001 512.414 li
cp
f
224.998 461.513 mo
211.499 475.014 li
224.999 488.513 li
238.499 475.013 li
224.998 461.513 li
cp
f
224.996 410.613 mo
210.596 425.014 li
224.997 439.414 li
239.397 425.012 li
224.996 410.613 li
cp
f
224.993 359.713 mo
209.694 375.014 li
224.995 390.313 li
240.294 375.012 li
224.993 359.713 li
cp
f
224.991 308.813 mo
208.791 325.014 li
224.992 341.213 li
241.192 325.012 li
224.991 308.813 li
cp
f
224.988 257.914 mo
207.89 275.014 li
224.99 292.113 li
242.089 275.012 li
224.988 257.914 li
cp
f
224.986 207.013 mo
206.987 225.014 li
224.988 243.013 li
242.987 225.012 li
224.986 207.013 li
cp
f
224.984 156.113 mo
206.084 175.014 li
224.985 193.914 li
243.885 175.012 li
224.984 156.113 li
cp
f
224.981 105.213 mo
205.182 125.014 li
224.983 144.813 li
244.782 125.012 li
224.981 105.213 li
cp
f
224.979 54.313 mo
204.279 75.0142 li
224.981 95.7134 li
245.68 75.0122 li
224.979 54.313 li
cp
f
224.976 3.41359 mo
203.378 25.0142 li
224.978 46.6128 li
246.577 25.0122 li
224.976 3.41359 li
cp
f
175.023 970.516 mo
170.523 975.016 li
175.023 979.516 li
179.523 975.015 li
175.023 970.516 li
cp
f
175.02 919.616 mo
169.62 925.016 li
175.021 930.415 li
180.421 925.015 li
175.02 919.616 li
cp
f
175.018 868.716 mo
168.718 875.016 li
175.018 881.315 li
181.318 875.015 li
175.018 868.716 li
cp
f
175.015 817.815 mo
167.815 825.016 li
175.016 832.216 li
182.216 825.015 li
175.015 817.815 li
cp
f
175.013 766.915 mo
166.914 775.016 li
175.014 783.116 li
183.113 775.015 li
175.013 766.915 li
cp
f
175.01 716.016 mo
166.011 725.016 li
175.011 734.016 li
184.011 725.015 li
175.01 716.016 li
cp
f
175.008 665.116 mo
165.108 675.016 li
175.009 684.915 li
184.909 675.015 li
175.008 665.116 li
cp
f
175.005 614.216 mo
164.206 625.016 li
175.007 635.815 li
185.806 625.015 li
175.005 614.216 li
cp
f
175.003 563.315 mo
163.303 575.016 li
175.004 586.716 li
186.704 575.015 li
175.003 563.315 li
cp
f
175.001 512.416 mo
162.402 525.016 li
175.002 537.615 li
187.601 525.015 li
175.001 512.416 li
cp
f
174.998 461.516 mo
161.499 475.016 li
174.999 488.516 li
188.499 475.015 li
174.998 461.516 li
cp
f
174.996 410.615 mo
160.596 425.016 li
174.997 439.416 li
189.397 425.015 li
174.996 410.615 li
cp
f
174.993 359.716 mo
159.694 375.016 li
174.995 390.315 li
190.294 375.015 li
174.993 359.716 li
cp
f
174.991 308.815 mo
158.791 325.016 li
174.992 341.216 li
191.192 325.015 li
174.991 308.815 li
cp
f
174.988 257.916 mo
157.89 275.016 li
174.99 292.115 li
192.089 275.015 li
174.988 257.916 li
cp
f
174.986 207.016 mo
156.987 225.016 li
174.988 243.016 li
192.987 225.015 li
174.986 207.016 li
cp
f
174.984 156.115 mo
156.084 175.016 li
174.985 193.916 li
193.885 175.015 li
174.984 156.115 li
cp
f
174.981 105.216 mo
155.182 125.017 li
174.983 144.815 li
194.782 125.015 li
174.981 105.216 li
cp
f
174.979 54.3154 mo
154.279 75.0166 li
174.981 95.7158 li
195.68 75.0146 li
174.979 54.3154 li
cp
f
174.976 3.41599 mo
153.378 25.0166 li
174.978 46.6152 li
196.577 25.0145 li
174.976 3.41599 li
cp
f
125.023 970.518 mo
120.523 975.018 li
125.023 979.518 li
129.523 975.018 li
125.023 970.518 li
cp
f
125.02 919.618 mo
119.62 925.018 li
125.021 930.418 li
130.421 925.018 li
125.02 919.618 li
cp
f
125.018 868.718 mo
118.718 875.018 li
125.018 881.318 li
131.318 875.018 li
125.018 868.718 li
cp
f
125.015 817.818 mo
117.815 825.018 li
125.016 832.218 li
132.216 825.018 li
125.015 817.818 li
cp
f
125.013 766.918 mo
116.914 775.018 li
125.014 783.118 li
133.113 775.018 li
125.013 766.918 li
cp
f
125.01 716.018 mo
116.011 725.018 li
125.011 734.018 li
134.011 725.018 li
125.01 716.018 li
cp
f
125.008 665.118 mo
115.108 675.018 li
125.009 684.918 li
134.909 675.018 li
125.008 665.118 li
cp
f
125.005 614.218 mo
114.206 625.018 li
125.007 635.818 li
135.806 625.017 li
125.005 614.218 li
cp
f
125.003 563.318 mo
113.303 575.019 li
125.004 586.718 li
136.704 575.017 li
125.003 563.318 li
cp
f
125.001 512.418 mo
112.402 525.019 li
125.002 537.618 li
137.601 525.017 li
125.001 512.418 li
cp
f
124.998 461.518 mo
111.499 475.019 li
124.999 488.518 li
138.499 475.017 li
124.998 461.518 li
cp
f
124.996 410.618 mo
110.596 425.019 li
124.997 439.418 li
139.397 425.017 li
124.996 410.618 li
cp
f
124.993 359.718 mo
109.694 375.019 li
124.995 390.318 li
140.294 375.017 li
124.993 359.718 li
cp
f
124.991 308.818 mo
108.791 325.019 li
124.992 341.218 li
141.192 325.017 li
124.991 308.818 li
cp
f
124.988 257.918 mo
107.89 275.019 li
124.99 292.118 li
142.089 275.017 li
124.988 257.918 li
cp
f
124.986 207.018 mo
106.987 225.019 li
124.988 243.018 li
142.987 225.017 li
124.986 207.018 li
cp
f
124.983 156.118 mo
106.084 175.019 li
124.985 193.918 li
143.885 175.017 li
124.983 156.118 li
cp
f
124.981 105.218 mo
105.182 125.019 li
124.983 144.818 li
144.782 125.017 li
124.981 105.218 li
cp
f
124.979 54.3178 mo
104.279 75.019 li
124.981 95.7182 li
145.68 75.017 li
124.979 54.3178 li
cp
f
124.976 3.41839 mo
103.378 25.019 li
124.978 46.6176 li
146.577 25.0169 li
124.976 3.41839 li
cp
f
75.0226 970.52 mo
70.5228 975.021 li
75.023 979.52 li
79.5228 975.02 li
75.0226 970.52 li
cp
f
75.0201 919.62 mo
69.62 925.021 li
75.0206 930.42 li
80.4208 925.02 li
75.0201 919.62 li
cp
f
75.0177 868.721 mo
68.7182 875.021 li
75.0183 881.32 li
81.3178 875.02 li
75.0177 868.721 li
cp
f
75.0152 817.82 mo
67.8154 825.021 li
75.0159 832.221 li
82.2158 825.02 li
75.0152 817.82 li
cp
f
75.0128 766.92 mo
66.9136 775.021 li
75.0136 783.12 li
83.1128 775.02 li
75.0128 766.92 li
cp
f
75.0104 716.02 mo
66.0108 725.021 li
75.0112 734.02 li
84.0108 725.02 li
75.0104 716.02 li
cp
f
75.0079 665.12 mo
65.108 675.021 li
75.0089 684.92 li
84.9088 675.02 li
75.0079 665.12 li
cp
f
75.0055 614.221 mo
64.2062 625.021 li
75.0065 635.82 li
85.8058 625.02 li
75.0055 614.221 li
cp
f
75.003 563.32 mo
63.3034 575.021 li
75.0042 586.721 li
86.7038 575.02 li
75.003 563.32 li
cp
f
75.0006 512.421 mo
62.4016 525.021 li
75.0018 537.62 li
87.6008 525.02 li
75.0006 512.421 li
cp
f
74.9981 461.52 mo
61.4988 475.021 li
74.9994 488.52 li
88.4988 475.02 li
74.9981 461.52 li
cp
f
74.9957 410.62 mo
60.596 425.021 li
74.9971 439.421 li
89.3968 425.02 li
74.9957 410.62 li
cp
f
74.9933 359.721 mo
59.6942 375.021 li
74.9947 390.32 li
90.2938 375.02 li
74.9933 359.721 li
cp
f
74.9908 308.82 mo
58.7914 325.021 li
74.9924 341.221 li
91.1918 325.02 li
74.9908 308.82 li
cp
f
74.9884 257.921 mo
57.8896 275.021 li
74.99 292.12 li
92.0888 275.02 li
74.9884 257.921 li
cp
f
74.9859 207.02 mo
56.9868 225.021 li
74.9877 243.02 li
92.9868 225.02 li
74.9859 207.02 li
cp
f
74.9835 156.12 mo
56.084 175.021 li
74.9853 193.921 li
93.8848 175.019 li
74.9835 156.12 li
cp
f
74.9811 105.221 mo
55.1822 125.021 li
74.983 144.82 li
94.7818 125.019 li
74.9811 105.221 li
cp
f
74.9786 54.3202 mo
54.2794 75.0214 li
74.9806 95.7206 li
95.6798 75.0194 li
74.9786 54.3202 li
cp
f
74.9762 3.42078 mo
53.3776 25.0214 li
74.9782 46.62 li
96.5768 25.0193 li
74.9762 3.42078 li
cp
f
25.0226 970.523 mo
20.5228 975.023 li
25.023 979.523 li
29.5228 975.023 li
25.0226 970.523 li
cp
f
25.0201 919.623 mo
19.62 925.023 li
25.0206 930.423 li
30.4208 925.023 li
25.0201 919.623 li
cp
f
25.0177 868.723 mo
18.7182 875.023 li
25.0183 881.323 li
31.3178 875.022 li
25.0177 868.723 li
cp
f
25.0152 817.823 mo
17.8154 825.023 li
25.0159 832.223 li
32.2158 825.022 li
25.0152 817.823 li
cp
f
25.0128 766.923 mo
16.9136 775.023 li
25.0136 783.123 li
33.1128 775.022 li
25.0128 766.923 li
cp
f
25.0104 716.023 mo
16.0108 725.023 li
25.0112 734.023 li
34.0108 725.022 li
25.0104 716.023 li
cp
f
25.0079 665.123 mo
15.108 675.023 li
25.0089 684.923 li
34.9088 675.022 li
25.0079 665.123 li
cp
f
25.0055 614.223 mo
14.2062 625.023 li
25.0065 635.823 li
35.8058 625.022 li
25.0055 614.223 li
cp
f
25.003 563.323 mo
13.3034 575.023 li
25.0042 586.723 li
36.7038 575.022 li
25.003 563.323 li
cp
f
25.0006 512.423 mo
12.4016 525.023 li
25.0018 537.622 li
37.6008 525.022 li
25.0006 512.423 li
cp
f
24.9982 461.523 mo
11.4988 475.023 li
24.9994 488.523 li
38.4988 475.022 li
24.9982 461.523 li
cp
f
24.9957 410.622 mo
10.596 425.023 li
24.9971 439.423 li
39.3968 425.022 li
24.9957 410.622 li
cp
f
24.9933 359.723 mo
9.69423 375.023 li
24.9947 390.323 li
40.2938 375.022 li
24.9933 359.723 li
cp
f
24.9908 308.823 mo
8.79143 325.024 li
24.9924 341.223 li
41.1918 325.022 li
24.9908 308.823 li
cp
f
24.9884 257.923 mo
7.88963 275.024 li
24.99 292.122 li
42.0888 275.022 li
24.9884 257.923 li
cp
f
24.9859 207.023 mo
6.98681 225.024 li
24.9877 243.023 li
42.9868 225.022 li
24.9859 207.023 li
cp
f
24.9835 156.122 mo
6.08403 175.024 li
24.9853 193.923 li
43.8848 175.022 li
24.9835 156.122 li
cp
f
24.9811 105.223 mo
5.18224 125.024 li
24.983 144.823 li
44.7818 125.022 li
24.9811 105.223 li
cp
f
24.9786 54.3226 mo
4.27944 75.0238 li
24.9806 95.723 li
45.6798 75.0218 li
24.9786 54.3226 li
cp
f
24.9762 3.42318 mo
3.37764 25.0238 li
24.9783 46.6224 li
46.5768 25.0217 li
24.9762 3.42318 li
cp
f
1000.02 1004.03 mo
1004.07 999.976 li
1000.02 995.926 li
995.974 999.976 li
1000.02 1004.03 li
cp
f
1000.02 954.926 mo
1004.97 949.976 li
1000.02 945.026 li
995.071 949.976 li
1000.02 954.926 li
cp
f
1000.02 905.826 mo
1005.87 899.976 li
1000.02 894.126 li
994.169 899.976 li
1000.02 905.826 li
cp
f
1000.02 856.726 mo
1006.77 849.976 li
1000.02 843.226 li
993.267 849.976 li
1000.02 856.726 li
cp
f
1000.01 807.626 mo
1007.66 799.976 li
1000.01 792.326 li
992.365 799.976 li
1000.01 807.626 li
cp
f
1000.01 758.526 mo
1008.56 749.976 li
1000.01 741.426 li
991.462 749.976 li
1000.01 758.526 li
cp
f
1000.01 709.426 mo
1009.46 699.976 li
1000.01 690.526 li
990.559 699.976 li
1000.01 709.426 li
cp
f
1000.01 660.326 mo
1010.36 649.976 li
1000.01 639.626 li
989.657 649.977 li
1000.01 660.326 li
cp
f
1000.01 611.226 mo
1011.25 599.975 li
1000 588.726 li
988.755 599.977 li
1000.01 611.226 li
cp
f
1000 562.126 mo
1012.15 549.975 li
1000 537.826 li
987.852 549.977 li
1000 562.126 li
cp
f
1000 513.026 mo
1013.05 499.975 li
999.999 486.926 li
986.95 499.977 li
1000 513.026 li
cp
f
999.998 463.926 mo
1013.95 449.975 li
999.997 436.026 li
986.047 449.977 li
999.998 463.926 li
cp
f
999.996 414.826 mo
1014.85 399.975 li
999.995 385.126 li
985.145 399.977 li
999.996 414.826 li
cp
f
999.994 365.726 mo
1015.74 349.975 li
999.992 334.226 li
984.243 349.977 li
999.994 365.726 li
cp
f
999.991 316.626 mo
1016.64 299.975 li
999.99 283.326 li
983.341 299.977 li
999.991 316.626 li
cp
f
999.989 267.526 mo
1017.54 249.975 li
999.987 232.426 li
982.438 249.977 li
999.989 267.526 li
cp
f
999.987 218.426 mo
1018.44 199.975 li
999.985 181.526 li
981.535 199.977 li
999.987 218.426 li
cp
f
999.984 169.326 mo
1019.33 149.975 li
999.982 130.626 li
980.633 149.977 li
999.984 169.326 li
cp
f
999.982 120.226 mo
1020.23 99.975 li
999.98 79.726 li
979.731 99.977 li
999.982 120.226 li
cp
f
999.979 71.1264 mo
1021.13 49.975 li
999.977 28.8256 li
978.828 49.977 li
999.979 71.1264 li
cp
f
999.977 22.0258 mo
1022.03 -.0250371 li
999.975 -22.0738 li
977.926 -.022922 li
999.977 22.0258 li
cp
f
950.024 1004.03 mo
954.074 999.978 li
950.024 995.929 li
945.974 999.979 li
950.024 1004.03 li
cp
f
950.022 954.929 mo
954.972 949.978 li
950.021 945.028 li
945.071 949.979 li
950.022 954.929 li
cp
f
950.019 905.828 mo
955.869 899.978 li
950.019 894.128 li
944.169 899.979 li
950.019 905.828 li
cp
f
950.017 856.728 mo
956.767 849.978 li
950.016 843.228 li
943.267 849.979 li
950.017 856.728 li
cp
f
950.015 807.628 mo
957.664 799.978 li
950.014 792.328 li
942.365 799.979 li
950.015 807.628 li
cp
f
950.012 758.528 mo
958.562 749.978 li
950.012 741.429 li
941.462 749.979 li
950.012 758.528 li
cp
f
950.01 709.429 mo
959.46 699.978 li
950.009 690.528 li
940.559 699.979 li
950.01 709.429 li
cp
f
950.008 660.328 mo
960.357 649.978 li
950.007 639.628 li
939.657 649.979 li
950.008 660.328 li
cp
f
950.005 611.228 mo
961.255 599.978 li
950.004 588.728 li
938.755 599.979 li
950.005 611.228 li
cp
f
950.003 562.129 mo
962.152 549.978 li
950.002 537.828 li
937.852 549.979 li
950.003 562.129 li
cp
f
950.001 513.028 mo
963.05 499.978 li
949.999 486.929 li
936.95 499.979 li
950.001 513.028 li
cp
f
949.998 463.929 mo
963.948 449.978 li
949.997 436.028 li
936.047 449.979 li
949.998 463.929 li
cp
f
949.996 414.828 mo
964.845 399.978 li
949.995 385.129 li
935.145 399.979 li
949.996 414.828 li
cp
f
949.994 365.728 mo
965.743 349.978 li
949.992 334.228 li
934.243 349.979 li
949.994 365.728 li
cp
f
949.991 316.629 mo
966.64 299.978 li
949.99 283.328 li
933.341 299.979 li
949.991 316.629 li
cp
f
949.989 267.528 mo
967.538 249.978 li
949.987 232.429 li
932.438 249.979 li
949.989 267.528 li
cp
f
949.987 218.429 mo
968.436 199.978 li
949.985 181.528 li
931.535 199.979 li
949.987 218.429 li
cp
f
949.984 169.328 mo
969.333 149.977 li
949.982 130.629 li
930.633 149.979 li
949.984 169.328 li
cp
f
949.982 120.228 mo
970.231 99.9774 li
949.98 79.7284 li
929.731 99.9794 li
949.982 120.228 li
cp
f
949.979 71.1288 mo
971.128 49.9774 li
949.977 28.828 li
928.828 49.9794 li
949.979 71.1288 li
cp
f
949.977 22.0282 mo
972.026 -.022639 li
949.975 -22.0714 li
927.926 -.020524 li
949.977 22.0282 li
cp
f
900.024 1004.03 mo
904.074 999.981 li
900.024 995.931 li
895.974 999.981 li
900.024 1004.03 li
cp
f
900.022 954.931 mo
904.972 949.981 li
900.021 945.031 li
895.071 949.981 li
900.022 954.931 li
cp
f
900.019 905.831 mo
905.869 899.981 li
900.019 894.131 li
894.169 899.981 li
900.019 905.831 li
cp
f
900.017 856.731 mo
906.767 849.98 li
900.016 843.231 li
893.267 849.981 li
900.017 856.731 li
cp
f
900.015 807.631 mo
907.664 799.98 li
900.014 792.331 li
892.365 799.981 li
900.015 807.631 li
cp
f
900.012 758.531 mo
908.562 749.98 li
900.012 741.431 li
891.462 749.981 li
900.012 758.531 li
cp
f
900.01 709.431 mo
909.46 699.98 li
900.009 690.531 li
890.559 699.981 li
900.01 709.431 li
cp
f
900.008 660.331 mo
910.357 649.98 li
900.007 639.631 li
889.657 649.981 li
900.008 660.331 li
cp
f
900.005 611.231 mo
911.255 599.98 li
900.004 588.731 li
888.755 599.981 li
900.005 611.231 li
cp
f
900.003 562.131 mo
912.152 549.98 li
900.002 537.83 li
887.852 549.981 li
900.003 562.131 li
cp
f
900.001 513.031 mo
913.05 499.98 li
899.999 486.931 li
886.95 499.981 li
900.001 513.031 li
cp
f
899.998 463.931 mo
913.948 449.98 li
899.997 436.031 li
886.047 449.981 li
899.998 463.931 li
cp
f
899.996 414.83 mo
914.845 399.98 li
899.995 385.131 li
885.145 399.982 li
899.996 414.83 li
cp
f
899.994 365.731 mo
915.743 349.98 li
899.992 334.231 li
884.243 349.982 li
899.994 365.731 li
cp
f
899.991 316.631 mo
916.64 299.98 li
899.99 283.33 li
883.341 299.982 li
899.991 316.631 li
cp
f
899.989 267.531 mo
917.538 249.98 li
899.987 232.431 li
882.438 249.982 li
899.989 267.531 li
cp
f
899.987 218.431 mo
918.436 199.98 li
899.985 181.531 li
881.535 199.982 li
899.987 218.431 li
cp
f
899.984 169.33 mo
919.333 149.98 li
899.982 130.631 li
880.633 149.982 li
899.984 169.33 li
cp
f
899.982 120.231 mo
920.231 99.9798 li
899.98 79.7308 li
879.731 99.9818 li
899.982 120.231 li
cp
f
899.979 71.1312 mo
921.128 49.9798 li
899.977 28.8304 li
878.828 49.9818 li
899.979 71.1312 li
cp
f
899.977 22.0306 mo
922.026 -.020241 li
899.975 -22.069 li
877.926 -.018126 li
899.977 22.0306 li
cp
f
850.024 1004.03 mo
854.074 999.983 li
850.024 995.933 li
845.974 999.983 li
850.024 1004.03 li
cp
f
850.022 954.933 mo
854.972 949.983 li
850.021 945.033 li
845.071 949.983 li
850.022 954.933 li
cp
f
850.019 905.833 mo
855.869 899.983 li
850.019 894.133 li
844.169 899.983 li
850.019 905.833 li
cp
f
850.017 856.733 mo
856.767 849.983 li
850.016 843.233 li
843.267 849.984 li
850.017 856.733 li
cp
f
850.015 807.633 mo
857.664 799.983 li
850.014 792.333 li
842.365 799.984 li
850.015 807.633 li
cp
f
850.012 758.533 mo
858.562 749.983 li
850.012 741.433 li
841.462 749.984 li
850.012 758.533 li
cp
f
850.01 709.433 mo
859.46 699.983 li
850.009 690.533 li
840.559 699.984 li
850.01 709.433 li
cp
f
850.008 660.333 mo
860.357 649.983 li
850.007 639.633 li
839.657 649.984 li
850.008 660.333 li
cp
f
850.005 611.233 mo
861.255 599.983 li
850.004 588.733 li
838.755 599.984 li
850.005 611.233 li
cp
f
850.003 562.134 mo
862.152 549.983 li
850.002 537.833 li
837.852 549.984 li
850.003 562.134 li
cp
f
850.001 513.033 mo
863.05 499.983 li
849.999 486.933 li
836.95 499.984 li
850.001 513.033 li
cp
f
849.998 463.933 mo
863.948 449.983 li
849.997 436.033 li
836.047 449.984 li
849.998 463.933 li
cp
f
849.996 414.833 mo
864.845 399.982 li
849.995 385.134 li
835.145 399.984 li
849.996 414.833 li
cp
f
849.994 365.733 mo
865.743 349.982 li
849.992 334.233 li
834.243 349.984 li
849.994 365.733 li
cp
f
849.991 316.634 mo
866.64 299.982 li
849.99 283.333 li
833.341 299.984 li
849.991 316.634 li
cp
f
849.989 267.533 mo
867.538 249.982 li
849.987 232.433 li
832.438 249.984 li
849.989 267.533 li
cp
f
849.987 218.433 mo
868.436 199.982 li
849.985 181.533 li
831.535 199.984 li
849.987 218.433 li
cp
f
849.984 169.333 mo
869.333 149.982 li
849.982 130.634 li
830.633 149.984 li
849.984 169.333 li
cp
f
849.982 120.233 mo
870.231 99.9822 li
849.98 79.7332 li
829.731 99.9842 li
849.982 120.233 li
cp
f
849.979 71.1336 mo
871.128 49.9822 li
849.977 28.8328 li
828.828 49.9842 li
849.979 71.1336 li
cp
f
849.977 22.033 mo
872.026 -.017843 li
849.975 -22.0666 li
827.926 -.015728 li
849.977 22.033 li
cp
f
800.024 1004.04 mo
804.074 999.985 li
800.024 995.936 li
795.974 999.986 li
800.024 1004.04 li
cp
f
800.022 954.936 mo
804.972 949.985 li
800.021 945.035 li
795.071 949.986 li
800.022 954.936 li
cp
f
800.019 905.836 mo
805.869 899.985 li
800.019 894.135 li
794.169 899.986 li
800.019 905.836 li
cp
f
800.017 856.736 mo
806.767 849.985 li
800.016 843.236 li
793.267 849.986 li
800.017 856.736 li
cp
f
800.015 807.635 mo
807.664 799.985 li
800.014 792.336 li
792.365 799.986 li
800.015 807.635 li
cp
f
800.012 758.535 mo
808.562 749.985 li
800.012 741.436 li
791.462 749.986 li
800.012 758.535 li
cp
f
800.01 709.436 mo
809.46 699.985 li
800.009 690.535 li
790.559 699.986 li
800.01 709.436 li
cp
f
800.008 660.336 mo
810.357 649.985 li
800.007 639.635 li
789.657 649.986 li
800.008 660.336 li
cp
f
800.005 611.236 mo
811.255 599.985 li
800.004 588.736 li
788.755 599.986 li
800.005 611.236 li
cp
f
800.003 562.136 mo
812.152 549.985 li
800.002 537.835 li
787.852 549.986 li
800.003 562.136 li
cp
f
800.001 513.035 mo
813.05 499.985 li
799.999 486.936 li
786.95 499.986 li
800.001 513.035 li
cp
f
799.998 463.936 mo
813.948 449.985 li
799.997 436.035 li
786.047 449.986 li
799.998 463.936 li
cp
f
799.996 414.835 mo
814.845 399.985 li
799.995 385.136 li
785.145 399.986 li
799.996 414.835 li
cp
f
799.994 365.736 mo
815.743 349.985 li
799.992 334.236 li
784.243 349.986 li
799.994 365.736 li
cp
f
799.991 316.636 mo
816.64 299.985 li
799.99 283.335 li
783.341 299.986 li
799.991 316.636 li
cp
f
799.989 267.535 mo
817.538 249.985 li
799.987 232.436 li
782.438 249.986 li
799.989 267.535 li
cp
f
799.987 218.436 mo
818.436 199.985 li
799.985 181.535 li
781.535 199.986 li
799.987 218.436 li
cp
f
799.984 169.335 mo
819.333 149.985 li
799.982 130.636 li
780.633 149.987 li
799.984 169.335 li
cp
f
799.982 120.236 mo
820.231 99.9846 li
799.98 79.7356 li
779.731 99.9866 li
799.982 120.236 li
cp
f
799.979 71.136 mo
821.128 49.9846 li
799.977 28.8352 li
778.828 49.9866 li
799.979 71.136 li
cp
f
799.977 22.0354 mo
822.026 -.015445 li
799.975 -22.0642 li
777.926 -.01333 li
799.977 22.0354 li
cp
f
750.024 1004.04 mo
754.074 999.988 li
750.024 995.938 li
745.974 999.988 li
750.024 1004.04 li
cp
f
750.022 954.938 mo
754.972 949.988 li
750.021 945.038 li
745.071 949.988 li
750.022 954.938 li
cp
f
750.019 905.838 mo
755.869 899.988 li
750.019 894.138 li
744.169 899.988 li
750.019 905.838 li
cp
f
750.017 856.738 mo
756.767 849.988 li
750.016 843.238 li
743.267 849.988 li
750.017 856.738 li
cp
f
750.015 807.638 mo
757.664 799.988 li
750.014 792.338 li
742.365 799.988 li
750.015 807.638 li
cp
f
750.012 758.538 mo
758.562 749.988 li
750.012 741.438 li
741.462 749.988 li
750.012 758.538 li
cp
f
750.01 709.438 mo
759.46 699.988 li
750.009 690.538 li
740.559 699.988 li
750.01 709.438 li
cp
f
750.008 660.338 mo
760.357 649.987 li
750.007 639.638 li
739.657 649.989 li
750.008 660.338 li
cp
f
750.005 611.238 mo
761.255 599.987 li
750.004 588.738 li
738.755 599.989 li
750.005 611.238 li
cp
f
750.003 562.138 mo
762.152 549.987 li
750.002 537.838 li
737.852 549.989 li
750.003 562.138 li
cp
f
750.001 513.038 mo
763.05 499.987 li
749.999 486.938 li
736.95 499.989 li
750.001 513.038 li
cp
f
749.998 463.938 mo
763.948 449.987 li
749.997 436.038 li
736.047 449.989 li
749.998 463.938 li
cp
f
749.996 414.838 mo
764.845 399.987 li
749.995 385.138 li
735.145 399.989 li
749.996 414.838 li
cp
f
749.994 365.738 mo
765.743 349.987 li
749.992 334.238 li
734.243 349.989 li
749.994 365.738 li
cp
f
749.991 316.638 mo
766.64 299.987 li
749.99 283.338 li
733.341 299.989 li
749.991 316.638 li
cp
f
749.989 267.538 mo
767.538 249.987 li
749.987 232.438 li
732.438 249.989 li
749.989 267.538 li
cp
f
749.987 218.438 mo
768.436 199.987 li
749.985 181.538 li
731.535 199.989 li
749.987 218.438 li
cp
f
749.984 169.338 mo
769.333 149.987 li
749.982 130.638 li
730.633 149.989 li
749.984 169.338 li
cp
f
749.982 120.238 mo
770.231 99.987 li
749.98 79.738 li
729.731 99.989 li
749.982 120.238 li
cp
f
749.979 71.1384 mo
771.128 49.987 li
749.977 28.8376 li
728.828 49.989 li
749.979 71.1384 li
cp
f
749.977 22.0378 mo
772.026 -.013047 li
749.975 -22.0618 li
727.926 -.010932 li
749.977 22.0378 li
cp
f
700.024 1004.04 mo
704.074 999.99 li
700.024 995.941 li
695.974 999.991 li
700.024 1004.04 li
cp
f
700.022 954.941 mo
704.972 949.99 li
700.021 945.04 li
695.071 949.991 li
700.022 954.941 li
cp
f
700.019 905.84 mo
705.869 899.99 li
700.019 894.14 li
694.169 899.991 li
700.019 905.84 li
cp
f
700.017 856.74 mo
706.767 849.99 li
700.016 843.24 li
693.267 849.991 li
700.017 856.74 li
cp
f
700.015 807.64 mo
707.664 799.99 li
700.014 792.34 li
692.364 799.991 li
700.015 807.64 li
cp
f
700.012 758.54 mo
708.562 749.99 li
700.012 741.441 li
691.462 749.991 li
700.012 758.54 li
cp
f
700.01 709.441 mo
709.46 699.99 li
700.009 690.54 li
690.559 699.991 li
700.01 709.441 li
cp
f
700.008 660.341 mo
710.357 649.99 li
700.007 639.64 li
689.658 649.991 li
700.008 660.341 li
cp
f
700.005 611.24 mo
711.255 599.99 li
700.004 588.74 li
688.755 599.991 li
700.005 611.24 li
cp
f
700.003 562.141 mo
712.152 549.99 li
700.002 537.84 li
687.852 549.991 li
700.003 562.141 li
cp
f
700.001 513.04 mo
713.05 499.99 li
699.999 486.941 li
686.95 499.991 li
700.001 513.04 li
cp
f
699.998 463.941 mo
713.948 449.99 li
699.997 436.04 li
686.047 449.991 li
699.998 463.941 li
cp
f
699.996 414.84 mo
714.845 399.99 li
699.995 385.141 li
685.146 399.991 li
699.996 414.84 li
cp
f
699.994 365.74 mo
715.743 349.99 li
699.992 334.24 li
684.243 349.991 li
699.994 365.74 li
cp
f
699.991 316.641 mo
716.64 299.99 li
699.99 283.34 li
683.34 299.991 li
699.991 316.641 li
cp
f
699.989 267.54 mo
717.538 249.99 li
699.987 232.441 li
682.438 249.991 li
699.989 267.54 li
cp
f
699.987 218.441 mo
718.436 199.99 li
699.985 181.54 li
681.535 199.991 li
699.987 218.441 li
cp
f
699.984 169.34 mo
719.333 149.989 li
699.982 130.641 li
680.634 149.991 li
699.984 169.34 li
cp
f
699.982 120.24 mo
720.231 99.9894 li
699.98 79.7404 li
679.731 99.9914 li
699.982 120.24 li
cp
f
699.979 71.1408 mo
721.128 49.9894 li
699.977 28.84 li
678.828 49.9914 li
699.979 71.1408 li
cp
f
699.977 22.0402 mo
722.026 -.010649 li
699.975 -22.0594 li
677.926 -.00853396 li
699.977 22.0402 li
cp
f
650.024 1004.04 mo
654.074 999.993 li
650.024 995.943 li
645.974 999.993 li
650.024 1004.04 li
cp
f
650.022 954.943 mo
654.972 949.993 li
650.021 945.043 li
645.071 949.993 li
650.022 954.943 li
cp
f
650.019 905.843 mo
655.869 899.992 li
650.019 894.143 li
644.17 899.993 li
650.019 905.843 li
cp
f
650.017 856.743 mo
656.767 849.992 li
650.016 843.243 li
643.267 849.993 li
650.017 856.743 li
cp
f
650.015 807.643 mo
657.665 799.992 li
650.014 792.343 li
642.364 799.993 li
650.015 807.643 li
cp
f
650.012 758.543 mo
658.562 749.992 li
650.012 741.443 li
641.462 749.993 li
650.012 758.543 li
cp
f
650.01 709.443 mo
659.46 699.992 li
650.009 690.543 li
640.559 699.993 li
650.01 709.443 li
cp
f
650.008 660.343 mo
660.357 649.992 li
650.007 639.643 li
639.658 649.993 li
650.008 660.343 li
cp
f
650.005 611.243 mo
661.255 599.992 li
650.004 588.743 li
638.755 599.993 li
650.005 611.243 li
cp
f
650.003 562.143 mo
662.153 549.992 li
650.002 537.842 li
637.852 549.993 li
650.003 562.143 li
cp
f
650.001 513.043 mo
663.05 499.992 li
649.999 486.943 li
636.95 499.993 li
650.001 513.043 li
cp
f
649.998 463.943 mo
663.948 449.992 li
649.997 436.043 li
636.047 449.993 li
649.998 463.943 li
cp
f
649.996 414.842 mo
664.845 399.992 li
649.995 385.143 li
635.146 399.993 li
649.996 414.842 li
cp
f
649.994 365.743 mo
665.743 349.992 li
649.992 334.243 li
634.243 349.994 li
649.994 365.743 li
cp
f
649.991 316.643 mo
666.641 299.992 li
649.99 283.342 li
633.34 299.994 li
649.991 316.643 li
cp
f
649.989 267.543 mo
667.538 249.992 li
649.987 232.443 li
632.438 249.994 li
649.989 267.543 li
cp
f
649.987 218.443 mo
668.436 199.992 li
649.985 181.543 li
631.535 199.994 li
649.987 218.443 li
cp
f
649.984 169.342 mo
669.333 149.992 li
649.982 130.643 li
630.634 149.994 li
649.984 169.342 li
cp
f
649.982 120.243 mo
670.231 99.9918 li
649.98 79.7428 li
629.731 99.9938 li
649.982 120.243 li
cp
f
649.979 71.1432 mo
671.129 49.9918 li
649.977 28.8424 li
628.828 49.9938 li
649.979 71.1432 li
cp
f
649.977 22.0426 mo
672.026 -.00825097 li
649.975 -22.057 li
627.926 -.00613595 li
649.977 22.0426 li
cp
f
600.024 1004.04 mo
604.074 999.995 li
600.024 995.945 li
595.974 999.995 li
600.024 1004.04 li
cp
f
600.022 954.945 mo
604.972 949.995 li
600.021 945.045 li
595.071 949.995 li
600.022 954.945 li
cp
f
600.019 905.845 mo
605.869 899.995 li
600.019 894.145 li
594.17 899.995 li
600.019 905.845 li
cp
f
600.017 856.745 mo
606.767 849.995 li
600.016 843.245 li
593.267 849.996 li
600.017 856.745 li
cp
f
600.015 807.645 mo
607.665 799.995 li
600.014 792.345 li
592.364 799.996 li
600.015 807.645 li
cp
f
600.012 758.545 mo
608.562 749.995 li
600.012 741.445 li
591.462 749.996 li
600.012 758.545 li
cp
f
600.01 709.445 mo
609.46 699.995 li
600.009 690.545 li
590.559 699.996 li
600.01 709.445 li
cp
f
600.008 660.345 mo
610.357 649.995 li
600.007 639.645 li
589.658 649.996 li
600.008 660.345 li
cp
f
600.005 611.245 mo
611.255 599.995 li
600.004 588.745 li
588.755 599.996 li
600.005 611.245 li
cp
f
600.003 562.146 mo
612.153 549.995 li
600.002 537.845 li
587.852 549.996 li
600.003 562.146 li
cp
f
600.001 513.045 mo
613.05 499.995 li
599.999 486.945 li
586.95 499.996 li
600.001 513.045 li
cp
f
599.998 463.945 mo
613.948 449.995 li
599.997 436.045 li
586.047 449.996 li
599.998 463.945 li
cp
f
599.996 414.845 mo
614.845 399.994 li
599.995 385.146 li
585.146 399.996 li
599.996 414.845 li
cp
f
599.994 365.745 mo
615.743 349.994 li
599.992 334.245 li
584.243 349.996 li
599.994 365.745 li
cp
f
599.991 316.646 mo
616.641 299.994 li
599.99 283.345 li
583.34 299.996 li
599.991 316.646 li
cp
f
599.989 267.545 mo
617.538 249.994 li
599.987 232.445 li
582.438 249.996 li
599.989 267.545 li
cp
f
599.987 218.445 mo
618.436 199.994 li
599.985 181.545 li
581.535 199.996 li
599.987 218.445 li
cp
f
599.984 169.345 mo
619.333 149.994 li
599.982 130.646 li
580.634 149.996 li
599.984 169.345 li
cp
f
599.982 120.245 mo
620.231 99.9942 li
599.98 79.7452 li
579.731 99.9962 li
599.982 120.245 li
cp
f
599.979 71.1456 mo
621.129 49.9942 li
599.977 28.8448 li
578.828 49.9962 li
599.979 71.1456 li
cp
f
599.977 22.045 mo
622.026 -.00585296 li
599.975 -22.0546 li
577.926 -.00373793 li
599.977 22.045 li
cp
f
550.024 1004.05 mo
554.074 999.997 li
550.024 995.948 li
545.974 999.998 li
550.024 1004.05 li
cp
f
550.022 954.948 mo
554.972 949.997 li
550.021 945.047 li
545.071 949.998 li
550.022 954.948 li
cp
f
550.019 905.848 mo
555.869 899.997 li
550.019 894.147 li
544.17 899.998 li
550.019 905.848 li
cp
f
550.017 856.748 mo
556.767 849.997 li
550.016 843.248 li
543.267 849.998 li
550.017 856.748 li
cp
f
550.015 807.647 mo
557.665 799.997 li
550.014 792.348 li
542.364 799.998 li
550.015 807.647 li
cp
f
550.012 758.547 mo
558.562 749.997 li
550.012 741.448 li
541.462 749.998 li
550.012 758.547 li
cp
f
550.01 709.448 mo
559.46 699.997 li
550.009 690.547 li
540.559 699.998 li
550.01 709.448 li
cp
f
550.008 660.348 mo
560.357 649.997 li
550.007 639.647 li
539.658 649.998 li
550.008 660.348 li
cp
f
550.005 611.248 mo
561.255 599.997 li
550.004 588.748 li
538.755 599.998 li
550.005 611.248 li
cp
f
550.003 562.148 mo
562.153 549.997 li
550.002 537.847 li
537.852 549.998 li
550.003 562.148 li
cp
f
550.001 513.047 mo
563.05 499.997 li
549.999 486.948 li
536.95 499.998 li
550.001 513.047 li
cp
f
549.998 463.948 mo
563.948 449.997 li
549.997 436.047 li
536.047 449.998 li
549.998 463.948 li
cp
f
549.996 414.847 mo
564.845 399.997 li
549.995 385.148 li
535.146 399.998 li
549.996 414.847 li
cp
f
549.994 365.748 mo
565.743 349.997 li
549.992 334.248 li
534.243 349.998 li
549.994 365.748 li
cp
f
549.991 316.648 mo
566.641 299.997 li
549.99 283.347 li
533.34 299.998 li
549.991 316.648 li
cp
f
549.989 267.547 mo
567.538 249.997 li
549.987 232.448 li
532.438 249.998 li
549.989 267.547 li
cp
f
549.987 218.448 mo
568.436 199.997 li
549.985 181.547 li
531.535 199.998 li
549.987 218.448 li
cp
f
549.984 169.347 mo
569.333 149.997 li
549.982 130.648 li
530.634 149.999 li
549.984 169.347 li
cp
f
549.982 120.248 mo
570.231 99.9966 li
549.98 79.7476 li
529.731 99.9986 li
549.982 120.248 li
cp
f
549.979 71.148 mo
571.129 49.9966 li
549.977 28.8472 li
528.828 49.9986 li
549.979 71.148 li
cp
f
549.977 22.0474 mo
572.026 -.00345495 li
549.975 -22.0522 li
527.926 -.00133992 li
549.977 22.0474 li
cp
f
500.024 1004.05 mo
504.074 1000 li
500.024 995.95 li
495.974 1000 li
500.024 1004.05 li
cp
f
500.022 954.95 mo
504.972 950 li
500.021 945.05 li
495.071 950 li
500.022 954.95 li
cp
f
500.019 905.85 mo
505.869 900 li
500.019 894.15 li
494.17 900 li
500.019 905.85 li
cp
f
500.017 856.75 mo
506.767 850 li
500.016 843.25 li
493.267 850 li
500.017 856.75 li
cp
f
500.015 807.65 mo
507.665 800 li
500.014 792.35 li
492.364 800 li
500.015 807.65 li
cp
f
500.012 758.55 mo
508.562 750 li
500.012 741.45 li
491.462 750 li
500.012 758.55 li
cp
f
500.01 709.45 mo
509.46 700 li
500.009 690.55 li
490.559 700 li
500.01 709.45 li
cp
f
500.008 660.35 mo
510.357 650 li
500.007 639.65 li
489.658 650 li
500.008 660.35 li
cp
f
500.005 611.25 mo
511.255 599.999 li
500.004 588.75 li
488.755 600.001 li
500.005 611.25 li
cp
f
500.003 562.15 mo
512.153 549.999 li
500.002 537.85 li
487.852 550.001 li
500.003 562.15 li
cp
f
500.001 513.05 mo
513.05 499.999 li
499.999 486.95 li
486.95 500.001 li
500.001 513.05 li
cp
f
499.998 463.95 mo
513.948 449.999 li
499.997 436.05 li
486.047 450.001 li
499.998 463.95 li
cp
f
499.996 414.85 mo
514.845 399.999 li
499.994 385.15 li
485.146 400.001 li
499.996 414.85 li
cp
f
499.994 365.75 mo
515.743 349.999 li
499.992 334.25 li
484.243 350.001 li
499.994 365.75 li
cp
f
499.991 316.65 mo
516.641 299.999 li
499.99 283.35 li
483.34 300.001 li
499.991 316.65 li
cp
f
499.989 267.55 mo
517.538 249.999 li
499.987 232.45 li
482.438 250.001 li
499.989 267.55 li
cp
f
499.986 218.45 mo
518.436 199.999 li
499.985 181.55 li
481.535 200.001 li
499.986 218.45 li
cp
f
499.984 169.35 mo
519.333 149.999 li
499.982 130.65 li
480.634 150.001 li
499.984 169.35 li
cp
f
499.982 120.25 mo
520.231 99.999 li
499.98 79.75 li
479.731 100.001 li
499.982 120.25 li
cp
f
499.979 71.1504 mo
521.129 49.999 li
499.977 28.8496 li
478.828 50.001 li
499.979 71.1504 li
cp
f
499.977 22.0498 mo
522.026 -.00105694 li
499.975 -22.0498 li
477.926 .00105809 li
499.977 22.0498 li
cp
f
450.024 1004.05 mo
454.074 1000 li
450.024 995.953 li
445.974 1000 li
450.024 1004.05 li
cp
f
450.022 954.953 mo
454.972 950.002 li
450.021 945.052 li
445.071 950.003 li
450.022 954.953 li
cp
f
450.019 905.852 mo
455.869 900.002 li
450.019 894.152 li
444.17 900.003 li
450.019 905.852 li
cp
f
450.017 856.752 mo
456.767 850.002 li
450.016 843.252 li
443.267 850.003 li
450.017 856.752 li
cp
f
450.015 807.652 mo
457.665 800.002 li
450.014 792.352 li
442.364 800.003 li
450.015 807.652 li
cp
f
450.012 758.552 mo
458.562 750.002 li
450.012 741.453 li
441.462 750.003 li
450.012 758.552 li
cp
f
450.01 709.453 mo
459.46 700.002 li
450.009 690.552 li
440.559 700.003 li
450.01 709.453 li
cp
f
450.008 660.352 mo
460.357 650.002 li
450.007 639.652 li
439.658 650.003 li
450.008 660.352 li
cp
f
450.005 611.252 mo
461.255 600.002 li
450.004 588.752 li
438.755 600.003 li
450.005 611.252 li
cp
f
450.003 562.153 mo
462.153 550.002 li
450.002 537.852 li
437.852 550.003 li
450.003 562.153 li
cp
f
450.001 513.052 mo
463.05 500.002 li
449.999 486.953 li
436.95 500.003 li
450.001 513.052 li
cp
f
449.998 463.953 mo
463.948 450.002 li
449.997 436.052 li
436.047 450.003 li
449.998 463.953 li
cp
f
449.996 414.852 mo
464.845 400.002 li
449.994 385.153 li
435.146 400.003 li
449.996 414.852 li
cp
f
449.994 365.752 mo
465.743 350.002 li
449.992 334.252 li
434.243 350.003 li
449.994 365.752 li
cp
f
449.991 316.653 mo
466.641 300.002 li
449.99 283.352 li
433.34 300.003 li
449.991 316.653 li
cp
f
449.989 267.552 mo
467.538 250.002 li
449.987 232.453 li
432.438 250.003 li
449.989 267.552 li
cp
f
449.986 218.453 mo
468.436 200.002 li
449.985 181.552 li
431.535 200.003 li
449.986 218.453 li
cp
f
449.984 169.352 mo
469.333 150.001 li
449.982 130.653 li
430.634 150.003 li
449.984 169.352 li
cp
f
449.982 120.252 mo
470.231 100.001 li
449.98 79.7524 li
429.731 100.003 li
449.982 120.252 li
cp
f
449.979 71.1528 mo
471.129 50.0014 li
449.977 28.852 li
428.828 50.0034 li
449.979 71.1528 li
cp
f
449.977 22.0522 mo
472.026 .00134107 li
449.975 -22.0474 li
427.926 .0034561 li
449.977 22.0522 li
cp
f
400.024 1004.05 mo
404.074 1000 li
400.024 995.955 li
395.974 1000.01 li
400.024 1004.05 li
cp
f
400.022 954.955 mo
404.972 950.005 li
400.021 945.055 li
395.071 950.005 li
400.022 954.955 li
cp
f
400.019 905.855 mo
405.869 900.005 li
400.019 894.155 li
394.17 900.005 li
400.019 905.855 li
cp
f
400.017 856.755 mo
406.767 850.004 li
400.016 843.255 li
393.267 850.005 li
400.017 856.755 li
cp
f
400.015 807.655 mo
407.665 800.004 li
400.014 792.355 li
392.364 800.005 li
400.015 807.655 li
cp
f
400.012 758.555 mo
408.562 750.004 li
400.012 741.455 li
391.462 750.005 li
400.012 758.555 li
cp
f
400.01 709.455 mo
409.46 700.004 li
400.009 690.555 li
390.559 700.005 li
400.01 709.455 li
cp
f
400.008 660.355 mo
410.357 650.004 li
400.007 639.655 li
389.658 650.005 li
400.008 660.355 li
cp
f
400.005 611.255 mo
411.255 600.004 li
400.004 588.755 li
388.755 600.005 li
400.005 611.255 li
cp
f
400.003 562.155 mo
412.153 550.004 li
400.002 537.854 li
387.852 550.005 li
400.003 562.155 li
cp
f
400.001 513.055 mo
413.05 500.004 li
399.999 486.955 li
386.95 500.005 li
400.001 513.055 li
cp
f
399.998 463.955 mo
413.948 450.004 li
399.997 436.055 li
386.047 450.005 li
399.998 463.955 li
cp
f
399.996 414.854 mo
414.845 400.004 li
399.994 385.155 li
385.146 400.005 li
399.996 414.854 li
cp
f
399.994 365.755 mo
415.743 350.004 li
399.992 334.255 li
384.243 350.006 li
399.994 365.755 li
cp
f
399.991 316.655 mo
416.641 300.004 li
399.99 283.354 li
383.34 300.006 li
399.991 316.655 li
cp
f
399.989 267.555 mo
417.538 250.004 li
399.987 232.455 li
382.438 250.006 li
399.989 267.555 li
cp
f
399.986 218.455 mo
418.436 200.004 li
399.985 181.555 li
381.535 200.006 li
399.986 218.455 li
cp
f
399.984 169.354 mo
419.333 150.004 li
399.982 130.655 li
380.634 150.006 li
399.984 169.354 li
cp
f
399.982 120.255 mo
420.231 100.004 li
399.98 79.7548 li
379.731 100.006 li
399.982 120.255 li
cp
f
399.979 71.1552 mo
421.129 50.0038 li
399.977 28.8544 li
378.828 50.0058 li
399.979 71.1552 li
cp
f
399.977 22.0546 mo
422.026 .00373908 li
399.975 -22.045 li
377.926 .00585411 li
399.977 22.0546 li
cp
f
350.024 1004.06 mo
354.074 1000.01 li
350.024 995.957 li
345.974 1000.01 li
350.024 1004.06 li
cp
f
350.022 954.957 mo
354.972 950.007 li
350.021 945.057 li
345.071 950.007 li
350.022 954.957 li
cp
f
350.019 905.857 mo
355.869 900.007 li
350.019 894.157 li
344.17 900.007 li
350.019 905.857 li
cp
f
350.017 856.757 mo
356.767 850.007 li
350.016 843.257 li
343.267 850.008 li
350.017 856.757 li
cp
f
350.015 807.657 mo
357.665 800.007 li
350.014 792.357 li
342.364 800.008 li
350.015 807.657 li
cp
f
350.012 758.557 mo
358.562 750.007 li
350.012 741.457 li
341.462 750.008 li
350.012 758.557 li
cp
f
350.01 709.457 mo
359.46 700.007 li
350.009 690.557 li
340.559 700.008 li
350.01 709.457 li
cp
f
350.008 660.357 mo
360.357 650.007 li
350.007 639.657 li
339.658 650.008 li
350.008 660.357 li
cp
f
350.005 611.257 mo
361.255 600.007 li
350.004 588.757 li
338.755 600.008 li
350.005 611.257 li
cp
f
350.003 562.158 mo
362.153 550.007 li
350.002 537.857 li
337.852 550.008 li
350.003 562.158 li
cp
f
350.001 513.057 mo
363.05 500.007 li
349.999 486.957 li
336.95 500.008 li
350.001 513.057 li
cp
f
349.998 463.957 mo
363.948 450.007 li
349.997 436.057 li
336.047 450.008 li
349.998 463.957 li
cp
f
349.996 414.857 mo
364.845 400.006 li
349.994 385.158 li
335.146 400.008 li
349.996 414.857 li
cp
f
349.994 365.757 mo
365.743 350.006 li
349.992 334.257 li
334.243 350.008 li
349.994 365.757 li
cp
f
349.991 316.658 mo
366.641 300.006 li
349.99 283.357 li
333.34 300.008 li
349.991 316.658 li
cp
f
349.989 267.557 mo
367.538 250.006 li
349.987 232.457 li
332.438 250.008 li
349.989 267.557 li
cp
f
349.986 218.457 mo
368.436 200.006 li
349.985 181.557 li
331.535 200.008 li
349.986 218.457 li
cp
f
349.984 169.357 mo
369.333 150.006 li
349.982 130.658 li
330.634 150.008 li
349.984 169.357 li
cp
f
349.982 120.257 mo
370.231 100.006 li
349.98 79.7572 li
329.731 100.008 li
349.982 120.257 li
cp
f
349.979 71.1576 mo
371.129 50.0062 li
349.977 28.8568 li
328.828 50.0082 li
349.979 71.1576 li
cp
f
349.977 22.057 mo
372.026 .00613709 li
349.975 -22.0426 li
327.926 .00825212 li
349.977 22.057 li
cp
f
300.024 1004.06 mo
304.074 1000.01 li
300.024 995.96 li
295.974 1000.01 li
300.024 1004.06 li
cp
f
300.022 954.96 mo
304.972 950.009 li
300.021 945.059 li
295.071 950.01 li
300.022 954.96 li
cp
f
300.019 905.86 mo
305.869 900.009 li
300.019 894.159 li
294.17 900.01 li
300.019 905.86 li
cp
f
300.017 856.76 mo
306.767 850.009 li
300.016 843.26 li
293.267 850.01 li
300.017 856.76 li
cp
f
300.015 807.659 mo
307.665 800.009 li
300.014 792.36 li
292.364 800.01 li
300.015 807.659 li
cp
f
300.012 758.559 mo
308.562 750.009 li
300.012 741.46 li
291.462 750.01 li
300.012 758.559 li
cp
f
300.01 709.46 mo
309.46 700.009 li
300.009 690.559 li
290.559 700.01 li
300.01 709.46 li
cp
f
300.008 660.36 mo
310.357 650.009 li
300.007 639.659 li
289.658 650.01 li
300.008 660.36 li
cp
f
300.005 611.26 mo
311.255 600.009 li
300.004 588.76 li
288.755 600.01 li
300.005 611.26 li
cp
f
300.003 562.16 mo
312.153 550.009 li
300.002 537.859 li
287.852 550.01 li
300.003 562.16 li
cp
f
300.001 513.059 mo
313.05 500.009 li
299.999 486.96 li
286.95 500.01 li
300.001 513.059 li
cp
f
299.998 463.96 mo
313.948 450.009 li
299.997 436.059 li
286.047 450.01 li
299.998 463.96 li
cp
f
299.996 414.859 mo
314.845 400.009 li
299.994 385.16 li
285.146 400.01 li
299.996 414.859 li
cp
f
299.994 365.76 mo
315.743 350.009 li
299.992 334.26 li
284.243 350.01 li
299.994 365.76 li
cp
f
299.991 316.66 mo
316.641 300.009 li
299.99 283.359 li
283.34 300.01 li
299.991 316.66 li
cp
f
299.989 267.559 mo
317.538 250.009 li
299.987 232.46 li
282.438 250.01 li
299.989 267.559 li
cp
f
299.986 218.46 mo
318.436 200.009 li
299.985 181.559 li
281.535 200.01 li
299.986 218.46 li
cp
f
299.984 169.359 mo
319.333 150.009 li
299.982 130.66 li
280.634 150.011 li
299.984 169.359 li
cp
f
299.982 120.26 mo
320.231 100.009 li
299.98 79.7596 li
279.731 100.011 li
299.982 120.26 li
cp
f
299.979 71.16 mo
321.129 50.0086 li
299.977 28.8592 li
278.828 50.0106 li
299.979 71.16 li
cp
f
299.977 22.0594 mo
322.026 .0085351 li
299.975 -22.0402 li
277.926 .0106501 li
299.977 22.0594 li
cp
f
250.024 1004.06 mo
254.074 1000.01 li
250.024 995.962 li
245.974 1000.01 li
250.024 1004.06 li
cp
f
250.022 954.962 mo
254.972 950.012 li
250.021 945.062 li
245.071 950.012 li
250.022 954.962 li
cp
f
250.019 905.862 mo
255.869 900.012 li
250.019 894.162 li
244.17 900.012 li
250.019 905.862 li
cp
f
250.017 856.762 mo
256.767 850.012 li
250.016 843.262 li
243.267 850.012 li
250.017 856.762 li
cp
f
250.015 807.662 mo
257.665 800.012 li
250.014 792.362 li
242.364 800.012 li
250.015 807.662 li
cp
f
250.012 758.562 mo
258.562 750.012 li
250.012 741.462 li
241.462 750.012 li
250.012 758.562 li
cp
f
250.01 709.462 mo
259.46 700.012 li
250.009 690.562 li
240.559 700.012 li
250.01 709.462 li
cp
f
250.008 660.362 mo
260.357 650.011 li
250.007 639.662 li
239.658 650.012 li
250.008 660.362 li
cp
f
250.005 611.262 mo
261.255 600.011 li
250.004 588.762 li
238.755 600.013 li
250.005 611.262 li
cp
f
250.003 562.162 mo
262.153 550.011 li
250.002 537.862 li
237.852 550.013 li
250.003 562.162 li
cp
f
250.001 513.062 mo
263.05 500.011 li
249.999 486.962 li
236.95 500.013 li
250.001 513.062 li
cp
f
249.998 463.962 mo
263.948 450.011 li
249.997 436.062 li
236.047 450.013 li
249.998 463.962 li
cp
f
249.996 414.862 mo
264.845 400.011 li
249.994 385.162 li
235.146 400.013 li
249.996 414.862 li
cp
f
249.994 365.762 mo
265.743 350.011 li
249.992 334.262 li
234.243 350.013 li
249.994 365.762 li
cp
f
249.991 316.662 mo
266.641 300.011 li
249.99 283.362 li
233.34 300.013 li
249.991 316.662 li
cp
f
249.989 267.562 mo
267.538 250.011 li
249.987 232.462 li
232.438 250.013 li
249.989 267.562 li
cp
f
249.986 218.462 mo
268.436 200.011 li
249.985 181.562 li
231.535 200.013 li
249.986 218.462 li
cp
f
249.984 169.362 mo
269.333 150.011 li
249.982 130.662 li
230.634 150.013 li
249.984 169.362 li
cp
f
249.982 120.262 mo
270.231 100.011 li
249.98 79.762 li
229.731 100.013 li
249.982 120.262 li
cp
f
249.979 71.1624 mo
271.129 50.011 li
249.977 28.8616 li
228.828 50.013 li
249.979 71.1624 li
cp
f
249.977 22.0618 mo
272.026 .0109331 li
249.975 -22.0378 li
227.926 .0130481 li
249.977 22.0618 li
cp
f
200.024 1004.06 mo
204.074 1000.01 li
200.024 995.965 li
195.974 1000.01 li
200.024 1004.06 li
cp
f
200.022 954.965 mo
204.972 950.014 li
200.021 945.064 li
195.071 950.015 li
200.022 954.965 li
cp
f
200.019 905.864 mo
205.869 900.014 li
200.019 894.164 li
194.17 900.015 li
200.019 905.864 li
cp
f
200.017 856.764 mo
206.767 850.014 li
200.016 843.264 li
193.267 850.015 li
200.017 856.764 li
cp
f
200.015 807.664 mo
207.665 800.014 li
200.014 792.364 li
192.364 800.015 li
200.015 807.664 li
cp
f
200.012 758.564 mo
208.562 750.014 li
200.012 741.465 li
191.462 750.015 li
200.012 758.564 li
cp
f
200.01 709.465 mo
209.46 700.014 li
200.009 690.564 li
190.559 700.015 li
200.01 709.465 li
cp
f
200.008 660.364 mo
210.357 650.014 li
200.007 639.664 li
189.658 650.015 li
200.008 660.364 li
cp
f
200.005 611.264 mo
211.255 600.014 li
200.004 588.764 li
188.755 600.015 li
200.005 611.264 li
cp
f
200.003 562.165 mo
212.153 550.014 li
200.002 537.864 li
187.852 550.015 li
200.003 562.165 li
cp
f
200.001 513.064 mo
213.05 500.014 li
199.999 486.965 li
186.95 500.015 li
200.001 513.064 li
cp
f
199.998 463.965 mo
213.948 450.014 li
199.997 436.064 li
186.047 450.015 li
199.998 463.965 li
cp
f
199.996 414.864 mo
214.845 400.014 li
199.994 385.165 li
185.146 400.015 li
199.996 414.864 li
cp
f
199.994 365.764 mo
215.743 350.014 li
199.992 334.264 li
184.243 350.015 li
199.994 365.764 li
cp
f
199.991 316.665 mo
216.641 300.014 li
199.99 283.364 li
183.34 300.015 li
199.991 316.665 li
cp
f
199.989 267.564 mo
217.538 250.014 li
199.987 232.465 li
182.438 250.015 li
199.989 267.564 li
cp
f
199.986 218.465 mo
218.436 200.013 li
199.985 181.564 li
181.535 200.015 li
199.986 218.465 li
cp
f
199.984 169.364 mo
219.333 150.013 li
199.982 130.665 li
180.634 150.015 li
199.984 169.364 li
cp
f
199.982 120.264 mo
220.231 100.013 li
199.98 79.7644 li
179.731 100.015 li
199.982 120.264 li
cp
f
199.979 71.1648 mo
221.129 50.0134 li
199.977 28.864 li
178.828 50.0154 li
199.979 71.1648 li
cp
f
199.977 22.0642 mo
222.026 .0133311 li
199.975 -22.0354 li
177.926 .0154462 li
199.977 22.0642 li
cp
f
150.024 1004.07 mo
154.074 1000.02 li
150.024 995.967 li
145.974 1000.02 li
150.024 1004.07 li
cp
f
150.022 954.967 mo
154.972 950.017 li
150.021 945.067 li
145.071 950.017 li
150.022 954.967 li
cp
f
150.019 905.867 mo
155.869 900.016 li
150.019 894.167 li
144.17 900.017 li
150.019 905.867 li
cp
f
150.017 856.767 mo
156.767 850.016 li
150.016 843.267 li
143.267 850.017 li
150.017 856.767 li
cp
f
150.015 807.667 mo
157.665 800.016 li
150.014 792.367 li
142.364 800.017 li
150.015 807.667 li
cp
f
150.012 758.567 mo
158.562 750.016 li
150.012 741.467 li
141.462 750.017 li
150.012 758.567 li
cp
f
150.01 709.467 mo
159.46 700.016 li
150.009 690.567 li
140.559 700.017 li
150.01 709.467 li
cp
f
150.008 660.367 mo
160.357 650.016 li
150.007 639.667 li
139.658 650.017 li
150.008 660.367 li
cp
f
150.005 611.267 mo
161.255 600.016 li
150.004 588.767 li
138.755 600.017 li
150.005 611.267 li
cp
f
150.003 562.167 mo
162.153 550.016 li
150.002 537.866 li
137.852 550.017 li
150.003 562.167 li
cp
f
150.001 513.067 mo
163.05 500.016 li
149.999 486.967 li
136.95 500.017 li
150.001 513.067 li
cp
f
149.998 463.967 mo
163.948 450.016 li
149.997 436.067 li
136.047 450.017 li
149.998 463.967 li
cp
f
149.996 414.866 mo
164.845 400.016 li
149.994 385.167 li
135.146 400.017 li
149.996 414.866 li
cp
f
149.994 365.767 mo
165.743 350.016 li
149.992 334.267 li
134.243 350.018 li
149.994 365.767 li
cp
f
149.991 316.667 mo
166.641 300.016 li
149.99 283.366 li
133.34 300.018 li
149.991 316.667 li
cp
f
149.989 267.567 mo
167.538 250.016 li
149.987 232.467 li
132.438 250.018 li
149.989 267.567 li
cp
f
149.986 218.467 mo
168.436 200.016 li
149.985 181.567 li
131.535 200.018 li
149.986 218.467 li
cp
f
149.984 169.366 mo
169.333 150.016 li
149.982 130.667 li
130.634 150.018 li
149.984 169.366 li
cp
f
149.982 120.267 mo
170.231 100.016 li
149.98 79.7668 li
129.731 100.018 li
149.982 120.267 li
cp
f
149.979 71.1672 mo
171.129 50.0158 li
149.977 28.8664 li
128.828 50.0178 li
149.979 71.1672 li
cp
f
149.977 22.0666 mo
172.026 .0157291 li
149.975 -22.033 li
127.926 .0178442 li
149.977 22.0666 li
cp
f
100.024 1004.07 mo
104.074 1000.02 li
100.024 995.969 li
95.9742 1000.02 li
100.024 1004.07 li
cp
f
100.022 954.969 mo
104.972 950.019 li
100.021 945.069 li
95.0714 950.019 li
100.022 954.969 li
cp
f
100.019 905.869 mo
105.869 900.019 li
100.019 894.169 li
94.1696 900.019 li
100.019 905.869 li
cp
f
100.017 856.769 mo
106.767 850.019 li
100.016 843.269 li
93.2668 850.019 li
100.017 856.769 li
cp
f
100.015 807.669 mo
107.665 800.019 li
100.014 792.369 li
92.364 800.02 li
100.015 807.669 li
cp
f
100.012 758.569 mo
108.562 750.019 li
100.012 741.469 li
91.4622 750.02 li
100.012 758.569 li
cp
f
100.01 709.469 mo
109.46 700.019 li
100.009 690.569 li
90.5594 700.02 li
100.01 709.469 li
cp
f
100.008 660.369 mo
110.357 650.019 li
100.007 639.669 li
89.6576 650.02 li
100.008 660.369 li
cp
f
100.005 611.269 mo
111.255 600.019 li
100.004 588.769 li
88.7548 600.02 li
100.005 611.269 li
cp
f
100.003 562.17 mo
112.153 550.019 li
100.002 537.869 li
87.852 550.02 li
100.003 562.17 li
cp
f
100.001 513.069 mo
113.05 500.019 li
99.9994 486.969 li
86.9502 500.02 li
100.001 513.069 li
cp
f
99.9983 463.969 mo
113.948 450.018 li
99.9969 436.069 li
86.0474 450.02 li
99.9983 463.969 li
cp
f
99.9959 414.869 mo
114.845 400.018 li
99.9945 385.17 li
85.1456 400.02 li
99.9959 414.869 li
cp
f
99.9936 365.769 mo
115.743 350.018 li
99.992 334.269 li
84.2428 350.02 li
99.9936 365.769 li
cp
f
99.9912 316.67 mo
116.641 300.018 li
99.9896 283.369 li
83.34 300.02 li
99.9912 316.67 li
cp
f
99.9888 267.569 mo
117.538 250.018 li
99.9872 232.469 li
82.4382 250.02 li
99.9888 267.569 li
cp
f
99.9865 218.469 mo
118.436 200.018 li
99.9847 181.569 li
81.5354 200.02 li
99.9865 218.469 li
cp
f
99.9841 169.369 mo
119.333 150.018 li
99.9823 130.67 li
80.6336 150.02 li
99.9841 169.369 li
cp
f
99.9818 120.269 mo
120.231 100.018 li
99.9798 79.7692 li
79.7308 100.02 li
99.9818 120.269 li
cp
f
99.9794 71.1696 mo
121.129 50.0182 li
99.9774 28.8688 li
78.828 50.0202 li
99.9794 71.1696 li
cp
f
99.9771 22.069 mo
122.026 .0181271 li
99.975 -22.0306 li
77.9262 .0202422 li
99.9771 22.069 li
cp
f
50.0242 1004.07 mo
54.0738 1000.02 li
50.0238 995.972 li
45.9742 1000.02 li
50.0242 1004.07 li
cp
f
50.0218 954.972 mo
54.9718 950.021 li
50.0213 945.071 li
45.0714 950.022 li
50.0218 954.972 li
cp
f
50.0195 905.872 mo
55.8688 900.021 li
50.0189 894.171 li
44.1696 900.022 li
50.0195 905.872 li
cp
f
50.0171 856.772 mo
56.7668 850.021 li
50.0165 843.272 li
43.2668 850.022 li
50.0171 856.772 li
cp
f
50.0148 807.671 mo
57.6648 800.021 li
50.014 792.372 li
42.364 800.022 li
50.0148 807.671 li
cp
f
50.0124 758.571 mo
58.5618 750.021 li
50.0116 741.472 li
41.4622 750.022 li
50.0124 758.571 li
cp
f
50.01 709.472 mo
59.4598 700.021 li
50.0091 690.571 li
40.5594 700.022 li
50.01 709.472 li
cp
f
50.0077 660.372 mo
60.3568 650.021 li
50.0067 639.671 li
39.6576 650.022 li
50.0077 660.372 li
cp
f
50.0053 611.272 mo
61.2548 600.021 li
50.0043 588.772 li
38.7548 600.022 li
50.0053 611.272 li
cp
f
50.003 562.172 mo
62.1528 550.021 li
50.0018 537.871 li
37.852 550.022 li
50.003 562.172 li
cp
f
50.0006 513.071 mo
63.0498 500.021 li
49.9994 486.972 li
36.9502 500.022 li
50.0006 513.071 li
cp
f
49.9983 463.972 mo
63.9478 450.021 li
49.9969 436.071 li
36.0474 450.022 li
49.9983 463.972 li
cp
f
49.9959 414.871 mo
64.8448 400.021 li
49.9945 385.172 li
35.1456 400.022 li
49.9959 414.871 li
cp
f
49.9936 365.772 mo
65.7428 350.021 li
49.992 334.272 li
34.2428 350.022 li
49.9936 365.772 li
cp
f
49.9912 316.672 mo
66.6408 300.021 li
49.9896 283.371 li
33.34 300.022 li
49.9912 316.672 li
cp
f
49.9888 267.571 mo
67.5378 250.021 li
49.9872 232.472 li
32.4382 250.022 li
49.9888 267.571 li
cp
f
49.9865 218.472 mo
68.4358 200.021 li
49.9847 181.571 li
31.5354 200.022 li
49.9865 218.472 li
cp
f
49.9841 169.371 mo
69.3328 150.021 li
49.9823 130.672 li
30.6336 150.023 li
49.9841 169.371 li
cp
f
49.9818 120.272 mo
70.2308 100.021 li
49.9798 79.7716 li
29.7308 100.023 li
49.9818 120.272 li
cp
f
49.9794 71.172 mo
71.1288 50.0206 li
49.9774 28.8712 li
28.828 50.0226 li
49.9794 71.172 li
cp
f
49.9771 22.0714 mo
72.0258 .0205252 li
49.975 -22.0282 li
27.9262 .0226402 li
49.9771 22.0714 li
cp
f
.0241749 1004.07 mo
4.0738 1000.02 li
.0237865 995.974 li
-4.0258 1000.02 li
.0241749 1004.07 li
cp
f
.0218201 954.974 mo
4.9718 950.024 li
.0213453 945.074 li
-4.9286 950.024 li
.0218201 954.974 li
cp
f
.0194652 905.874 mo
5.8688 900.024 li
.0189041 894.174 li
-5.83039 900.024 li
.0194652 905.874 li
cp
f
.0171104 856.774 mo
6.76679 850.024 li
.0164629 843.274 li
-6.73321 850.024 li
.0171104 856.774 li
cp
f
.0147555 807.674 mo
7.66481 800.024 li
.0140217 792.374 li
-7.63599 800.024 li
.0147555 807.674 li
cp
f
.0124007 758.574 mo
8.56181 750.024 li
.0115806 741.474 li
-8.53779 750.024 li
.0124007 758.574 li
cp
f
.0100459 709.474 mo
9.45981 700.023 li
.00913938 690.574 li
-9.44059 700.024 li
.0100459 709.474 li
cp
f
.007691 660.374 mo
10.3568 650.023 li
.00669821 639.674 li
-10.3424 650.024 li
.007691 660.374 li
cp
f
.00533615 611.274 mo
11.2548 600.023 li
.00425704 588.774 li
-11.2452 600.025 li
.00533615 611.274 li
cp
f
.00298132 562.174 mo
12.1528 550.023 li
.00181585 537.874 li
-12.148 550.025 li
.00298132 562.174 li
cp
f
.000626445 513.074 mo
13.0498 500.023 li
-.000625297 486.974 li
-13.0498 500.025 li
.000626445 513.074 li
cp
f
-.00172838 463.974 mo
13.9478 450.023 li
-.00306649 436.074 li
-13.9526 450.025 li
-.00172838 463.974 li
cp
f
-.00408326 414.874 mo
14.8448 400.023 li
-.00550764 385.174 li
-14.8544 400.025 li
-.00408326 414.874 li
cp
f
-.00643809 365.774 mo
15.7428 350.023 li
-.00794883 334.274 li
-15.7572 350.025 li
-.00643809 365.774 li
cp
f
-.00879291 316.674 mo
16.6408 300.023 li
-.01039 283.374 li
-16.66 300.025 li
-.00879291 316.674 li
cp
f
-.0111478 267.574 mo
17.5378 250.023 li
-.0128312 232.474 li
-17.5618 250.025 li
-.0111478 267.574 li
cp
f
-.0135026 218.474 mo
18.4358 200.023 li
-.0152724 181.574 li
-18.4646 200.025 li
-.0135026 218.474 li
cp
f
-.0158575 169.374 mo
19.3328 150.023 li
-.0177135 130.674 li
-19.3664 150.025 li
-.0158575 169.374 li
cp
f
-.0182123 120.274 mo
20.2308 100.023 li
-.0201547 79.774 li
-20.2692 100.025 li
-.0182123 120.274 li
cp
f
-.0205671 71.1744 mo
21.1288 50.023 li
-.0225959 28.8736 li
-21.172 50.025 li
-.0205671 71.1744 li
cp
f
-.022922 22.0738 mo
22.0258 .0229232 li
-.0250371 -22.0258 li
-22.0738 .0250382 li
-.022922 22.0738 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 19.0.0
%%For: (Jelle) ()
%%Title: (OBSK511-01.eps)
%%CreationDate: 2/2/2017 7:57 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB6uDEdcQ"MlgfN*B+0O?J?o^)3Tk3pYg$Yd)">a3kJR;m<U+I%du!Ra<PQ.Yc?O//PZlM;;Q4b>BkhCXq9u:l)XeWiIhuSc
%EaD7#,V>=GN*%^)*W'VeC:eXmm5U#<Bi7brs2dhnrg>^n3\F`T^A`L[)r9Oto<m<:'Un],]<`&!r%9p;#N^1%U`@"Gf'CS1@N5"2
%lR2PSqMtPSWn"/HB)AXaNQFdr,+m$#e&G1c?9.rZHE"=h@[]bM<hG2pM[ko)"QSC]kLlc(0D*Xp[G+,gMX&,XV@!PeHi1LKO4.6;
%;IoE,,F^W4.euM2'F"GuQXiIAc/,!lheSd#]A0MG)\37]g30gq<Gm;0r4;qF4g0=BlK)oKoTr/kX8"FL]3,iUS9CrdT&>)-=[kW^
%H,V7CGA?g>>4nMAfQOZ-WO>seXgboT[Juo6O>TaqkYLp9oVZ#4?SlM'oZdg>/5LW]TNS8Fd5PkRV0\PO)Yln3J$K^Mjn=&/MkJFu
%s573d5clr:T`Nk#s/t@$Q<>M(X_Qn/GtD=chT0E94@0bI?R7&^P^G$cW%l76Q"WW\Q5-H,g&B*h@o6?i=Tq+Q0cK;OG3uuo=>8Ve
%qm=nV<UA\j.^9ul6/%IHEW>1GJ(a.^`co&FLACfSH%c>185f<B%+i)DW"b\-GU,?FcOGPj"p.l>q9GScIun;6`(u:KK7*01fL0)F
%26c#D^CKM7gs^9A#<gjW2h,!mNOS'&?aK'`k"@RT=afZqgLtCRZ(mXmk`8,JQ@M)@hCcPe)<c">9Y+JE,m"4DG.+G+q@n@Er+Z-h
%bkI%G2`+*C!VFjc`o#<mZc*6JjhaPNY*U*hG)SPf"Ran@7Sh1*T59Y"@'t>%8g_DH$Zui>6HV:Kq\7s0KrJh%f'!]34tF+Ss"rK&
%GebfZZE<!##X/'dG$dJ(@bIZs#X0kb5EOU$2C]`J0Bf$O5NBJUT7rD0.+ddmpNF+?;1":>[!t+YZ1DS6DFo%tDUlZi,EM=Q6T1]D
%D)[InZou+1Z3&;YOd;d"&\'ab>Ac<lLJb(jm$Q$i%B1b:WT[RKm%6&Mr-n#Z'H#/FJ%[])[Eb*bSc@afc(*L']mBCae#eAQ9kUZj
%jkT\<5-k$AIG@mWrTRMTYeAR*aBj[nrRADYHYtaV>1g!9SUH`,<RO6HaYR.sre/i[IbgHb&$_kVV3/Cu?+I'!d^C,<XoFF<kbsJU
%9*@D:q'qjBqY>b#A+/GO,*lgoKGS:j3e*f:?HNfon9RJ"%%00aq*-do,Upb31]$jldq@<Fm/F.hOWBY=CGc'*OM>64k]Q=?ia)P_
%G97I&b[L=J)G?bZB/O5H<in\dlj3WqNA`e??,iM,U*"s[2>u8%3rX_Irq.61[>TM2Kg,A=F[YR=G5!,u.V%Zc&khMgTN@h1_;a*S
%YmbqWr!R3Sl3a[k_7anpXs4%P8t0hu')oS8]*$I`fDiZMkM.s8^S63:m'j7blu/!ZO\d_c]hP@m#/l0Gd>(\*@T!0Kr#?#aId0o8
%HYIQ);Cm#(,,Uqejp)_^ps7YEm[eIr2uDP0@/gf*7Q__F`b,8LW]*b*H)1)d[?mM''cAYR;L#n20)o"lN2RMph!54!iO5cr<_A3[
%G#27CO7A;!DlfMOj4WZdkNVGU]<d;?k8C:nnIEbA?*=30L%0eU8&5CufrQ0?Rh#?Pnm0dZ2QC23WSW%$XB%Z1P?B^g6j$e2`$Zdb
%BdCP(g5I)9eq@]b?[S*2(qrpZs%WmP't*U*]c(WtKGj%SlTjZ@.4kB;?7k*@@K7IYoC]$1D12earr+<6(HQ,DDrEPfc,9$ArGTn!
%oKo:cci:)Ggj/ce!.7:%PBZ<"fDdjG>a@2u/`lRn/9=uHf6uBO:T`(D#W;+QU_)fqQ4tPqCKWg)I37"nqaW%\@hf`QL%DU7:$Yq>
%(YHU^Tc3Z0P]eL]&[#F>L/UToZjUT@NFpYC4YP&4Z8VEWDd@\A'WQGl?P:A_+<'jQq9sepOsAeF.F8#CS&XL+/OcE>.UeY$2s^5b
%'JfIC6HfGOjY:FVQQ5mk8"i#`:sJA*df1T56Eo&)[`aY*X,J=<L/[a6$_eagTTof,h.f$IkJSu(7-eG49&tJ1k4f`VCa#U2:bCde
%$dmP`O_cibqJ.>R6:>![CENc2bHE'$b81t,r=3/*rk!MrW9K"\V.Qc4ql9UMSA>L(@VAt!`-Zl3]B)Yq>9:W(jG/2PM$c<b$8j3A
%de)j'=sF!)RD3]Mc7ZSt0Q1d&q="!9q#sCGUYd5J4h#?<U*'Cedn7KLYICRoF[?UZZWs#805KVTQ]M-$m%06,8@+E7R3h2^YX^B_
%.b6Y_HMR;$)&%G^S$0<50?nOL'#X_JMam(KooAjrS>0CKpLqV5VsGX#:Lm^!q]/G4p%.;pXe*8QEO/T]Y>62ieu"a0*D'mts0h8N
%Q?G<$"5#'bTc;;$18I\dIBpR3b;&<:O\k@QqrPip&*CbM2d;Y'P&_WJF7#p5C2$^>@irBBlfJhW>+V']\Pf\JV[`DNG<VRWlEm!c
%B=W&r`jsgSG@Kl&h.H#\gd0+Tm6B/U=^DZ"E/+1H:PEPs?9iin;m;uh?:D=Xn#tEsk'\@a;k7LGm:iPG$H.(Zfe7'IM0-EkpL9bS
%k3H[OV]0u\/02L2[8%D,?t1jW;+:hLUpR:<9$S@,4=7I5E5,kG,,QL1<D1M[G6$<+\&tn^mdIB3?Ynia.CN2o2VU`?Dk3o7=0Y<Q
%=@_g_X2I'S\9c`N$5g@WlJ=0BK9c`X[Opd[U0PS<4388]%;S/Y.^uEpeCq*u3a#e62B-C+[D\IhZqtZ<?1+56Y2Kq4gobh#mD#^,
%oBO(r_Yu%"eEZ`mB![-oSWd>:V]-1"bDf]g"(@.Q1Naf<ISSA/MBP+2%H>6E&X:Q7-g84rih]0eZdUCR=mORN5Fcl>?0=-%'rV4^
%O'?jP)O9U&V-:JEoSUr_S5ipc%21)A]M?%@Q&U6=#O@l(J%PE+Shm[#N;>!SHQsAN,%i1]DG(<snFd[R7kgj?I<;PBXf#g.fK?H^
%JgFCdeGd'POQG3(r%s^KDj35BeA?"7ej9]H+'\`&'Z`Aa&*>p/8T!#sc@;`d<lOmL$&(P9;FYU(lD?3/n$Gd-dJUW1DIEm8=j?<h
%6+'Vfq23j&$4jhYP+*=dZD8/Ae;`u&Q+d*'*I(EJHs!F0d=PVGecH5nEqIgtU"(pV9:4TP1cf9Qja)%lLgs,H[[Ch1H(#k#I[8@+
%GJ3Na<N"q@QV2.*UTR$DCR5u)Dt*t,:ANb)4=LbAH%*#>/Ukhq@,Aj\lnqX?Z:<EKlkXN%G]s?@$YGu+@GK7j=m?KCA8Tk:<'_<P
%Q7bT8Y%YAnXi6A6>.1:3;B9Ft`9hP.f69hOot!-i0%!n^c#U96nguoYG4W%Tb==WBp[&dO86p55OMRcE3U8UT6q;qN6;lB(Kf@_a
%m0D"8(lGEj/DLdSq4-eMFp",(Y/P@i(5HrQ@<QuS4dYhf7FECZ*BDAj<k=/'Yi7ib`lu,_f.O)d!t!-'5!R\\R3%^I7Aj<K3u_-7
%i>lEWHFXtV.)3@.3+(mLeu1G*kl_ej]k\ZR0"O0K!@-);#IQ!M_lq@7?J_,nbYIVp0t?.:j0ekbWQ)(ON\0]ErZ:Na@O7_X(u35c
%@;<6"a#;)DT6St!).*#c".(J9[-G&#]\gSG6*so:eW9:Y2;:pmm!2#$,0j"noQp6*8X)IBYEa>?))F5F7UP'$bh(,6oek9iJQcDf
%dg,c=1"b*`%VJnj[lUcM\,Bd'Whc6RBUE_+SfFTAYN;;'`2?1ui,Woc5(<4.nQqB[&^U.G7E#@;JR=X)7Qp7!?763ZU?5PX6@I1.
%g3J)O?u.R-\?dG0_oCGSU:XeD.Xe&9%a(pPjt#mCd!WQJL6c#M?nk_`[p4.E*;=3n?&jEib&9.W:nt#JlQ-Da;$U+[B"2dSQ69tC
%Mf`p*G0jV35R<I"MOt]A+U.3W?h*cB2SWGOhfqB<1WlB#f+aO1Cc8?8H>c7G@MIiu!o8UJ?9-V!6&V,2lkmJdFtTN7DpXql1n/9=
%\WVum>NPYY+^`%4[`s;+c#smB:U[C3Lb6g%B"LsC\FaGcF4firkGErg9OP7)I'%PXM.9P@Ss_#2SDZhsY_RM-g3+M]TI2$BV9T*a
%JUc[HVMb=ooBW5VTc7%!=1KrmHE/Ne(L;n>^V;e+%f2:FSpN''iWe,;gO<Va!WTGJ<(C`td<h>%lV=]t@`4Au:2J_1j0MjsBmDde
%[6Qq,B\I?X=KOme)>I=O3j3RJ0lXi1-&-1,o-_>%)a5@Z)n'n%@C+_54$SNhdXVDjY+.iIMR2X]gSUNmD49Ncm+gGrB'i_rb>8IT
%BT<*ME?#H,;"c<556a)Vn<emt/R1?8];Wr8rC%)!G8Mmod:9O[a=^s8SUD9L/7s5L=rEfhOSRFS8XoKmQQ,D=]r&.&CU7@9FVd,4
%[B&LK44RrthXJT-76@-LedH6`B0\K*k]5Ka-#HWR'Z?-L>YBYOR]QfESX_Xs.D=J`_,8T7grgjfh!u0K27DAV51@T9W)f@*DeVi=
%Zn4+qng&EQ:O0DR61I11.U%lkn=L[Y>q0Qrdq"r9mP[cCD4nH(>I;Wm'A7au@IW89aTn7DQ.X:K=L!hoXL:>OZ'Y`_ftCD!i^,bA
%h7M0l_[Q)Kf&Y0II)J%goaD0V7LoG"VG!c>WP(7G<`W;K^+^b6Y=qj"M><oT$C3b,[I0Bh8r$4]E+""H?>laVd+8AW]J^]7#$lU-
%maiRde66HkE#'i8J;S.4FsW-V#<6j*(YD3[-/XgHs(Jk@@li[5MR=:*_&!raiqKfE(g/"<8kt[7Mfl9$hNAXVnF(mnG$\DGfAAc,
%KGJlNoUP;/$[$6-?upV#no%3XCPCs^<m\#N7)`.F3.T3:Wp_Cf_=h=t/<fW]7Za)j@D7D,6+>FQk>tj74Z.M]qM#F[LSF?:j$AB*
%gJ+S;h,=N]KJg,]"dNkE8I,C``I"YPEnc(L!NT)2qW=hQ@HfE%Y+WZ0=qkE`jk_7NBl6WR0$M(egWXtZFOQM$J4?>g>4&e2_cIl<
%Eh/g=CR1u<UX_ZTrOZ8-GpcSPV2!53^Hq=a)qF[<7pkj9Kf;3:)".T8#T#np;BnG1?%+*F(UJ\\RL^/"I,MY\<PRD-V5dgK.+LTO
%BD71^4@cZXgM64r.h,:G<QV@L<34pD3OI="MSAg!odInI9^Z<7D/ATko^"0&-s?]NCW2'^A[mNd.+rFMqIppIU>n31UdX=bIo#:'
%SC.'5N"`SKl%E/28?oXr`iC1nBHaf-[;Ze`IZQ4J)\%]6ke<T2`TZ%:[qL9]QIbCkqCEZ!WkP.N/D@%&@e[3A=%C=*M:g^Cs%=Lq
%XYt)P\f%3?&2M)%JDK0ba<Y'(If99<l!gf+ZhqT9Na-F$C8CRI'TdmeYD$Z]=s\MSG\Yf.=/T9C9/[PW9MXom!lbt)O*uS3@$iUT
%.X2BfNUZDeWe;0a0k>dQ<DB448g)](+nbuRqaKAqn_#>qn&t(r,e&BCIJUNXRbt+9%N4)Gd2pp=Xk&Q6mC2A]$V0H_r-.f6[BJ/]
%=%t&NB>%V9X((Et$3RM[W'>'u?*<*[8$(LE0\VR@d>*1/,_*`Mo^K<q\$;:a"6uV@TY;qO?OK`#eS@=4TTA5"gU0Y7V[Y_PEB5m<
%WB0e[_#Y\@4?c+J$[%L(%ZbD'43+5]I2^[kFj\/=_r^]7UmT$46$#i\*\\[rrKY20plDY/BDnp9Z]ijr<BS*RjQ)3tS5$.m^1=$5
%nmFYlqU&=5Di1uFZCkA3:9<?oK10qU]Xq$gbAVfH:Rj&(Mf7%gMY0q?/tX%(nV"Ke*1tR$S>'cXad(2KGiJ3N+&@=7d'MoEF?KB*
%E#)4i>SlGldX`TRQ>^A,rHc,<370cZk5`2$nP`XTH<sH-Eb`n0283spk+>;km$0&#m&/;*;mh.UBt%00?e//X_qh`6HtOb7]l]Ml
%2/fnGc1_+<<4jg=S<oPnQXAjbok["<**"YT.lRur[!R1(OLCeSN:ItG5*Ai#+.&R;JuT.I1@=dMr+G'ci9+KrgNYkbQu:F9[e0"(
%)L@7`ZaEJ..P3b&'q>$^Zh\b9h;'``14<*.C;ma*fO-8fBXCi"R[lhB)]Ob7::mVCCJs<k1[?TDLS0'&^=1NqIdSSoZ5'"?)j8Kg
%Ea-]4c1;<s^fI#VDTc>P>dkdf`<.QaS^ClN)i).t][b#eKfSc_\UiZ4Lo^4-_C.H[V:Df-ob7#)m8`Inqr,/6iDFCL`AfHq/$?:'
%E`Y5MYuc"U[J\PNVgGO=j3sQea_&_uf(RF2H?/^jo(:eA'ieaF/=!$]-')5hM94Q4>Md%omH._)SSt%.[WT74_?Z0$8%!tJ\)p:e
%'?tsO>%`$Q[0*TR^1cE=._E4A"K<-FL@=3n.s4JQcCf)jc(:V7Qs=(-*m`%i!2Z6!\*Bbi1r!?T@BC&bH9PTJSD"^1=r3e&MopCd
%[FWCoo0^i-Z^J;/)7rp)Dn)L#-eb,FAB2C7j6WOarNVu8X0jaiE[,q\Wdg[V&i1KW/beCB2`FV`0-.XT3aR-Y:7cn`7rG_,V2'hh
%>q6s834)VVNIugaX^u2somH"1l^"nA;k;1i\CHJWVE9oDAJO+HcT3E!lCkY6:M\e!s"&_)DjR9um(A9mSa37t]@o*>C_l=nB63h9
%DTa*/)ACfM9'Oa(etR7?pQ0U"'ii^#ht^S\qpdkm,o&LW4^4FR4_rlSSuIlCX`sBbfi)@Me7r`3^:AUFe\f#R`2maVQSXVFcW\XY
%:7bhJC*h&lG./c'm^8A94*b2(\gX[4/\BWgg)]php$ug4]M!!.e[RI18@i!\/%X>YYd4)sGk1@^>3j)RkDicK=@;,+J)0=RP"-nW
%kG3l.IGVZg_dBOLUO5gZXn?C@^-QK[lV2;=gJ_b,\4<Y[(Xcp_CY,uFgu80UI-k?k'@j\`D:aZG+WBY/.Jq&Pqk>DWP:(@^?_/LM
%.PiT]gT[gWddu823j(?jZgp6WqOX!sT?^:kW8co^c]ZnM?=pTg=-JZQ`mNe<TXA[ma?*3IVV7T!PrPp(D:aZG@2`lnhJ@)'l_l\O
%\34`V>$'h!H&#^"[C!ha;QDjh:tUE.::Ap=(E>,c/!c^MD6I$1-B*0/:2R*4>1d5j/tA^X4ZqT&5+g<sY$-90S0j$*I51]Q>]:C]
%TAH*Z?^G(p5EK;5p#Gi^c^VK<ij;2V1_/!V!jf/3^T(GW;^3YSR;^sXbW2:R5/seNl024kHb?\(n+lXH13`T]rUcl_39,8+Fdb%i
%Y"[`eH@C9,fiV7eT=u;Y/UBTLeJsR`^2/-1aDF^k03r\`e$kb6]]8;oakG`-p/E)?E'A^'4_n/jk#1-CQo+2+Q`!n`0:B?Ee,/.A
%ZK!Ct[-+F/m%igrIs$fVgR_2*09qM1c_m_1YKtY>UK7Kg&grUKkL3^*>IjHTqV$0Sg\9s>l1jnrrLDKkV`33<?E0SmGEp]ufr*<M
%j2tnA_;jkX[^<S-B=<+pG1#h:H%+1EAPW]u--&q`c2$t^gq$R<O1EA4do:L;\pCu3`';dMVef;1:7`^=o5b)7136O$D<U/^3n_9Q
%c!0F(pY!2.h+>780#Zpso/C>qr9G@&8E8#gnPo%cJ:CfI[?mL2?R)R,GsIW(X0?u_@4K[u\2(C<4O4cJH&>r_<[Q<6ZHo>9+gcOT
%Al[t9f9eicc0HIW)5>la[j>h=5EVos^Eeo4)rJU2Tm<<Bq-&tTb57#cXiA;t7B:kBC]V7ZmH3!+<jX.NP!*TG8oKJtT!b;-n1+;"
%hH]HF_UkfY9ldZ(%QD\C=tA(N'6^LKM3$r$<NA^l%6AdrHh,?pmT(@XR^hmh(%q(%i`Rdd!8^o3'g%kB[hb#G[GF#j[ro@5d@`&k
%.jeI.cW]kiikrI\V0L_#<ar(qp1HLW9C*A=>-X31%`YoF2sVj+Z&ui6[DHeB.n%e'j3LdOYadH<rO@-$j="Y%;a=4YK;"@*NXaM-
%qt25t0!]-ZoB[:]TMs/)[Sls91HdOB[Us8fqjX#-`'VWGZ-o)CS26K3ekik`='CHWQ6gR;aB6Q&:];OkZ'+"U.j?9?hS`Ep[Z4h>
%#/.mrjqR]T3bYf;LiI:_@)!1dgiA;g!?OV&!&lYTe`)hdj4(@(@'6[XX*bL\Zc+H,kM9/0V([kVT@;G%rL#H'M!bP9Ep!5fGT'p*
%#.frcI;)cTRNasM19^H^K%iA8k'&rFM;$<@1C1f%.:m*kg9KHq%W<QUGidmsA'`Qm4hZl*Y]m!LpClO&E&M_`*hnAL8)P5UNKYQV
%1W=JR-`e*/H+":=`#&D_a>tok0K.a;lITCU.)%Q<RQS(LWtZg2%-AAhmB/B"Rt:+;FoNIEKCH/^VY?4lF?@\TZF'\t04j0%^H5hQ
%5qS=?BH^=aHDAMT354[N,I2U0e)pPSHt,8sTGsf.,'*.da%`Ui4^KMDRA)oJpJF/Wlh%iXO#uuYd.ASi8(Yc:32`Z3,5j>n?+i?b
%#jU`X]kO?):H`$]QjhHHl>_-=6(eJSS#De!-AI&oOS.-L]N`&2?G]To%V>7%Qpr`R?$+[S2lW*JSt+IDd5RX;6^P3TjOlJ[O(NFc
%7$%Rci]V>NB%]lmBh^R$E!">XRK;N5kNjESXe,o%*l%^E*R+mNFWm[PO1V31:gpq7+ZtjTSDDul+'&":%B8anmKEl2+kDFGS^o=Y
%keqd!mbL]T\m)<j[^,SSnS72)n_&";1-O3Vc`e[ALS_<<^Z^g2GUT:-BRf/*Sjn=H.HteqU[lLG\a0*p<3Cl?dZIbD:UV:`X^e17
%D,aNDT[rO:V@\.FhU>YdI9rtd]'HVI*hBUgnTuY4(8.kmD<k?B(MXBMPE%@#3s'#-q!A@&(cJ8.NhPL;fWDosNk^<<"C%\,['RcN
%n:_VpLFDI&G7\IIrgTEA4"\8+la,'3g*>o?W87==Zka1]kA7bCGM?DCeOSc-erSq*h9U!/e4Z]V>^s[Z=PmZ/]2-c@lM0S?kJm2h
%AD$:VM)9B0m*\2#o%nh&*Rs[A2oId;A-]5YXHhLd,=.YRChU<tNSD;7+j?F;o:)tr5jpW<cj.'<+^P@VSHHM2l*MQ:i7PUg4kA$T
%D=$l.F2JCAXh!g@l05/6*^@&$.M&):2!5*6^[5FeDu)OoS2Du2LpQu?M&=82_5S#^Q9\UTI4`nf$+F^DI]&#f^HcI4nBd^51%@r5
%Sbf@<SUOOhCC;`/!,CT=J0!Orlb1k:c[+UOYEu*cCBkq3?A35>Fa&0BA$IP&5'46MHTjR#mau1Dd.pL.emIi$]uS;.WkZ1n]-efT
%]Q'M/l=BlM""3uKF0`Dqj*H,N0$Y.6hXP$F%_E3@/qj:QUX4@JY?bhsHT2GdZ50)jjLptT)b2HKKp./)?*g.JA6%LbJLe.7?+++U
%cPM2Kn?!,J,R3JgSqV=f-dgNu5%D<HlPR[J(>(Q3hEcop0Xq"o<[[;X,=DcV8ccFITUELe6d0B1mRCRij*qIqZhGGO[bJG$d<uBM
%;uWu\=;RrJj1[@MWu'HW?s&(a(\^Iu_52.E`[1O%LH@),'(>KEM#G2]!kPf&>RLdO;B2ijhVLP*<Npd(V%9L3G["RZBCU'3Rp\#g
%oaY7&496JJbf/aN1P?IZ[0qEF6q$L@0]WATOUC>b=BP&F<S6g,1ZqWt^rtX.)6%49?<Zu1?;n'M%?2`2fHUk2?K'Pp_=M"<6NE`L
%JNHTVE?Nqq+Kqd.-H.m9>QbL_c9\6;J1t;BIqtaY1iUV$D/t:jkJ2'GWEEnk('pD\s*+VB"iC)W$A9]ei:>@'pVbLEFIsq7T"Xs#
%3_+KP`7T$ak.]QOo9ngiDOo*![uD<K]I9Ge=o7p]9t&%62=mt(L=U74o,^IBR<H2]BXbed..#=K9=oIa!Ao$Gcu)A]d;C+h(+^k9
%]2<W':s]JCEJYg1';a3uXE>)=ELfC7d+n?J*7FTq89`gBn]4D,,MEb&Gh)=s/k<GS0tQk:H742P=`!N(\-4_LO8RO=fTQUml7sE<
%0+c"_0A(pb2c39%K[;]F_sFo#Z,)(Ui(OTS*jCl8X.Ma_++f)I'b2[1";i?(A*;\2l^41hcbj4!Heg,&d-p)WVtmHUW.dh+qM7>)
%%l&^PRC)_b=<9^"j;`j1'OG.+cMG:r>9$q2(1r!-l>$J3SWNcrhL?&LrB!KoXCc-3%dSVKAW6u\a85O6eqfumXa_n@F)e!GG^Z]T
%pYUGkd=$"VCiQ$3j&>EG1]FIoU7mnSKsX]JQBt>5n8/+<-7\m$$f@Epp&RCEY!"/C]orpjc`d4)JplDbf:h>P(aVp</_";AhLM?J
%9RE5GDDX=shd$8*l")1]/4)=Pa_QT`L&3-:/lRJr4P=s=<iSL?qka2D`[MkYPoh*6l<4I.*.0L0'*QaQXu&+6aLlUa8F=CE66?.0
%SGchmlK$s]r^`P.W7/'2r6SaT$ZJA'_X%B'..<`!9b/&`',I:uM1YumFnS7^[26=frLi,\nR.!b,4_#EH[NPIne=l*5&SC'f@<A2
%`4+E$31k[O+!LE?,+QtDQHu7@"qTngO6'lkmI9(^ripi\0Q_=(E'F;(^+i.AikXN#ripjLRaHf[q8`&c3C4Me%d3GEjhp\%,iO.M
%Z$]LYN$+Xo[i?L5a#5!VL\(<TY^=\Z#7Td:&>1%:\@^(aLm]e?s338Tpq.i6aJOYuf##(cq`FV;Z]N.>EsDg,[Rs;DCL7Q#r]mdQ
%[#G1"b%h*,=!SO]$sFRRWuMTuQ`dXkC!=_fiZ@);#B9"G@p=DM%2"^l>cPQ=Q_Qj3-d.G*hopcV_r?(D/[X=ENj(V/kjn+chfm4&
%%oro&p`N(.^qB2uh[:13B7e\Y.XU)se&gYl^e]3=l>fk):_XR=IL1!QLN3r]E&V\Fa=hOHJXcIl^7=c^h;$1,E@4uqL#)FH06,`9
%iNTq&4^0mB0&sDckbE(/q'F<lM?R[SNQS,JTNL]TVraQt4NkEn4tk'&&DY/OMK3EiM_+:7F5/RI0<-s,e)EWHNI*7<+1T<UqE*Cn
%*Q4nkI$b*]*,WL=80IDiCH4L,kj'$0$cbQAQik_6`hSrU.pN"+AliW&G>-skd)+I39]:nZr65B6EI#UGNB=O5pe]#fGP[]rHD`XT
%,L%V]6,OPT]^LWA:t^G,:D]3UoGG"W0fcC;B-5QR[NJ6X[n-Be$OY8fHnkMC'h\oWoCpX+8&W]7SJE'Pg/k0UAS^d`0oIerL$rh_
%honG/e[Bu&:09:gY;_cV3-a/(7&C.,mEpS)!AZjZ"('tiH'Ii[B?s/p\E_fngCM#:48+;E>RkO6kU@`I;7I"lPg0)K:b!9.\GH`g
%j!.TV8,>da]2A1L!]\gb8.,QCWTPVSD=?`F,=1;"SnC(oAV6Ec39,SA^aFeCTjsRY@s4YLZ.mS7ffRd+Xm<Y#*=r8ekR2EaAU0g*
%.M&)Qk8N6ES[Lm4^:0ZafA-D6j#6Y&G$;DYlGj_%0Z!i4)Fq#C7Y:f`^6.o$qKOUe:.j/_@STJ/:q46P2u^XBg5*<i3#:-7[@m7@
%h<VcMg@b3s\00&6Ha>empVp5lo%rG@]Jo-:!oE*qn8a3OhX$8US:kFsNZ`euo\R*MY_S9p$gG>Je'frkDJ8JJNe>d^h0.cR-7Cog
%m&uKO69&?acFn[_.UuNM/1WQ#ot2e@6[CC61cE^B*b,L4eCBK<KR^lA&^f>(FT6<r(ZBNpB[I,$bR3/j*fDjigqrF)NO(3FV?I/)
%lKZ?Q[kGmT;F4@V%e9-;6\K=i+m;7VA&&Yj?p\6D71o:=0Yshu)n"kp3=Ur=F)h;BSHlI-2<a(^7i/liT6Ffe^V:)k,Teiuch0+%
%LXV5@12g9jKoF4`&`YU'a?4Jcfc-G?!#a?H1=*cW$l1Z:2g;>NFE,)EFglS#pQtlZF(CDYO>"t)S4M;R]Wj.N;hg@WF,Z(rS2]`S
%4@_8@E8H]>69(WU"G-St^$G!+M,rZuk/>\;6G92;k-><fgB0pLWLb+?&&%mWfKq7S@^&[S+t,=M8R:O+89i.Y#7DGE5ab'%E8+[m
%Q!]g#'&n]?FJ/;&Z(Cc_letpkI&@&?2^.AEV>i`+bY"HA(f3*6Bs5D\M5?2h$@UC/-fa-^3pq'+"K$KR,cQf\Pkbo-EJ^?=Bk/Z^
%5XAgLs$>=`$NBj]_]&N?.+p>_4d8Z#LNXlllghn9E4t"Dm_g@J&Jk'Wp=G(+3c2+>aW@1J`lCOa,[2=>nTHIBKas9Z)GuU_rV%^l
%A?hA]"NfZ5[?1U6@R7m:a^Q\^6*agRY(OX5Y1upk3qu@$i#bKuZKC2[bC$r4i<BZ[m2\59cag,?[JrcoT'P$f4t+ac"bJZ-6NuTE
%G1n#EapYKK*(<\qV)j$3CZqER5dDMPH2S!0Ks2EY0bKG[nhqE`bC3g^iES>P<r*?soA2Dd:42E5nMp0WdR*%5oAq!]??If9GaBcC
%[%$T)Vbt8X'-rkr9SU%`oA%f)\TmB6SH8Dm<nu&moY"lIT?q[]HQ(pkoMQaS'K-H^#18^2O0/7iq5H>Nq:R=\-eBD4k:=TBCROTa
%Tle#;]cgIm(N27eC[9`pq/0UcrE:UcAG5N#$YM&4ELNp%G]&q-$3l4["McV.n%:<[bFL1(o6>B^q^!%cNt-EL2-6jX0fQKSDgDT&
%?2Ip$=33E-Q]A;^o*t.r5C=,ifrN\:s'WUDq)h`Zo7FH*AB1_#)0UdRkI*!jFMsl4j+r)tYWFl4=_i%ln]NH8c^:*p2Lb)-KDf]U
%quYfjr.=m9kNAGEU2$S"Wui([@)&^K@,oA:GHI?iG?]6m@m0Q#:,^V@-a-]LH2rZ]/ZYNA`o+Sh"p+ImMkNORp\Q,VNKMu#'?@I.
%o>']3/lnu4K1eFOk5st9%;q0'p4g6C+PGs%k9!JY6h!@\6J^l@.UP@%@.CqZlT<%#Km>&4bk8]/Y/.9mF#/dNS[A!r#/"9GB8&I>
%M*$,D"*^"p'/MbsVAS=$'ju@ahh=#5c$Bjs2F&k;At\bF@YfqC8.2u5nU%BggD'eIM:hsLIS$"mn)WVM*cTtP<<Fj`Eq!hgGr*=Q
%5.=VSNS>$Kp:4>cQDm'Z^cj^WfGM0eIADFBTQ)N_O#pPb<FDF<X2I'nFOsNF"STApp#/XbEF@\>mdC&UqqUmc%R?(!Yg6S>po$A\
%$]HX@cg@7CWGG$8f]T]T-Hk+V"8b2VECUu#k8)T<GAAE4luOt.W6](OJUMD\m-,<'4L!.'cc/h1@fc<n%1q1T4S!'dThu'g\W,R8
%1NE$UJUR5/p.uGn);++!C<VY2**lrZLr84L"STApoo5]p!fb153\>/U?ariM3j?p^WfLN<7MOM<(=h$slPr*mcV4Cu=;a\<T3G9e
%>K"[GJUMEZ[J(G\i4qN\J:3GmGM:+>qqOZ_KAA[a@%UY&?guq$ZU[@&s*,UG%i*a[BMqV1s1SR3i&_,0&]`[ZADnTWjm;]m:1$#Z
%I'um66.^@9NX5N*Z6'.&+OhulDQrKJj9U$h?`:R\!cRT:gK!&TGC:+Y&Id5j`GV?ViCj=6F1kl*S\>!:':GF80(95fDsD=D02M'J
%h,PWdWHPq<]<^,[V.]Gr:=s%p;V?;4R9&G*Nap8.:?GbU@Zuj)i8Z`]qsluG:35:l2`Ltn?2hlgg;'f1i62-eGr^&'^AO%6>2]@/
%+_1A];tl%06P">8+33U9\c4=1W0G?aIh$*`3-IspQiH$p1\gr6rd=l%rsPCPY-g39Piq=c4QT[`#,XEKKaho<q^^;CDs\!.ru].H
%a=ihm_oMEFdMkQZ]1G]R&91ESG$+!.BG.^[YbO93KO6m[`B0OL`kFuY/qcmQ6(rmL6A@=65>TKgap<n5SFuWsLH@3D3r\Eth[C@#
%(2tEg5?'-Y/JRq>*7YBf$UZ-4kHkmS31<+VJZdo6Ucq`(d"/o!$GQeVX3QfY]GXoOh'"eQHT:71Os>t[4mV3<T[1VIQei9Fo8Ii1
%KCPOA!aa7NL/Dd"Dom;#$/_H>+a]F1CjMKaFM18ip$V`t>i:^c$`jo@d0.HKdlR4QgE8NfPd^$&OO;D9Np,/9L]ch5Rgl'25;mI'
%AmZ\qhXjYrB]sMHE])\ZdMPeHJJLEOFJ'a9++l3ko%nVQM%ULkd8($:d[lDF24#PVO"U2+N=?Tjg%W10'[T$Fs,AA$M9ln5Y5Seh
%*s:s0$YcUOHgdT?p[kulYMX'TId\A6[!i/N]An&he`#&.mLIQln,7m]VCuZ/BOAN$s8;(C+esIh6;XSskd:6UToC-(Bh6sVU4)LF
%*ID_F\S'Q.?[9<!qrQYIK/h`X?j&de84n12N%Q;&bU*^!'.@Phr>"uj*B6E.4_(IC6@\JVK"aq"rhJouAlCkaEFIEU@bSX=$oK-1
%q[]LfESJ=NZq!nJZbJaTg`"[?DkCfPe/^*_eail(/Sko@/1o*<o^R(@:2>LgD[s&HUfM+MYuDc:m&B@o8B#L0_F9=l'M-4/1l'KB
%P5:;oOUYbSRao3X]+Ip9Lp9WU31^@*IE(+"pn.>?d9D(;`nfJ[QrV>[X,a$9kVCAK%Uk$D3/n8fJRHLt!6FkSpr;.`:cj'aDM'_m
%iR]!aAXL\IKL]K99.G$nVO07bNkO1R4thB-KoO=E<H4bEHWFBGSt.MnT9BKUD<mS/).)3e.a#uXG`aUHfH\U%SF'ksKEN@!T(9:@
%aLog:jioOKfn*;S/JRVjg`l@0BP`oW87;>XGsV/*<@UR]?;ZNu`+8QunGp#-0Q-760+bCbHIo_cEI6YF/#n>19t0_WIeUFB0&[Hg
%GH?-]k&k:Adqt]4XZD%d'=4``FcRBMK^UdGA_/=ughF-ZpQk0>FbU#oBnsZ?YK4@(T3A]N%6/9rp]$dXgj7J=gBO@Cc<=$"C8H"n
%!opsecVBca2_RdBBIE?!Pk>t'$2p8rcFB,YUS3U=W*59LLm4Lo(=kj;9.i'5RnQ2=TuY>8RZdtbSbKWFV?NUjQ*p2Y?/bhn=k'X$
%!Zi^(qdO2uq-WHrllTTbj%T!#5@W186/;$[Vh-jIDTp8W)_/S%1E_1\f<XZ2"8>+:EcdS[e;#/O#'ABu&?ds=G[+A1Q7!0^m-qLb
%12(?#\T,Ch@h"P#^j\7Ne2umi>4+5Ornj^<1hqhK8KSFETC\rE'0+0AVh^&^PKX0ClH1)G?(7VZ:"-B#$$#AME,hG`0?bX8LH,aT
%R1GtCGj^]"Pg'KhdZ9lXj?!J>e+ujdkO).#*6%aJj/24+*qROE'J:XcCj+Vh.t,$Vh[HonE<<]gEpF^"MW/YS95aGB8YYP!.!O,$
%dXXMl[ke(*qr_I=p#RkUQX%fAqTY?0h(RK+%jU$hf6032LP`@Lp-)jmQ,s*G,mN%DhBVA4^f7a/"B:)5VTNt+f%bWKSuHtTg%hIk
%%:cDjfCBCaY_UPS$r*'<lIF5&&]L'Ih"p%j_WrF!1&(f(:)*:bq+:1m#!1OtNKG>d/C!3%kQ..:3;4DudfQ;$qWbG<'@8p)/auO!
%5+9$ch0X?L:DC.uNjo%H#2+;YBLnkajmGQl*AA`N]S''CU1L>8(6TLm*mrLK*Bkar!s_!ZLi-7++!HJ,gLJ^kgdAL70-i8g4CTrE
%VQZ*"Y[-O!4o5XZF@D$Z4CZ*$3[c8YT:PU>+c1",FaDg(H<DCZg)mr.ckk%0_..mu<]K6*0Ood&'p@.,kb:tIb6l'?d@\%PY]hJn
%7kQ;#la@c'Z9mD*oER$"[$J*aHWad<!>W&D$m3*M]M=9a<WcTO(d>"N:_t0V@=PGh*BKQ:K3rlemscAL%`e#+_F(NHc&R;V[2Y:%
%&X:fqr.Tq*!J"Z)aD+-r4<-r*kHJA3h"2TS_F')9n$qb(beDYF"Fab)gCD:#$n*'V'C"M-)XP=.O2eHZ%W.D>TLcpr8_=,mSUFdg
%k^V@G=I:Tf_H_?L&("]>Crctp_o-n^i5.jfKA7\pH2p+lKnoZ:*I?CQI:%6OIsBb)K(8Zk%Kju^_I%OI/CHjkGSok?_P&4FrGOd)
%+V7Pu?u$n?8Ioh"TgO])PC"?som>Yk5EB^+rN:tU00JlfN\QS=4JQD^O;Au7ZP8e4_:"(Mn<!+`hV/N'a+c\@$$G2M?VU!+LOME+
%?])>a_Sa4-j$jf&8lj9#Kj=E.G1`,sn@S1oc[-!(^$lS*E<^=Q6=@S:%gP,k*oOn&0.@dRPJ[;P4S6DUE/^Xq)ud^l_#;Mk/j/JF
%4Dn^$Z0/R50KLf8Knk;Ml?ur_k^V>1GO@JUTR^_jC5X%n_Sbm;'Fo9ETd@Z8?"%YZb^^KNqX5SR]]t,UGj)p0G,*!B#J'?N[FNiF
%LH\qtr[p>*2h&dG$6:/RJ)Oi"FAp(_G\@=P\qL>M>cNE`Gj$g"NFt&oKno(o9_\36N%T).@BUcC-gL2-oq=!#oFKJr*(:9biM""*
%bYg@:??kZ>@rlJ+*6['o(EWGAmeO+*lG>pgh*!tcLV!!%d:m"qQi168(h2qoM@0q^Kp<-tiM$9gLSUA9>^3d<HeT\i^l73g6[,A7
%T$\+FNT.fBrt?L*Bu=;&BYBe65B@sj`pLW1s-!b<)q@$C_[#G3gCD-k3l>7?kS'abgie*XG0.7q't8X-`R2XA\2VRN,Q,rQ*Kkg4
%I231brm8jI)Fk*17D$N^H*&X,q!1\S.EC_BFY%=Sl)*8q;Waom=M9"d2QZeHG$F3Y`6g?H)c,<2:.gr?cR^Z"UUoHK#:hlMBsnW"
%]\^%Q[Jd@7>,aaIZ"7u22`q&)R+_8kOLF$Wf-e:^2N7EZ\Y>hUT%><1Ma*][#=m[LqY00t>uja:YIT;6Fa>^sNpHRHg@N>KkJ_2t
%m(g.-33OCghj:\"\&k]DKNA".IX\m&\PQYM_<&r,l>5MX.Jl9Y?>CC5nZ0RXR7VOEbF!UfgY#0rHq`=0c26c-).+"k\oMe>Fr=('
%+4oMpqtFZB8Y'"J8fN*r;X*Rk=5#F,:YY:"r+s!/]@uLC4;olORZ@AfGAP5ESgTj\o2fXK5<j#ii;Lg*482Hs"(-Mo?(HLjf>ZMC
%Vu6DW8IJ</G!RHdgJnXVL;g.&osOa(\,IR7Jf<F8DR\0<\8PS9B$3!\j,(t6o9IEe4&_SK[!-o13`3*!.lb1af*k`?s.iiP+XY,J
%1e<:1I(aWN4s`p(/*O>"-FDo>NbO.bG?j'XpR!%kY+FDPTLd&4FiK:n<VS$"QE&QtIaQ$Mf'0S^=K%1^A\(OHCRIq/Z':mU4Pm_S
%;]el_2-.0NQe1utgID*p.\"V";_GamFB2.cAoVYKc/[O;I_8D/[Jn_3n#Yt`>s0Jm0<_kTDlCLmoe[.):/PBRMLO#$>:V/OS]0ZE
%VlmFkcKOL1WhD5[4A1(IW*?P:oOi?-KHh_tZdV6j/uQd_BN_r_UH]-#o4t0rBi@%5+h??*ZC%*W.Euc!m)Z/oO!jLiZo*1:r`Qs>
%2VYI&j<*_9?`aS)r.E%+eU!>9+1)CDHo3\RChr&M7lD@4nXj+2^6jK^;uD8lX^XFaPH,eemE%3lY7Qogp3]HN%qJS_Eq<5d?9Q9"
%SFFC&hNPI!:K"R@lXY0iBelJ#0uu96fD/tq(WkUVWA"'iFU.ZrM9N\RE^>AaM`6tLE1\Lte2(7,-C)N^LA(o8>i-rde[7hNbp#>8
%5M`99hriRO?f1R8HTUaR)j]'+6G[j4__&#O'fM;pG%kYUO`'`oWLc*&?a`@?khY:@lINjimX>'#B<nsk></!g]4;l#b/;Qc>+o!B
%aAV0_;)LX_Y&R/hY%B8u>g8aJUD-K2GZDE!QkSBb$%I69f@=0KbS\p7aPtRb^T#e&)ATKepgp*_Ds-AW:Tn=$D_lR4Q[UHQJo3Tm
%@1$nsI%so2Io-'5gjK(uc:aSO?b4pZ>B]nBPaKZd9)WR@1R1b/q(5lI3l2W'BA)N#D3FjM3=D7%Daf.HgU4'1M'LfZ&*V'YeL^\o
%[XM.G3E-G<HLS)rO#<7_3[m4!h@tjh>bY3O4LiV?<OVe$9@]@4"/@]T:+e+]Q_"h6[r*_-jh.LL3\pjrOMR:=A;5r?H!,dA--`LD
%R>'n&U2=4RHs\)J3EJo:F`#6"U9.Gfi*a%h;a*B3&!eqiXH]>>XV;h"-am*j-boAGfbN/4m=$egL#/1lnacHmJkS,0aQ5A#G8bZ]
%m]ZKtI[VD[7Fbe)hP3lPD5''_kVW[/#-.8g,Jrt_kaRRG^,AdHi%YHXfkIEYVOX^-fd1B(^KiDG3>,q+*oXTK[<j8(n,ob11G3u3
%8QDiPWudWh?Ra4Z=.E833\P`-ZV_f_Pb==2ONCgH(S3kC.ql-?g0dj!CE\66k^XLhW.T+Gm67=JF(g6aO/QM6l3uoVSZ,Q[-[%g#
%NLD<a/i=q#kX`RoOAI;@hq(T](CL-MG@/c1k$I!?IV;=6X?C8U]kCVs(=IG[YA;&iLU[)(nhn+8Ir*&%9'MH:R92LTLo2jIGN/4^
%RF?EOA:,:[4c@XiX"3s8-([0-hMru;m8Q1_J"FIlj!DHKT;K?BlLAm-YKuQ!lco=T[q/eW[C<SIIbt!-COBcdf.L]2Dq<5NJ'AaQ
%mYkGI"_Ym-Q<$XmbCoXK*F6UTaF$Z=;fI'r]%03M1u1V9?@T.9\(`j<VptFYqU,2grq^n;Rk2:EFA>OlXV62O.8#l)7^:cU^7?B)
%L/NC^=rj^0PN(>=CLTR]'OO\c?_?i#$#[*&i'nZB4O]f>7>rO?g,q`$0sH$>#7Wd!kH4=pU;*L!Z*A:j]_5/OlM>S:<T!!<WueTc
%a6%/MWq5mtDJeqCj/JD0I;TkXQ5_Jp*Uh\Il?YNuZrsF/4f#2b4O%_([]W;HDXAa,l==$]8l&%5&lpr3C<i2KfKWYGfW<X^5%eM(
%2Re`_o%NhaB"b_G<U5m,Fa8V2Xl2jN'l.JO472%l3Kr%&f=qM0DRU*GeV*D_eV+[JnQG[UNq_(GdgmJ-omTX0JK$aY%H%!_R_HAC
%12Us^dJ>D*b2;g92[ZTak@Q',ii2Ct51Z_1GdG)=*mD*u-H3O-j/Ks8d_'W?WVCjYr\:"CeWHkKSD</.9=XmLI]Z3"%1%^kCX-Eo
%@$#*[-NpR9a_JSlY$LHIn!'ETkOHf0j6.`[Zl`Q+N)%]=G$<Pd%c:Y&[pq7t3G`h9Dp-p_VhYN)pIKY>g9dQA@_8-]p,26Sc8ekK
%crrVdMC5F1hj(nTAXte(s1e]rY[[l@f(s=S(f"m*:j;Za?rRSOZO>PHAqi5%E&G?=\#1'%^P57IduYM8`O*_;$J\J?k!1G5Ua633
%mVWNd;_;^#rUo6U<*W/_]BcHY_G'L.e9tHV2P(H2hTf>`S*but,JF*I3(^Q1CRK?iEoZsl3@j2=oG+SZ>l8kS8St92p8'ON3k+5?
%Z'fmb1*k1IRQ,$**TT$1YT"7Hc"-58A,Z>rWkDNZ[m*aeiuctCmF-J_c"=LKPMWsSN.6rGkJgr1q,"k=K7\9Znd]>UfW$;HO_sW:
%O/g%VJ;0`dGTY5NkT$lrCjjf*<@=d@8h$Xd934[#5KIVu]:Z!LeB0<M:SWeJ1Rq#S_Pe@T+hrM9D'KsSYjFE^Wm<j>gYp)V);LZ#
%W<"mSZ8tGVb!oc<pfeGs$/+K"_LG!uX-s*9\>?'`%6J`q*S^FV\@dP9ID5$P:(-?8BDm&Q\!dH>oXW,+>c,-qFB^qOp,_mbOUM`5
%>Ro\#I*XE-*$=7h@UcF4+%mPdiKuSMIkE=tGF-[6ZF,`/U9jg+9QtVtI9XHWUZL\0%/hW?(8dS?L#PM>OT*IMj.csceJU^Pp:[AH
%k[&(GoVm9EWLAhVXM%U^CjaMbmYg>r9ZOElqCf8Vjn5K`W>jlMQGRii*t:]^VDW)9')o,q`j+AC/O/-[cdgiV#QrYm\2RR/Q;)@7
%C\\XC)"kMEiU4mp,+[<RP1r4L.4nt-DDTV=8Sa'Kio)S(DV2kPZN2!b;PstT1t#cZimH(7)fUtNl*RZ>h8^f,")2;;%62JNV@^s-
%I(X[@F4MK2Q$bAf4B8U!n1^HHSR%.$lWPa/HE->k5A/uTO'`FMj`cNA>o'[u&::)0M<D>f5*FU;7Fh22DZ47tc9giU@!%ET2j9#=
%g1WVfUH0V:?r%<Y#_q-[%_@iFbbO.JFLIACASVd\aY@uB6TAr#eDIauFthhfJ!u;+4lT0G?3o<s/;C?s"$T$)YWIh/l+%8[hbekA
%RTd&P"8^IbX`irV<P'UTPu<)/-Yr0^gbppPH/JX.AnJJJMr,ht/im+f=EMLB;U)^\P`b9PGCY[T4B(V_5-b^L+O@1W^AL_]m\'Q%
%Fa$#tL,fbPN3q<Bh1;R\<_qoHf?Z+!4bg93aD[oQ3;RJH7@d#9kL:/d@t/d@I_GCG=e@4Hf?:oqb]E=oP*.A=il_iZYI=A"G!tEk
%WR826gHRdr4i]s?B(X3l'DB<c*I[7*NB]N$*:<SuNkVIrrp]-@2Y8(4I5:G>^%o"0n%RY;EqGdMhd&s:RDF=nr%'@Y!)pqK91l]P
%,f#!X\+m.Tk3!!`_58M,qmpj4@5G86J"&!8alTkRMJ4o^:@iUj[<63Pb$J<BZ;rr7dHjp\+&@8'56n'Ek:*<fT9nSVc8qN1<Hbo2
%OO)q02db,Gp4=o4p2rl9i,<j!o!I7)3G#-NGIEGd.Y%[nTfsW943H;14j>C3YDk)a^eo5ThKjR90GkG`@m#]km'G%.,j,-k(-AbK
%Z\-,s-5SmLQQ+2O?-SW@2UI(5V'Y?Gc/+A>9R8DChhtj>i!L`N=^S7;*9-]4`t*(G4]&ImCp)gCbU2HF[l83mXQfO8q_EGC0:0_e
%/KA>`#(T<)bte.mj'(KM2mpreZoPnBSQGUn9A/5^i_fKF1sLJO;n7@E>)GP6rLd`g:;F()a^lkI2[@`*.!Eo2bI6j7Ie^H8ZMMCW
%$WkL=#L?.Af1opj=XTG8O.;+b8UF&D$`u;3%ngh*3'1PKhX.NrY`[SE3aqn/4oXc!Xu?b"Sm\5%h'eSq8"U1ub)abj_X#U#(Dpa8
%0*coHjo*+<:jt0E7!]+]&FblL03K4Q--0(6[Uh89beV`fX^m6S?s:?G#*6uZ)FBX+>Dr,=%D`B"*VLf3]Q)(j-hEsu@A)_t-M?'a
%-Y&I_VE*!$-b4:A31/gd),>oR!0>A*Q-CknM5U(o!arikTOrIoHHP/Q_V(D:2B>-l2he:?T++`=S?k.kGkR2:b#1Bim0fM'%C*2&
%ee=>bn6H68GY6`0ZPVqR]`p$SYTYE[c8Vhk]m8g-=s=[/I+jj)dt/!B@J_D1KsUiYnjlF+8/lC5-TndZ7%1k!%Vbme>DBM<NO/^*
%ie=ad#L\"^INl]S*M4e;T.g:<k7J&gF"Gal.'YcOS";9acNnpU_bCa:ob*9RHB>[%(C$@2K5lgV;i/a.\k&#*=nPi2)lD@=%V]PQ
%oDEM*(*BI0i^8stGj6]>,$Sk'cu0(SDPt`%m!YXAgY#lU&PLK.6%&k:ATE(elQ4*!m@cGnkVRa.j8+VNOj9GYH"L"jMn.QM!joCK
%8IQr+^;iO0gN.I,ng9Eq8<_%qYTJ>O1j`6rc&B'(\`Y3(<jZ#q<?J$Zm-K?"?t%?0+E'Fr/=@%"E&I>FAS-(7`I(]YEt>c_`Kbkn
%Ic-$P+otJeeQZf\;L"-)PWeTFDjBJPY!mb`d70bqB3<sCerbVOSj_',X34".Q+M;gi4+le78dr7Ge>hNmg*lq'"Y20hG9>5j?>!a
%kGa,7Oc4`gn=S<30%(/AUHrBd-drA;:OKK97MAd#O;H/Dc(d+OMHHrD-Jf(O7d4T]St!f@>B_j:fP<aK3R^`jBhFK.du9bYI#:"i
%a:!jrcWi"S'\4q7(S;'WftGu5q0M'.@m7)4gs'9"%>Af]p"G;j4BLo@<IU$:p/BP8Q'!CdUL!c?.1O>;H+O^]\+9;?$,FHlIR^%8
%8NrW'>BQFF<tM$jG0"T<Hsb`Q12iQ'mIMN][>Tu5/iQ-=+Q;XmoXFC%@@=gSB3DKGk66^W^_)alZZjY$6a_=B0C%gkC"maah9Hfm
%je_3qpVtEGBk^NCe`1T$\isO/QfnsG8r*/o/FfD"hIT6f.!kLX3VqLmrGIet`k?Zl>pZ,2&Yf3h(q3l,p#=_*kF=U%YI4&:CC-Vi
%53PPBSBMV=WmeATBbGMZ6a&H;WuJ_+Y)bhEarPSb"W_"o-tV8Ia+B=*&<nU_f3$B3#(fb)OF&PB!.gffs1L2]=#QC$@Q?T<Me,Y5
%lIGT*]CoQH`6dRJ*;_7m^*Cf;NCpP,Y#`lLs)s=Ff:T6]UDmEnA_,074$,I9=FG$eWj*852eO^)cSNPU<!f2I"F(o#r-Ilb^\,-#
%EOoC-^.C76:=;Krh-MGUUtAL8Y'_kL8?(*/m/qDKddcDE_ASAf.`UYJ!sO$i>uOjF.dGU[\m:bS/iBt:W`2PV)C)N"=-d4E;m!sn
%[Cps#-+CR0PqFq4[EHhgrN0&3/_uq`QIhI1fj\o"`>NG5'P[=:'PHRZ1WjcdqZrt[dNp-^#0.&=-WXGua_YcCgM8'.HgU4[r/d$6
%8Z]?V:tl<\kP-T07&A.K;!&P7UM>EUV<cHQj_;>i+u*kTQ$VYA&6MlD+f.(lPjjX"nnV]h:21[0]$TZt$)r`g-Mhd,8TS1]/>%BT
%GtS*akYu7/$nKhU%o:)eCSpUiR?AK7Ht!FH:IM3:AL4&&j-*<8/nE0!g.V#JhO!-0$#)VkTA98#W]<bWfsX+_A_9!'1MgkjVQGd`
%LO=i9Xk!R!'Q@`R@YYRj;6b!)/,2nu74l8::0GG0P-i_39?+]\PBgrP9TgW7r)oKM\hFInd#!GE>AD?bgIL=#Kr)Mn]ou0kU4c;X
%1'_Haf\_!M'o8#,(9G51:OAs5i*klkRF%]t:TX^-,Vh.oOd8,OQA:SLB-oZ4ac"-HZ#ZNYY%Jh+ZRj_Jm9,sqpu]k.Xe0Hl.>a\>
%Vj6Bg`TP"g?H0GBPnd]1'Q82o*ld/Ebig\10,4-7ceTfl7W0Wr:[C%%*@p8&S`RGm?,Ik)e&:j[4Os1?$5DUdkEJTYeN>4^5HH[X
%$D6HiZ1?(aTQ+"dh4!N-GTfIq&[piUq*h0_+3sd.lI=.?[9c",k_u-7/i7/F/DfXX[pn$ri#Yk(e(!X*YBB"I*>QjA9#^Z%lh]lA
%rQOEIr#.9rQcLIMb[fqG$u/'oKaDg49fl8Y=c%S'80,),E7CC(8ou:TD]^4kC2@g)9'LEKe3R,U,'H(16W[mK<_SlZr4'ieErDC_
%pLfO-Hn^f1eAdQIWU2.ZVE:ZsP,:u]3]:0*W(q*t=K3#dmCu]cY1#.ed$H@2\k0eRcL=OdBjrc*I<8-VCbA<BBkt.'(C6O/ICmp5
%q6j9Te[%Z7+;NX?09(-pe@qXAHt=ZMkq@Ca[YhJ9XJo5d@ReJ^O_esMkQ"KW?u(&5C`u]XG`\nIM&J-FFXkdV8=a@[3b?<0(!di1
%WS0DpKVP@mre!+4CNEns;Xl66-[R:d/jBa4nt<Vo[=CWan\Y.4Fi\g\F%WER&qHMdT2*op*AWe3ajj,_]LnU:hl)P;ea`0peLgAX
%[5mD0;!j4.8fXh$R)J$2`ZaC=qKUhZ;4HZ":a!IY@P\Q8Cu-hj@g*u"A%.iBUI6n5P0Yg5e)W;G2GYg-mEJqa;]#**E(<\qN^(Vq
%;-BKrA]6jQ_hVh7*bUn_7bG%@i)]!d12g&"cXXU!B6Xoq^3r`hhQ`BRLA#-FY-#F*SNr4&bt]\B<Z]L\TL[4R5N%N%5X3IeEbCf@
%L$p@<QAMK:gVGeJ`c8HSI?ln3JJ7YLAjW$PqAjB"B"<pI8'qlB-IR9Q,lD3V$^frV:^30#,Jn5"TPFC:7Ns_V9?b<<3KT2ALk_!l
%N0.rCXthcM2FJIT1Qddr_C",dp;fcNqOcqI^mmd-(l8mm:W<[)9e,6J,OC5^k1p0e:'8Sqhnplf*F_D<(a,edTp:d'"df_m?l=!@
%hXm?&e?VXpV@6tOSnFVaXh=e7.l1h)Rr#$]a/iP197c2p..KQk?b8&q-m0nc19Nn,"7@%.PRuGCkdd<''I=aI1=EB9nQ%oKOd8k!
%GmTA8N#FhG[^G4L6B]K)YNRH\#phh;RHoi>B.+qU?iD]5%i=Ir7RTh'J-DsmDa]gD-BFW/ZNNgO0@D*X-/,Z-F\!udhJKfD=t?/I
%0&1?Qd8gruU(=^@jnIS<`&4@Wlf?EG3?3%i>I"XS7cS0fo?sm`:XD2?m(CnEg*K%'Ecfu[RBP's6#Udcfm-.H*XR-_R%5$H"C;C\
%8!ok!oW!\kVE81/hQain7#if[05cbNK&.)OkG=a3StJ#&]'R'Ff;LpCE51(O8S^F$oStUe00@:iV9/HPHk*/1Q>c!GWHF^nB6N?=
%M\X'B!L_*YAo3fEAHA\0O56(>bWiooi-']G-[Z.1q%N_:Br9Pqb?FgpSYQsUCZ[TFcFu*BlY`/;qeE*a,gkN7jPo=)I@NOq(O&0!
%\pAY3B-*YM+8EYUEu:uh'-,&F.aaOCV"rGc9IZbij>>CpesRmKQabOrQ$pbp+$.o>@HG7pZW`0uU\F)On$%nJTAdtkd%<D,#^33H
%)DdTH,#'C_9kFdBeX:Pi!^7(4GuO4#kL4%<_Ol%HO/L>pB@ZEGM\OR22QH5R`d[`-($TBl7fSUt5PSkL+-Vsp9[S"TLQ4UT7n2u!
%.34TcZ$gGe4D!*uh.#cZ>AH.>mGG/Po%E]Prl%Ve[Lf41T2=dkfIV=rkm8(pNtUNPogt0T2O_lOIWSW%MJ`@IC::`/>/OpR;gYKF
%A*;*=iTr,6(I1:A#>\iZ8[3F9j8,CQ^OF3%]'t(*6[Sl-s)L:mn,DcW]n$O7Qb2'smH(6MmBDJ0\9;"G0jM9@O'96FXu9B223up0
%FR@-D8,%5.ar\lHeB>%fZ%"rPh.l9[rVGAgr\Q*]=QZ>T_rp)nW7JsMr;PU8qMuq1U5NE7b.AC)PeYF_MroN%?<$WJ;>1F5RriH%
%HI`&?s19q+G.I9fr__uteuO$jL?YMjn"^r0m-.lbn3i_&IbT5WRVc/5Tj96oX-J\%4(!4B<SMKPjC>NQf_*epT/M*kS+9ALUY/t0
%(!D*Y.^@acQ"Wp\9""9es2L#6/KOY?O^^iE7lm\D$<fmI7Q,2G<:YsC-joes0?Jr<<`ud`Q15[[C9-:-IcJ1dd;QeHBE,n\.<Z97
%H]V^%1%asWm&t[pYGLno/oRDTBHr\(FR.8$o?V\b;X*)?Gg?WG(Z)f:[_tWE2uN$;go?t#6cL&B9lu$Js)P2sRijF1!rmnBR*A3:
%>u?R5Hr`u)ZWRIHHo>c9;4$@jLUjdXc"d$5BLt'>T2TDhnsKspg?!R9Ia-"21hTi`b8M92R02$[`qh3kR807-16r"]m]-g8]K3P8
%:UA(s:1P"B^M0lW,I>fPJ`L*4i!6UEG.H#",J;mZ.XF_7mh;tOCUoK)PgWGNrRJn^_ggMj\9=(>]f"POE$h\kq@Zj4TCJQG/fd1=
%I-?+a6p2Pc8WM%GC0Jbl<=0:#/LqG8YX6?8[g-5+"0\`h>W++%#g"T[C6mofE[!q?#l7%&OCSA_A18lS8n9ck8iE6XPFm@n9.P$X
%M((2\#W>._Uig63XXG[ta@PLTClT90A\/d,:.Tm`U&[T9C.))2;%]NQ0sjhh'rFFLZmtBF/5#tPY;3DTNu;,)AL!hlA^adbcd?bq
%6>UX.!^mb-+:]-\BqbY3fb1TR:E,1SV[u_RRZ)u+<h("(NL28tBh_IWU68.gZDt3nWa_=UAI=8-9ba*G%RjhTU>eSh@PTetEtfuW
%rX]MqeKq4YqQ^`$m@YcILO$TZNtYisO>tXA_21OOLh`&CfmF2[(fX'<R%W9,Pga-"idclM6R?<s;A.ZqPh%*jW6g\W=-An!,YSVD
%@%o^38R>MhkQhf7?`TWmX-$1j,m0R<:3@`uW2(T)2FfYYVc=%k-F=m+'4.Jr0ZaY('<"V>=]Fu-D.?SQ[oJgkC?3f'8_%9"<@7E3
%,&'YCQ1EMW-(@uaBFgVC-$ba-&r"7p:)&Y#:mEH/W"uH[))4"HThQ@Z<XDC(fWQ^De>s<01'3-#9BT"o,`bDmP#YO\[;B1l;b3G>
%Ku&U5Qfs$)YZa5g`&*ai:C0dTF?Z>?`AFShXBhupcYG7GMU7Lp-X94^-W$\%3'm$F"=UiKTk$U2M4T]@`/1KD-;L@!Z9kq"'.6pC
%VWh5V94[Wt3gVd)<`7K8P.XICE?^A5<HfjUS=hdAQ:GP@Xr=bGe^0GtN@Y[4.MR7%[;69)Z'PDIYG[LTag#kK9R)D'_F,4WX9$k.
%.LBk-C3^,F1j5gd7]_nVo!0%[ZOW3B-)0_:m=`_'Bd8[4(0XNlm#ml,0i9-R+4btb6raAt@^TH9M]$7>]0hr#X/=EP?B,muAJ-dE
%/Zi/&Cc8EYngZ00JHQ5m'.(M?@C$GLU5<X&k3tA?p8;(PXF`VmE\W41#WZf6Il86%FOg*%k&YoA*[nZp0nCO-)`I"Y-_db(3Fl*"
%22S=>JeL!)3=UD83,t[nZ)ja'C*K.n,JBkOXJD;m9CajW`/-0sfUP=&A4<n7F0Zc1/lg)LQ-ojl5@[ir:ib@\a0N9mg)N*Z>NY-(
%/]Yb^QRF1SK^ltB*9ne&W]nPaS77pr3F_Z/3fA0nZ(0fAM1c3[Cm[;OS0Y"D[.^_eWa1c(.4.`AEQ.(62UQ&4NEB_O`,aM0C)X@'
%Nq1V=<1@F/d9"`Zk:MH[%P9u"Qpsa>38nG+#o$fqZ$E9D1fZq*<X!<i4C*+E^jjVXiE(=(CS"_2.cA)(27jta;Fm<+@^omROW_K?
%J?bQ@A-)pr@.SYjn1>8h?8l<0O^NI%n1qt9M&;i:Cc#h0.aM=ak[m?DBs<b:NP.c5Q'a2_H*C2t0#u'I'-^n1@C$Oh_Q#_><FQ=G
%c\/\rhW2LFlnb4<b9M\(-72'tnA&W\_LtniCK8e36i[nO*d`eM/(*As(%>TWgNET1`Is'b0%au.Lp/?OX\*\rUAuL>4nod%<asVb
%TY^1Qi?a?f'/:K2fkBk_<PVb&W5h<bH*B&:]%T8KW[*CYe`O\?>Y/8!QoG\q!Lo&S&QT(:<G&nd4:r>/`?N/So2Pld=<8m'9JM)B
%L'omY&Lsm)'3CS&/+["JRIcfu>ZbUVC4H]8j+J'p-;;?s_.Fq/L/e7qQ(irp_?,s(>ZbTpBRgJ+Dji\;@U__6mqXg*9NW%6<ga7E
%o1W7HDs_U+-7gr^28Fm1m=MuA+`X4`j*cmg&QT(2<@MRt`$W>&QrlaY$5,UVPrY)u'#d7q0[A9@csTj==u@m6Sd$^7k;IhqCKdrm
%#g3=(QRO7XKQ4gtJdACYg8\l(nk<-c'T3<6R]q;L.k>d7?Da)T&]PJ'#qi:dW2gUZ4;/LGKMc/P$PlQI3KS4N`.Wq#?J%d[@9#Qr
%2,.2E#V2CB^jl]+R]q;JbJT"".4.lEn\[hI#ce$TWbKBA6s+sQM[2sQ!begDC7!s,MMVsS]WdNk_5`$mC>,mS%9Bq5,;p!sRBSa1
%_=BSE7>cp8@@XQai5)FD[)u'EM'p.AS6/0]B#<h`#V4XUJP7eL,)dI!&klCBYZ<2HGTNrV=1Q.+H*GMKeH$2HLP[T[9TTP?LQ)?C
%ec7^7Es*cn8-59U0n0D""?+:ai]45'b.d<V-mV>?0q>Ig,SIp3+DWK22^h4A%W%.0:Db2dClX6o)'BMBJ-dl-9UpptL6\Nr$eF7"
%[phZS_$NV`Q"_.EK?j]OS'$C/_;],)0(Qs!L_q183?m]q%6f9BCp#`;$WbOkp>@_J//rthcNahC_T<H),[u"*jbT^c2*h"=3QIF*
%Sd5^3@T$X^cA$eh;dndXAs_RiMMW$%S?R$%P/8+[JZI#G*1dKFJ7=[M9e1n[_?-6H'#fN\(bSoN)ED48OM;NG#m(dUKr&u2(a(1W
%dh2l+#qP2KP.XICJKfgb<fT^O=9G@<22t_"'c%q2,f?'_/4^-VOM]0T'.IDc@HE:jL,J`_Y,3?M1;h7;HU4phYbiiW1;a0dE$E9>
%M&:,43?lRR%?SXG>9a8!J.Tm+`?`Bjjp4Kf/*C_Y#07Jl.:W']jbT^f2*`WmB$5emY]A=Ko@f^:B$5eeYT-Dg6m6!5MrTeV!%6=t
%M-R<O?ngP!Yrk]R:9:u:!m+m4>h1OLb7kU<ij`Kn5`7Kb/m$5^"ghAQ.4-XtZ=S;b/3jOq;bX!Cj-5N)0@g-f>V0G$n7&_]4oQc]
%ehUi_?EB[?fd1p3@Nn5\cYO;OYm/;6C0@ln)Ts@Z;I_:_QD_an2usZ2`/-I&fdO(7%?T#gZt07uQJN9iJ1Rt&/^&3F!DYV2@_tMQ
%^MF%_Ym*b_C>#nC)p?.;jMkB3/C0?AF*YAC02kQ;LuXh]!^5*73F+4@(=6Qth!e6c/@.CC+A49$#qo.LS;?3jN<28o!'+=Z9,?TF
%j`+b8A(g?a6(1p/`X._T-;MMLb!pq&COhqXVB$'8`6&9KreqrBerqZ+'?^K3(F^\-`,WphJftMb]&khaU4>A23K72eI%FGFOF.6l
%ZC55=j@'C^'LNG@Ca9Y4)Bc"0[U'86!(g57g7rSKA2VoU#tL0?EPfm5'.8BVAYYA:f&/?r@a647#u?`7<GV(UP,qEf^jN"]b`1D%
%OXDJF"S'N%,ZUq^-[3O^:I)d\A9D*D=<q%?/NGpbQ3R^D:J?iUiei^d[TEXmG*V_O70t*Ynh@=>Z8s;$J:+W-D8H:8@KJt0?Yi.$
%`>Tl2X/sd`%`fFoJ7=XOFTr2gP3%52M\HgQJp:e#OYPDefj1kO+?0BQ=^AIjhe'u.4^il"Z*M32jCO2T'LBC:&P3jUJFp"A'ams[
%njp#fZHS=4.:WBVGaW"b71arb6up9cI"GGKP(bo+FaNa4Ot8D#6-<;['2G9h0G25D)j-Yq#"\9AXV$-u5a(5J@W>qX0`lC8b(acU
%!/Y1E6kF9Q7.S>9+N^Zub/1frR^M8=33p,L'X"6k'IZmNUh%Gaa$tV+$hCsQ(/?iP/<:I&,g5mI+Eac%W-1a-UmNhJ`u>s(N\!`m
%C0@im,Kg2.ilIRS/E"V?5iH:3M%jrWZB=(dJip6&.18,@>0\1=M^*#kZ@F08BQcsRVO0mda"\M>N\!`pC)O@.,Kh<cEFbJk![t>o
%9RoA_@3U_92A-^,OR1N'AH><P4u27[ZDK2]8@!tfQfM_8M%jt-Z;G#OJpac!/IP+T4AIGjXD,iZOt;Y-:8F72&]ZC@$'$RXpM/Be
%J0Si.Q#)U71M&iZ=b%/lUmOCZa!hr6Ot=]KC7;F^LF`rMM^?P?=cc!O2XHSlVO0mda"JA<ROh#*C7;F^NNC-\^IaWcT7JQ!!%>KN
%0nCO/@l=ZN=WQXQ22FlP@4#,dUZ`h_XHB9M!L>:U8ZtN*EKV!Q/ZV8`Q)kJE^)D9S'#9[,nQn7M-#7$cS8^#^*[eTo0l\Cl?WN"Q
%.TmdfIT7gjG`o.k\&R8Kaf69XN$l`I\m<Ss-RM0unAd!j8L1?h`36110uA!BQ(1#2-:_+5+7U%J*[7+60ejl,-WZ'p*a'NGHrZRY
%!>JZX,o/pMAW%+maK"r["([:G'JZ,_8jr6kl7hP)W_fJkN\$5*M^,8PoL$EVjcRF''GDp)3+J4eUls8:g/h:O5QN-5`STk3,[%,q
%FI5[$j\#)!`<;&8mT:bZWFU.=p6DdD0U"$u'T43ZbZL6(Q3RaE;G<U:iJgh]P"8UY=^RR?$PUW3p3L1hA=5U^'NrsmU3MN(_F+f6
%X:gXXZ9$5*W_a3FbTk<k`8\in@g(qVjak:l'GDp)pgTMEjH7u$elQJ,_F1\e[HZdDZHSVgR:L015aaq_,qk9;2?G.,*N"6b%21-0
%99og?`KFdo+dbl&c.aOiR:64d*-Z35BX0ZmqoW_X^lmf1@^0H<>8FGRH(]+#`PdTm:>%%WA9F:3eMLk=8QO7*iO;@`ba8PR=fr_t
%;,!L9j-Yf-79518?VP#G:h4jA0T)rGao[U)>mpuQ'.2^`AYVMQeR?a)dujkK=[fa=hkJ2\Q7S]MC9h-.QRO7Z`::u>J0M&3Up$XA
%$TPFS:b7X.BupF:/.WG$VO0U\a"&)4P,o/B^+r=sE+B];)h,ehV07Up'?Tf)i?X9e'60PJ;4u"q0^C5FA76N^*[_^lQ::kk4L1D]
%&;V#6.,qaJUVMuA@FeLlahgHO$:"M:6^Fl&##$;c,DDI5-;qd%b=7(-$e)iPWA+c:al_i"#%WnA;bXu#Z?a&%02Y91aH@ZPfgoY:
%eR@%\4LJ!n-J?%L&&6)Gc-%G/30#O#'OIZ05S:pb)i[h&3_93!d6/"2,qIY.Yun:?,s4cMr6-<Z:lG\>Oc;m]=WO;eV/.H>8QN-`
%*/c+9#@@_(A9j9hiWR5V+Ptb,A<PJOg/j,cA\_!F4A7;pX@-2_0U&T>fHkg2JjMm;O).4)am(SMX$jEY0UF=$'oOFi;+DSL--JZ0
%QRO=^"EDOQ,FbbE1VZObMA/=?PuMPsD5&R]'fsPc.s!"^R=ZVO&>*c,d`Lc.odd@Z@6.O4.Mc$MRNsSV/<:KOUnC6j`%;pjFL!qu
%r^s:qQq^VeQP>o=bNrB!:0+fi.8HV10G25P)j,6J3_]N&;=?YA-d)V2ilX$/"=BApJ\oSE'In]ZAL!@8<eo@8R6_3:b"C79QQs[/
%K,/'`[@mY5M?t##*5?;(fWm42X/q[ZiRkFu;Co7-gCM,jZEeA7jCJ[U'QG,!OeBn7%'ZTp$i%"i<%Pa71M?epQ:D98;Ga0Fj.;55
%@2<I*AJQlUbM&_0Z"6XV(=6W(__0%;'GMnRG\A><Q\?;b9nO5NAaRlXCg#5S"`.<O,s\&p0G2>e)[X509`JiGZTMSqb3*UA=F=9#
%Qj%k?3GXuBAI8bZEP/VT+O%\*Ybj.u'4q8C/AeK&bQ>X4NtbotTL][83u\LG/Be-1)RDP;<m'Sb!&2PH?'&Gp=WT!(6pZAJNcR)k
%S6;3\QJ/VeX";&C7@@`</BfRogEh--Jc\@\pM;*7ZS2P6ZXuL(=WT"MB9l]-0Wcme'OIZ0:_C`2)[4Zk#-u%MMjuVc=#NhTT^dkM
%=TW%A,aQ\Rmqf0u0p/2diLNsnO]b]e=^^iAQJr%RAgnBO0B_`=2`\3il<D_N?J1iO;WUMk&d<uG(p7"!)Mr#_4qk#^;^b=!cE*7o
%XjK'fZVlft'94n"d<*r&ncT,Q(g^?&,.V8B4rGmmI=`)l2(R?QN_,[NK<OgUAH>=]EIrd1%%jU>OlWed8-FiBD$2-lN>7`o#>@h>
%/EX=%%p>J*<feiRM\HjS@^p""La8>;5U';ZVbs8ZUfe`f->+)1,Tl/76*;Id;Ga0FiK[E<O^(ohM.!Tc+@%*?=\=@d&'a(B.'lTE
%BJd3"=Ye$_j@'C_'JZ,`C.+6.C*41kBuknmZ2c@$A_&\L6$?B2'jdc1:_CSsX%"ALXN"n*22tb#?WP>'CPkQL2=4P.?rl9;_FYFU
%-Xq=3eVGK<eNbllH?QC;r3?N<_?-6pS6=;`+o,]s[qJ>C-_*RjE?^-1<fKXr=Uh0Y26C#C?<53Pqd,aHCRVRP]rVYW-rNa7W8b<t
%,=%XH5Uom;-Q#[U]Ko])!%0+#Q>M=hEnME_R$[2l]L5&*,*#GW$?TD[Uk6"5=e75ROCHXL/Rt+0b6"X31'NAh31eeOn7=J=%b@pt
%H,?YI2/E8[PZc1ujXIN6?Em/o1'NAh3<%SZE+Uth'%XF&$"_\\A6=?r8t*/h=\P8Q^XI3C:3_>A_F,C,C_Sk8)TW/!RBqE"S(6or
%2`\413L^-;>1G7Ib7kX?ico)\^mW_<6<MF&-(J+-RH9!/;J&XMQ7uol-F];Y#qo.PS;?3qN<3Tj!uYN!HPS;IZPj&Kb*Zb+LCTKk
%!i5<0"\";.^=ao2Ai5Y`ehh#*RTY.TP;CA^TS#A5;Vj#4A-rYYESRlt+O+XD.4d8fBqAI[EFuQTpbU2H>?#^+B,2VD'.G>+`:;/C
%Jhd_>_WIg\$e!8]BprIi:G^0*!OBr3l.o]0!l]hL-AZ_$&m8g(O:aCSaV6$@?WL+mZ+'M6o]dbt"ajI!2efH`6"(snD`/LoAi2b$
%/1(c:R.,K+h&_!&05E9?_Xh=J)c++/5sZ]N=#M6oAi2b&/094k&tUc"UVnG%l>1V%$*u`d3-g+M6kG,i7+0:o+=4+"YVcXsAp)!4
%Iu?%^ZW.5aAe!!;aibA4.Y9Wk,EcY>""@YmaKYrTbQ=SBN*5il+O'CAi?Sbf'1"addE"&CJUF\(:Cs&cHs'aa7c3@O;Dk/9:01WI
%i(EPa"U0c+0%l&VR+4Gc=OW?8.:rT[/A<YkAO2>Z!#8h;TMQ6=-QA0fZPoGJehgu)P$(AcQP>oBbKO+NA6(JP<JhSA-r:':a@7Gu
%X9LGs@Y9=V"YaP6Uf`RYAs$bW1!:eqQRO=^"S'T',g37n1;Yen(*o<5FDL'_;.^7N-sT%W-pXMo375]bb!pq:$duk#4i))H1M1p"
%=H$Ck(X`:pf#ZPkH'*[[73&dQ,UfuA*NWhu!m3&)'oOh_g9Z;bb<puM.4A06ER%%*1(,kS=p?RObj(&p!/iUJ)RP#MCZOiF]M(Vb
%,*%F:&sQO\(=od)!G@^R$KK@!p+5.GE^0X<"U0cCrn0i(AjK<se"-`5=dkFS"*nKQHPTFiNP&PYP:.hS`:;/CJM@Nf_HQXac^<g&
%@PMIhHPTFiH(=@J"U0cCrn0h=AjK$kbFSm%=e-L]`gC>g/4_N(JAOqn'I_scB-Y6["W:`CCDLNMja^ePAsk@]P0?Pl[Kf>;'I_sc
%B-Y6Z"USU3>?1fY=e-L]P:t+<=d!81fdMe^CDZ%X$47JeI'Z].bGm6</2^=)QsuBX>ZHkpQ3'L/.;#RQkS5Nn;@G:mZW\VPbc3??
%XJ&R_E0OMj7T3`Q=itDV@>\2[5j4I]-qqSKc"bWs0ronjYUWR!4CqPnXjOU+Z]o4.JeYPUD;?F4:lpLlQ.7(A@TEXm@FZ>d#u?uN
%;.<F8<OV&ZPZ]%RS30)7,)/HcMb&k2'deT6ZP4a:199+ULJ=1:Fo!8Sb\D;e?DO5b&]5io73opT$5::V#"8llbjn<0.'kBZD#n:8
%6OGJE:o&p+PLZCi@oe9i@9$pZnsik5[SC\b/6*B6bV?/<-$bW)!_!NiX;6p<ZRX0(b:He`A!Vn-`L1;G/Bfil6\UjU-re.Sb%_O1
%0ronbYfrPi3G*,Deu$YHEu(X?ea-:nQRF7W`,Nk6&]lc._Mk_!6@f1dZQ)dm`[o"6+O'C9i?\g<'JZ,`>""OtW\>YK1M:-Z=iK+i
%Ef=.5cGCj52H6>C0qjaFa"&)0cE%@o_J1DoCs";i'8nWhp-LIVXJX\t3Ji@)6l`CH'H"/+9F,E;Z[adR,K4-9Ras#tbjn<`AI8bZ
%EI>)i@*GW)+foD'!lh=)ZN4GgAkdUf0P32e0$29N'Ir*%BVWA1<FJX)e"?l'=WT&O1!=M;#dYLGJ3ZD?,*%".$A;OsAqW&/=hpD)
%Z8M\6`iNn#!m7UAgEh-5JjMmGs(hftZRX0*bKLZl1<\^rU<K)"/>15X38l+i$57ElZVb,SW\>[!C!Qk#XC?//cR?+NV]SSfb6*G7
%.4A*4ER%%)1989FYfrVk8S37D=I`M$!"C9Cea/GaVP$`ta$1LHd]<d3_D60JAslYD!19ijL(lnAjcRE<'GN"U3+sPQRY==ABek&N
%VO=:;'TcmlAg:>bRTZ)R\lYVn5fj>lSrH.0=VYP&c/gBJ379@kY"==mB'I"n.a0\ADn58#-n%alER.*!c`@KE_TEQ=4D.^#Q&3JJ
%Q)Ve,Um[KbODs1^Knpjhfna1,<C'YfR;R77Q<>7S-=rLB(S3A)@tYLC-qFJ\a@7GsX9oWXasogd@*D5'Hi,J8XNZ1r(pgMbR/iY,
%6:DHXCdaH1W\>a#9K,$eb:F/=M_Ze]?Q2Zpb<puM.4A-un]=6Fc`@J;_TL(diAn5Bef'",1J9TZ$M2Ka>Y/7tTKj+-.iXU5ZRX0*
%97[/nbjn<0.'q-^KkY.EUi7L]"c=Etfna1,<C'5ZB$A+CZ]`"rfT]NRV8+@_ZFrg!&d?72+<K3l,ahY@6<JR&QO8r#nj'H.ZcjJA
%8S37Dn1k0$MBFP)La8Bg@7jX6cb_6>2H2Z]/@/ttRTURZ:o9UVac#2DN<3`.-A@]o'.GhR<mpBo[n*iA2[&`rb'CTE02bW>LuXe\
%"D\e8KOsj.+O0IJYt23u4UXfe4An/$Jc\@\kA2D'ZS3W*C!Zq,/>GAF/@3Qn"dE0/0#pU!'I_s#BHt?\Kc+;nK,-.QH(Zk2XD,r]
%b,gR9+Abn)LuY%c"Ci2oKJfl7^mJ]<JhY6HC!?_!X<QCFH's7N73(c4'H"/1-*1h*ns!8u-l-CFZt9>MQ3RaM;Ga$Bj.2/4B,9W_
%A_&E*bjoP,8XX/0/Bflm",2pe-r.^#c:3C?$WFnt@hpDZjagkqAgo'7P$,aV#Xf#W'QMp7OW_lbS?U5+Kir"6*WRNqQJ&Subq'A?
%?DaAl&][$R"idWQ-\^)%pT26pRFR^/:oldcWo\;%pcPlD<A_B%K`m8WM;auT,EZS=iKM.$N527ABkC*9R_ktjbqfEP_P`eZq/F"[
%"bhdMY$!n+BkA)4/Sl2$kQsq!b,i^O<k'umEh3<KB$?\HllL.u@RLX.X<*KTZO3$6f#[#'7Vp'q`!Bqu.W"Sh0$,XIM(MJ!N/6GS
%eK^5e<oF_/l7>=jiH*3eR+QS=ad?(2OG:X8Qpj8;m#o"T6(oKW:KENIP$*Lb#ck5'0831W$_bESZPj56;YVND&1Y=d6(oKW:KENG
%Q<Ao;#tn7:s/GF&>-6J`XP>JMs6t33QgZ*KG=5B7"Q=q>2XD.b-<XfG<FhC2rd,l!cF)4?qckiZ`A)48p0BPX>O`7Z@\.4nrK=IG
%g&"C.Fnqpi47<k$>@qeMi$=<s"[uoKgOcfVAo*.F1WX%K/>M4IXN-B\-*p8PNYEd.@k6;cPg!a<KM<M"Z"*M#eCN`*@s5T0A1X-s
%h7$b*:DCc9@jTl]FNe?5KKYnhnq$q_/;)s%loFYC[`gKT3)^M+NKn;fdP@;9,A^X3"rUWW&J[6:a!rIXfJ8A`n4ZPUP0Qr`J2*Ou
%'DB+>3%<=D]e=ZbQf!eUH)J_c1OFc&p.65Q$B!,42M*ZQYnM:4B!H!7;/p/jY%FqNQ:\oTU87!(B-Sh2)(T.YFr":oDc$/hG@>Zs
%B<c"@#,UdP0N"&JSHWj5@l@gCCg2H+N*-5D'kYW]ZQRI)-8\P`':nN,"Cj?"+7._,@`RgU9WehT)ma<AM]K,_.V#*hRA-YDChEhe
%ZPa]jb=]+qQt9+LQu+@uJhbHAi(-^AFLJLfN7j/TY^8G>at0;sb,e*oJgI`^./P/V'1G47=jBK5Aht4>cL!0+bhel*oljnh^<@;X
%QmGXLUaRWPle)Q`CrSZk[@Y?p=X%DqZZAE1Y[`tj_3q$rkcADa(peqo<r:9tSB7/+k36-tR'g9faG#RU/$o4=;Nm=rZCMG%17JXX
%Y4aC!3J0)&^QG)q.C8_0[CMASCVRI[IA/,:,.lMF-*t.Tj4`n&-_iHOe%5BKRI,G^6"dWeI1GCr66`_$%8o!O$VISX+$(gp+sg0V
%[B#o-9!_%pbS-g@A18InB/UP]>^J8#aI;Mnnh4^cqt#N;ftKf^N>*[-A1\arAi:G<>e@]=A<LPUPi^,4&$4j9+t5KLPSB7^ClF\5
%>Y&i$p<Be"c>;5qG!!$RUWD(CHSY[MEMP!2,$W_C/[N!Li9EllOY_oo/8*P?CaEd2;8JZpW/0eOKCmCMJr6V,fgOD-gWu+$c$Gt`
%ABjO)M\AN>&R!9]l']eM$s2VFUflbh8[BI/.S6t^#tu&p6t@YaUguCP6J+eHoe`./RGFNd1@&qgOto,I5)D'Q;(4P!fa,_O2T!0e
%$7BC8ZYf'P^Q_l^-tLOG-TFtf':l7A#\+VX@FngDOYMci/7Wk#=]/iD'q?_1MU$)tKJJIVY\Q7gaI-mn"0eTS).uO0*I49qRA-YD
%/8.CQZWIUiAtUGa(.iL]G/d[jAq:U8.#Nl,FuG"1Mj:M^4.Ad0D/EY[--a^t9@E/Tq]sH$77CiP)aTq3:=ulC/5!5Sb*$@"Ul[Bj
%SDZe4:3<qN+e2^%K\bBcEb:Gul-+IDD'[Ad\e!dk;,VM%ZQZ,I/;7Bafn6BZ"op2if&LQkCDKa?RA-YDlt8\!ZWIPrpTk*-ZOO,<
%Zt;JJ2R6qW'Gr8+MU$f3Ji&t,'_V\VEQbH>4VG0HG5I)[=khtc)lSTbeQC,j&1+Z>.q*c[9#-fO<?Q;'XSkjREQP;ak.XV*`C+2p
%gLHJl->J5dVdY1sCtVm>)7.l^05/S\bnJA9Kg]E$gOllW-E;d%fdK-r(+GZkD"4D2)RHig\NN`Q&rhT]&(38'\.c=I1P^qBdeEEA
%b&$UG%On_T$I0>S7:Re$KCmA7mY%]3$5p0@b#2iB#r6*)'UU;kM8i#na!d?Mg^%+:irk'=qi4b;P$,Ck,VGLeE"YZuJtfN5m6O?V
%'0!dSOQDX.6tH\2*bDln(/_o9U8VblA:'E(fgMC8*bMrp[d6N,(1o_TEm8FV:FR84$Auhm[Kl&b:#$%jhbHu&1Q/%[A_%M$pWOg1
%3)^M+NLakrdPIB&'@u_*f?A,1^mSK$^qi)*6("Um8^ghb"u'X&2o=.baYma(fiNY@Zi2Sq-*tZ!NYDXcB.Y&gR8)HB47b!PZ\Zb%
%AnR\]AJS.ZRA-YD/8$1UZ\^bPB:pP^[c@n5;J'R7-"XNVq]sH$77CiV)aTldg^?1W/NL.nMEA.#c]U'lT[6)(:iuE;&Z"*uXg"Bq
%aI+Vo?iT633[gfJenZ@\M5$O(lt6D;Z\^bPB:_P%(,8t3m*)f3bT\Do;A9h9rG2UJ2K:24bd4+h+t?NZ[H*I\B=@2K3)LA(SaC4r
%@lA<SXJ]4hRGI<p>F>)P8?SB:T[6)(:is.P&U`9MQ*?ik\Rr:coq/t"4]*uDbQ91P;%s_8h/!@(Q5a87O#V.$XHca4.[d]-iP[%K
%p1%Og7r"487CKNG8nJ`<_Of"3!G0i2OZ%4$XSm6Tif[IArMT)t755D-c,M0"9iMIhr-!\7Cb"c904d&p\qE[fe$[N<4AeX;[^&1k
%AeUHH-@=XDP$+Sk.^R6h3N1/634?ka66`^r%FQu#\.CP-UP+TZ"P8,@ZcN8!Qd!<4*%=L;a?hdUa)'a%fOSn^gbF__/7US`Z6a&t
%%cU#V;FFQk0fin[(W%LpZ)GmD*DX(!CH%-h*O?VYi^cpC6rpTZ3bB'"_0V4)N`eb].C1(,\RQCP_3q$rLb*+iFNc(HK_7%B*OB_\
%QSIf?Q7HS=Ie_hh;,0N&Z9^N`'0!cT>MaGC/:b$Z=[RckAs!as-jkjQ:,YYbCuRc`O0`(H]0HC(f$c0obiZ3,i^cdAL<`OPJhbH.
%Y^(8pL"YM?=+:O_r[Pi,ZcEGH'ZEIQ-QBphjZ;$3B$$B.;O/st_^tVh8.*WV77CiF)o@s'3nTj4ad509%D_OGB:L8T2V3?iB8WFX
%Z_%]cbAniobd6BR+tE$(qSS)1=l=r;MK5GtSIM:9EZaY,ZfK:N@frr_fpQJER*BK?`0m?ukcADA(pi!'lSfLlAs&9'bg&=D_CT^/
%'1FY'=jDckA[r=pk#q7dOd,+RHCX)Sg"c<f*%=L;c>GOn0["UC*bW#mp&G)Y1$`hF.qSesROO,Oc?_C%1<Y*M*bW#np-8VT1M]c.
%Y*_XUE24m23r@S9c7Cii52O'a$<>=(*sSuX2VF!"(!J#"l.\$h7S\rflj-HB95Up-j5qXu]<]5m1hDm4($_)Z8)*37Qma'q44t4@
%=r*T8:ZDO&g%2l=Q(O*'C#99:<n[(JI)%.-3],El,=n^`<kt=#%:a4=76]LeohWA_4g2R1m89U*B^B%qO>^5kI_F4l$OE3+cYdl3
%r$fXWp/ba=P!qo\SgYm'S(A7J8=!FdrU7YR,E%d[.Fqj>W(%OO_0Mc>BImFZN#Gj!I!olE%jYQ$T(^,UlB([#"BEO7f04uM6lFD)
%\;h[@Z;gO4H'RZ)&X'-1HJ"n]=G-gsM)(g1CE5^@A$P1H1Fj3\T'(EU/.:%34gi;$f6Se&1f6XtG,uoZBe8qh52kO1"9hn<A.#O^
%5,^.N+i/GuP\BDb8!(Ge.X1R<8p.D.P&7s[*2U*ro=EL5S>Ss#V6aS>i4`*qlY4*>Lg@:Kg"*R'k,[A_W$rK"_/Z3.kU]j]Lp,=m
%lEM)+=+k*VY;<V]o88XF3)N.e<ilsm="89^\J9PEdi*&$*nGB_afaq@%MM9!BA4?@FJTo-)-bL0779gjSY;<*f6N*_M%ZPhBoV&\
%;Le"kXD#,8eq?GFYVWSJhg2)@%d/[HU9ePCTXRgEl\qoQ[j!%qDOloTgf@eca,)RGZY>EW[Sh+G7og=.&JFhA4_H&.JN`Qb#NJ2i
%dFklrYZe$4eKZT0^n0`'petn7Mk@K]G!eUf6n-Md[RLg3WNaoO.lG*D--Konk=FS:=MP%EMIN<dD2hr0;HmodDfhiTf47+kL%VXk
%IKtMZ?`gU%gGDJkas"'+%FP,H7BNQ%Z4Sq.+s0Hj[CU\LI80Okk?s`,+X3E,(q$R"dX(W]bm$gJcedf\?U!d+!at'SrMWkS@$E&\
%,"pK0Ks+V*HG2h>f_12I9V'_:4EeE0,O\QHPUIRs$e?G#Y>i\kp@k\UMI+WCShXG^m</j\SJ<!XH(pOZ/6RVT]M^'AZS?kV+e9>r
%=ZU>Jhc$K5'e-tEU6LHb=^tFD;B>(EMg-@1S[GZqPc_:G*J3Q^c`tgT3)N.5QE3C+?)`Y1o."mp+skEFI4mc!]-8L[:)">'/SgGS
%="IdfbY"_7B3u13Xg?`hVbYibXG7E^'.$%W_]#>uQ0MGCnF82!3\)niFB/bkeE;^Ji&jk/6l)jil<L<7eRL+p\Sb#)B=0]k?*<@(
%lQ"4!Ua53+=9Icge@YS4+q0X:ZhCc/rR+j9%RE7\a9[e>AOL1Q)F8#4b1.A6a_(cLQHs<NQ#p&W"NQ?cU9eToi3Q>7WomF2=o5f(
%b@^G"ME:&`p,SKeMMTQh21j.H4f^BJP0^_C^$Da@>#Ao96>2`7,!*?e#XU'7X3T'a6>O3aeR(YDLK5*mT7?[[YKRZV6tb*i5\R!7
%eJVOfBE^kkd-@;>KiV^ea,)RGZYPOCZr40o%'='I![Z</I<hKWeoRAI'M]<Q6tb$g6"m)a<QhJ@ZPN:<gV3I+B=3Xn%BTU:NY>tl
%BA"1hB;I4\&$9HM(=u\.>l:S-g/E[I=V2::-VB6@Z8I6YqD6t'EfB8bC3q$]O(rp!)[-mTN>"P@6>Po\=f$`c%`1b2;R4<ZoaK6p
%C)?QS>XNAG32uX(_eiDLjJoAj[Pfj#`\m_H<o>5s'ZEIMkBb/3Bmm2MR>^=.2&dn0ro`@nC/+$ZT4s\I>5`@0r2hoi!aE]/#P1>,
%dFc"$60_Y@W]mVmO-EiHU!rD$a!W2-5JN)V?2^BEgHXH''@,ujU6K>m?-aXiX`d_5FCA?fD2-0:V24rJ4)qp*]j'1Tc^/0H&O-Po
%i(-^C1q'T#OQ'<QXB0U'[8nO6Zn;?"=Fl\uZ^C&^rPO6t!\$*,PSB)dlkuS2ot@BOcc_fM>)RrP]t\]$*c&=;jaV`ahLntB;>e(u
%?dD?2T<)uE7uDnmZ%bDo1q;7NX]&-j,[6;4r+H+CZQ^l1>-FN/miZZ$#F4h9$I0>S7:R9`"t=T#b<"EYoe_$Q%+<\<40;&rrM"-!
%X6815`THGE.<`#aK.p/e'9/"<)5PO-Y3K$C=1+,fo%.m;s(l"Wg"GC_(/9>P5gmEmlZtN.+.U,7;,/rkZ=f7_fB90Jrj*KCSn@Fq
%_/Z:;C?l)c25&3Fof1^r?q^A>Nmo>Nkj2g^8?d8;n&/qoC-<pmf25gl/Rr/eI(9JtR'a&=PVbO*j9-ifEh]n)N?H*lAaRCceJVub
%fD0eOb8aS/V%n2_4j;K\I.T6k+t>QN'G[1hC]kd00'iHoC^03!ZgDNJB6Vn6oF8V"m_jF?/babG\YRlDpIUl(MMf].2M)_A?Ik@P
%X/m@@qH&0\,]:aTOHSCXoecQQ'r3\:=Ps;eMIN<dS;j2]g/WS#M"A3Z1X;#YRNfB9>2$^i\[WYA\$ODsqn:$-g9ON69Mnc2[^-#4
%=M(S])QbgAT(f@]]D7>WeDZ:dEH9hnSsDj7/hMU*,=OoGg!3'KAF6[oQ[>hjcsC)@Bu_.LmO?%:=c4?`ad+c3g:@gS85W9,QEq0&
%g%Vf7<*aD74F>ronl*88(2O!OSk@X:QSeceQ<d\]5"Hne8^U\e7M'2!ZBirK=,SO#"sE*o->^Na5?sVaB8RS59<Eo#0N"&JSb6e)
%A[[f[C*@/M0l'4oIaF'W?fI8'4&.cE#AR^G7<Z!\3ah?D0"^dM7LAjqaN3p`a#,:H?e2sYomNP_-6fMD(e([t<F((>]U>EGS+bB>
%^2.t9d$N!gT7_E`OGGH!K@I`k<LnSS[^VfY^+</;IG+G;6!lNO34J(-;BiE-%FPT!=*;Wefq1:cbGN"Wrt8q-5BTMa78e*%-n6E&
%fc\hLG$10fl8KFJAW`3'bkcC9Hs$RU-AlgfZB1&C%f9S^mC&n83'gh.[<;/O/o.qQTC);_kK+,[EMP!2+q*'H%C((ZQeL^jp*<oZ
%;-CK38(mV4ZEm7@;8JZpW/,8#KCm+9AY!kBLY7l5=X7SCZ6!Z5lcWm)RJ0Ve7uDmBZB,Mn(Md)pfr`@spEp9RBnqa$b^(IIY;)OF
%,a*a878XZMaTh!gI4d&FXaX%h@s4%;`b_6>^qi/,6("Um8^ghb7M'/nl)hKk::;jGb.d^FR.YZsp+!E%:Eh/G;A9h9[;6+Y[ZfN.
%o.1ccLrqJbB:aO:fi^+hW8L?H<-4G4+cP)LG3]RDAB^p`!EdA.%(*2nS,Hk]pIUl(MMf]62M<g>8T:5WQBYN;ALb#Bcb@\@p2^3@
%9b[b"B0R?PRI0(EqCRDc=la*BZi9GcGVEM%+A<L26t\_'6(%%M\'@*o_JDh`oqsK*oB`O%Aj;-Bi(-^AFS<$aK\9+Dlcc[\bT\N8
%R.WFCYHRI5.rNr+F#[#2'V4W-#[b$(h!/VI,$u*F=h:\ifm8+<q8cL9>mG)<-n%.2fat`2-b7d6lp\X)K'PXD=V%i]HsQQn-na)f
%8K90OMU$6#KJ8mo&N1^H;\HL^5'N?#p0!SkT;2*gV5"oh_H9N;]#Kd($;r]R]s.<G%a.mc)3sI3k+aJ.[QL%?KP+_n-n?3Og+,eM
%/Cq^&-l=Jmc]5&B!2`$Y']@`$@*h)Zr:4VZ77knZdU$?3B<`]T!PhM4M3_"YMq.p=5=CJHcg?R`TP3\*Y;!)be.FdFiM<,:q`J4D
%!`Pm8Q[e+]X(UB::)0To@o7T,BqD/mfPu&3"^P</A]hC+=o4G*=u_@;7;:.Of3V>.B;mET\Qp%'+OlDZ!p_UVrI48m*Mh1o\>?I)
%ZtSfBY:p]ue/,aV/X=[<02noW!V[_?Q?^6VU:b0@DQb`WZre9Z+tbb#1+q%X>p8qb\JFoj3*)7ZNW&5ZVN$naA"S]h\=d1ji0AQa
%[E]-D[DWC^'no(dKmSNQUnn.G'm$@=(1>gQm7Ono8[_-?ZT(u!Q_Cb&NM+rOY*!"k/Br@.aNF-kf6bq3U+NXULPh7hZbR%/fd<_]
%h&.#'>Gbu3[QEN4CV0RVoJp!;(S*F$#h_+5Qg>3mW8!@("9t`A]0e1W\&8["($.ksRiB5S:"1W(;_C,?`64B_SJ?0_OVO<6b)4Is
%2hZ:BW)\"r>kDp%PptSXPY:</dGQS$($.ksRi=Z-:#%>dY^h*_c@OU)mG"1P8\ZQPp/"UaF>gZQm+XqiZ9.0BJ'54/J3--d705(I
%0K`@"(7dU+#R*.a_<f=S<*D@YA70/^1ZMf;i?Bm2<YQ@@7;`AC2c7idMRZVk9=SdUf3fa:pOKje%2FRcB9=.N`MKlnSGh;2rO#rX
%RBXFaqtCO52:uMZebD=.PEo-XNuOk32GrRPcBkj=.P?mi9O.V/H_MG5m%mJ7LPhfMZH*L'A"0]IG.9>`7CJsuqt_rXGPFW2X).6K
%5<-2DMK0oH^l;6'S$785\c,&*HFQAcoPitV"Z5!h3Zd'$77e(oh+"BM:"2<f7WDBu`9eopYXI:*Q4$^H1+kOfPS]JTD3RfM6l!()
%7Q"LC`?eiVME?238'SJPh/bdCMXhss^(&M-S#D2;\RcU1.-#In@*?'t;_Rgu&hPq@PSTArDNob-6uB:eiDRQFj0DqFR;o4dQ>qJ\
%U9o`XE2.O1->]J`.@44UR?j]/qM/$k3sIgTE2k<;+q*0S4h$8?BqL2j[#g.!+hTEBG=>^#\n,,cXsbqI45;5q[u%\1=4!eX>N>s(
%g_k45nofs"cJi)'?7qd#D?q2J.VbS[`l)Hc\@hnDbK$/,92p;^[,>%`>'(Oj0oTA;WEhfVKNuB*$+VSMU6#c/,+9tgMp=4>L5nnq
%[6*T8NnZ',Y]SY<FOA)S=E(8g/NOj,(c!_OeaB)'1+q#71@C15W8f'Q1fP/)STSfY)j_IYGKM3NQXErSmRk$HbhWD7ENU]C3pYQ4
%2D,`rmZ`VnDD+ProPmsT73@k1_6K`AkcAi8(qEUQ]2C6f\V/-?EbEIi9&+Du3!rSQ@F<cj`Xm0i_KMb\C;h26&QhB&Vd/N+-!Fu`
%-n[RXg_`@1p"6F79AR+2b7\hsd%u'DEPd]kk)/`(Zd4WhjISlR05JfshYre+gWRe9<'?6<@_Z8PXeWR2gWi!T??^Y=#17]YOP#)h
%d/'$4P.9"/A"@uEp)kUS9Ro_rV-lkR!:;TC*`ej>\ab.DM+T6^Sl59-q4EF?)ttSt:0PO15#W.0ND8j2gW$$oQRjTMCA4jiX5oi\
%P]X[R>rNEM-^HaYi#Q"mS^m''g,&0/9CGrfF$L&W'88haK7!MS*CNIk6^NsuI[!>dW!5imb5G'O[6G05\G5f6n9s'4L<[6RYHa+Q
%Z&e9dU53KaD/Vi;7ZpBm7ASeFo.^`Tham/ce8I7J:IaW1ViW3aEZ$._lg2%4\^KHlSgR-e`kM0AD>q&-[%^48rHe)--!X4aI5.^.
%8&(6VZ?lm?Dc6W*r*B+8p*KHQ"*4()r?RPX1IY0g=Ol9,I,%PQDMGk)eN*!e4"+1BDG[JH:l[VkjSL%]jaTNUg/\)^BcE:";%s\'
%*UWCOno7/[FT^tb`fL"7?k8J<PkK7Vn&7Msh,3n-J)l4ZG]51N[ejBVB+[33T[6A0<&?M?2_'2FabObkI70<I[PshmV"Ck<m[0-?
%:K$Vn;P'oC).`&7h?OGDHXNQr-Q9&=j0t:l.JAH=;,6P[?QQ8@FQ6nZp#hgg`U5-9Gs!S;UY5?<*L-+p>&Jd%6%P/mTP3\&DbrW8
%-ri4N52'g5MsXPP;U2IHmuUF"-KUMolWi)VUu\`V5;`7/,R%gqU68LLZ0gSCdUgno%7U(i9/ZcV<3EG$(eV2bU=-4ep%b3<b-U>e
%l@-P$a\qh(S10>QbXV<dXtjN$D7s:tIag1,;rp:k56f]01ofA3`WkAH/FD-CqI=)Aa&fJ=H]FXb<,e]_.Ooeurc)#MA.rgnmd&`P
%YnjZ+h9X8lrb1tgPam30V]*Abm<O,>IB_d\&139TU9^<VHqPn[2UU+=9?:s4rd[MmSF9*mLXKeDPkFddpM9-og"jqEqs7_VdJP8Q
%Jhohm;;';+^87&<Rq_26?9`a"pP(SmYG9l=V:SLB7fLfm$7F0,kP2X2RJir[AFoP`U8Y#,BZJ/!V<MUGZaV$)S9md'r*]-p55_21
%?00c?4>-$u)pOsgT07")eP@A=3)^M+PqDD!EEDD9RJ(?/)L9tFj[H"pSbI!ja/GW/jSQjOemi9]r@=/&OR__@Jhohm;;'Bh+*WuK
%2q's=E+AOJV1!fo\K(?Vn#^%NC$X5DqlXmNUhsIaTA-P53)>bOPo]822j?Dta\q\o8Npgh-11:kc1rnTcME+6IG)q1p5\jJ?R;>h
%%i4(0-AmDLZD5,.G#GYaSp^s3c;F=r2S8:$IbmlSO6bKVXu'?VFgQ5c!hs(s-7E#.6^s*s>=t0>Z_Oc4ID2Y=`eLmL/&TXb_qKFC
%T<J6e@6HjR2HH%YNAYR2Tig&\>rqWR5(H*M`>Vl^MY6n/'PmSGL[R#f8^Z2=[NLV'HWc[KI5W;R*U>N3FoA4JSIC@4N\t3ro0b%T
%f[7,UP-nTHWC82LTqGtfY'p,DAY&02;c0krAY4U#U6oW\B3Q(tg+M\*UXLnj:p`\cVJ)Nh@=k4rb&D7E'?*@L2qt'oeok2_'qJ+[
%KM60kr_'Wl-W)2;)G.c-U8VblAm5tug9.K'dA]l;^pMsbIuDm$q&`EuZqb=fZ3Q7rU9U&%;+tc;rl^0oSn#mLcMRHVds<?D19H*A
%ROQC:`cedZ;6B5s/hq[,=`UX,Q/u2q3(pP7*5mu6W+bO1>85iGY3T&^P:bTOg",rr=gk_d<_9_(:gfqC-UhN.gS2d?G$1.K4Td:X
%ef,<bX_4@Sfc!DtOeSeqCh@1uecro&UM$AKffGIZb*&l>VBspl\FrLa.E[OnDDm/bD:`oudJ!>Q,[2KC9=FOqi_$L6U&lQ.8Wh]P
%`fR=iZ7\#g1[Q=>)GsYG[:e2[](L(2P;lL*'q$@b%,opCl]S#+eIE4poD4pe#hO6$.HF\X.QC<?'q%L-%,on?=E:e3g-NS5U9]Gf
%caAI[lXT:F3)c%VR8%N,j4^[%ZD0S8%Pk33B!RWD\Fs<7aLF]?E2G$61@*X2b-_m:ok8gVO`?AZ/E>H:D'@pX;1Xk(UrY*&@i3g@
%=dL9pK.SP(H+@bL>gHeNde0k@dS*M=A@Am#]PAm&>1,4ZP';ne/FhH_.cakW#Si<J7&A$WCh&ja%`%_4B<W]R)Gupfoush>?69WD
%Jrue+a=M/&\CXtQ>n22cEP(o.pBt`F[dSeW0"4$n5"J%0EREFlhQ4XlYGmAi]N(_Zb,pMbBjR/%+e%"q!`WR'-n#uagBWr[ju'SE
%QfBi!^q;iQTjV2V2m8j'GCS,Ih&8#aH(p[>Chk+dJuI;R8DPp,[9.DH>k<+:?+k^4]psV!r?1aUYKR[A6t96oEY?:'`_u*b54NXp
%mWH,7K4hdIcTU@N"Pi<bSoASn'BMVl:&AlB7)#Njl@.EXQ>3RZP\FM!b=FqpRS^h_U9&%0BjXnMf[nJBh6..-QELmbARG?-mo4A!
%r9IcR:_XS&*USJN&GqnWWLmhG9+'D)l.Xa=g".b!U4&#scqI;=1mYL%/2?d4lD7g<(A2HpAa7ktd\;2]::L>`9MJWX`gZUP-&@)2
%h:2D12(d?aVe\ea-"(qD/p42+-<=NM-n6-Ng)$"k%Q9SNY?Ztq2R'J-m$VWd_'W-#UaR`S45(ei2RQK0A;^q@\uq%8FKeiP70boF
%D4cKDU8S?7Bk'-Te5#s)=<:MAnX<RJ'"1#-3]14W.l^HA(7e`J&.P*IWb8c:dVFGGC=k>s;X8HdlTU.]7:FSHfEUlMWMFip>;!Wr
%!%\M)7U)n+-<+rY-n78>gE7OqPuQ(GbJi'PQ"aZRZDH.<FI%=d#E"\=Z`ssK@8f\(-X3ae511cc9%YrQ;XH?H![C-2dFm4XOg(g[
%H6le$Y`Y2b@F&IW^":10c4kt$B58I)_ks<rQ#+R[55$dGH.XY#U5,:7GZs'"9j#!Pei&>?9m+u:foh/NYY5XUAQq!r&Jgfa$B*3d
%2Md5bQ.7D>P)>7'\;EGe/Xk=+]<sau'G[1HD%IGoF'j'8-)]$?fG6k9Q!bF*rQ<D3f]W2)F/UK>,-0H@-.naqWuhBa<i?-?;->6S
%ImtWjrUfgXM5$Z!XDO_S@!Ct=/gXjo$EDbSg8I[[Hb,EnJplNSY'gjOMP;<#Zjfreh6FKd0rnY\d)I,@"#+TYDK!a$K`1h\?[cRX
%-mp2XgFu@S*Lj*VpKJ!Yf_2GrN_S0>&*!e0lsAZ+SgV[;aM'Q+'m?M3l9:.?P-GU`-"D.G;l2$\63Ti9U*?nH%9%u:Tt1$1r_<gQ
%fKdTfZ,ZtNAF'e?Ae,U;6tB::V@1"7Dfq]H'XG!a#%63<^/CXWCd`thC;M_o<jcAYYWF^DY<Y`=2Sub9lksNZ`pRdJ_O7.&Lob@/
%e7!Q;YJ-Vl`X:DO@n2VtA,C>(qQPek(b(?"aJq-l,Bg!]lM1i4)1/+[1A8r"A7Hi60N&T"SMb6m)7rgooh)Z'@un'$=Z3]9>EZ7<
%g';Vn-n@WRg(6/cVtt/3`9pT]9rolbgL#r>&t<:FRA-qLltU%_fUWANB==X7Ck?6OfUcrZ'\cdm^Q0(?7;#sH6cSQD?p1hJQ"$Yr
%&_K.QB3T,i7TOK(-n@>?gDDhlVZpq_[T&,YW%8tDZRqGOVfqHk0N&T"SXjU+*P57$ousjDMOhc>"=tXA9N49t7T=?&-n@?*gDE+t
%VZuIPD:-BN<gJg6fp5gH#o9&1$-T<S[uK?VGNuD=fbT#&1sUfjp9A8=,p0bdP;H2P(7i-U$m3)[MtIFdk[P8WbK$45Q@/%R=M[[.
%=EHI10mr=_4k;FFU5hsL9HAJ7>Oo&R!3#TZ;,VKO[o%86NtUbj2jTM:lt5d@S$Do=nkkB05Q*K@PSfDQD%>!Rh7:V<=_?W5CkQ@K
%g%.ROZB5ll.>j#&nhs!Pa6qGhm1hdTlER7eO7h/ODZB^;;*T61ioBJP78_Ibh<$C#fps%`X$)-7+hNaD^iZkt2,_fCY%aM\H(pgB
%ltpg2L?qZpf!QACk[`<D9Nb,6/]J)XfbKP7EMAh6ltga1K'^d"f%"rP>`ar</18&A,DDY(5QsZ8ZD+V1c!^sb48)h/4@oQ$)bAXW
%[K4ab+hL!3fb65/\MX#f3D;kbk;qpDhd#<$m(*5M;RS_i)HUGO.Pt'<(6*`Z%TAMG\^#LJ>*?0'Q6g+g9M89,JNFFg'SStc?^nr4
%A9[=FG#ZQ)DYs8`-/0J6N=3%SPW_j-'9-jG%b$Kp\]fB>>#MXB.:?]4<(f\=P(FoI=jbpO##V\:b^'It;R0N\YUh)I#$Z,RbLe1^
%VC3u^S(\]S2Rcgj>O->t2SubiC_&%lA0WTa;Nqoe<G`9nS'.lrflBA:ZEf^2:UXMi?2?aA1IYa"g"-FJZFS97=Wo*GC6(G8A:(cH
%L2:B(7Z*q7Za1+8A94BNLKc7L-<?FrmHKouZHLP01fG)(SY^07.@U^I4l'"-G%tS5YbZ)2[p5)UYi&2H=ROcO)-DJmg"^7(dk+_U
%#g9NZ4g:$4NND&/;-%f4[R$^*0!q57QDEk!3.[;Wdk+/EAY5cdU9NkJD1bC4>\NN+OHY[*/15eA>B7"W;RK#PU8#!*%AIBSU%M*g
%jCBJce&e3?QCR;Yc1+>%<chBO6)<l@;.i&K`6phAZ;':rglcMKqsC.)H[bg.X=,eIqqE5Nfo8Y,chD"LED8@.ZD?j_+\CA.$I0>S
%7:^fcV'rrQX7^aC`X5>k_ogsW(1lZ>;Do8$T@SktIAA8@,0S^p7G3ZXXo5DS:3Hh<VNYk@&$!`H@isIS6m3.FgP0FaDU`ElP>Qp$
%G-:`5:EqsSSV(+OX`EOX4AejA2R[$tZ5ZkKB>:"!P)Z7g,s,7#iL4Rn"_VSeP!h4:@=#3uelntmU&n(JTX(-TS0ofEA=F2(3DgJ)
%O`bN.U?omrf#cr'3SAZ[Yat.IH'Xt:5_Wg-_BQ:g%9&MI\CB6)5bqp8.ne"X]*]G/L^Hfi,t2?K)l=pn;5JF#7LC$dGpe]UAG];^
%>I"o)WaMVN.O*'i0J1t;/$3He,q"&G!`Ja9[3T<..l^HA(7dU*$n8f.WV&rn,\?/D@9HM%9XZ3XVm9+X9MnoF2RO^(m)GmQq>Ko*
%j.^@CAP(SSEm-u*#ReolKgfWU)oKg9ghL\%+n!HA<gJtepD'jQ:3dq7M5$g0/8SfEfo8(q4kt'PG$]YM"=MsA/_=MX.l^HA(7hRE
%$n8f.WO8X.0$6XcQB^e$QA`'IO,2\*C;Q-V[^Iodm)HHaSo2(fHiM2)Uhii9>a:;Qi(R!MF>gT_V!Q+/ehc-FP`;mu.GN<'=(NU-
%3)^M,S]u![/%]f'[6K@9b20<\gWB0D$7XX.$Hs1F6t^EW6ca0#BK`[R);,#4'!c/W,p>>N;(ti]'qN$T$mE6&U\.<h,\.!,e&S&j
%Q@/&Z!iBA"-n78^gF,6D[oq>#@,[:8l`eD=Q"8LadL)=O?h;`b@mu7%=P]8c-/"7bXWIZe>,W^9@$s3%SKFSe9s!8H;,f@f[j=X<
%G/Hf8H;kP[YU'*,r&Fm+g$K\r3iQ5EI?S^=K/caC'ogIT#ud#CYgg6iITlgrqdt3Xi'R-YmNi$qm,J/A@%Jbo)GAftVBic^X7^nA
%0MYHdhH/Tgluk7]j;"uX6cYJNfH-mr8^UYkQ7s',NV]^uZ1b#II-c:[ViCXg[4`n@@hU:N;%sb)<G`&kOPQSUq>nAt!?6AkroIVd
%jfd0prVYDW^<[J36t8em_Xq=slEYl1-nd"0@NU-CFKte<;QV%QgIXeeAr=I"Z)K<`qQUu^=g'MP1,d!)AaC.EdDdM8E2G$7)S=]9
%VB<EYSTVP\qo/fmYYWq5[ZU.'fQQW6mmf?4'GHHhD$a.%h5JMC79WTo2^_hK?D/-7Cd\FsMR&t_TabI?;jI#J[:E_gA[=-dm$2A6
%`'2I^T>[.lYR'W0A!kp(Ac8@?jk,C3oW\;9;QUtOgIX_C:D<t$B1!WV_PSC?R;08O)c<"Ap.VmDNI@>[5)D'a@F86,"qe,>aEkj0
%0#p0@6=>`(L<?9"gF31-k@oNGF]Pn9,]%5#T"1/VYn<3L@F&1Oc.E:0bnPk#B3?0A_PS+7)/Qi$qe-q".:LP19?l,03VH%7.12!Y
%au5'/br+(,$7XV`b#GTXYdIs,DC5aU4])n-STSc\!LkR?=0NtQH](L#_-Xqn*UMhA-Y]G+/3<+N+;QkX=Kc+*(,j%81i,P@Q*BWm
%P!T7>8^Z5D#*H-h_KmM4P-C&_\$/r<718uP)^#;/79S$kfESUb/([k[=8nniE\$ip>q;1DZ0c1h/!j^PAKR_AU:c:5D1cq>=6cut
%hs.@DM+scs"ab\h$9!tI'1Fnng"AhD`3.a!?1W=Z.?B"-T&s$cqq84]L"Q,?`rp3/`9qfQfH1R;Ntb#OA7HRU&A)D*FW9"15ll>>
%%DW[^LXCa>fP]u(S#=A"'3WtBl,9aW@K"8c0.6b2Q>]eEqq8:iD#[*t"U2N1E,:RK`C+6:)l=7[;LN[,eMohuRm:*h[eZ*9LeXi+
%85WDU2RQs3Yq,HJ[kU2%$9!LA-#C3mPmXc<n+N)d"%=pVg!b]?_lhKprB*ta;P'``I=j5[HL0t4*Gg)&e4L3/O?t`l@1h2AL?ZUY
%e6]iZ/3;DdbAsh"U*U$`@DSA+Y_]Aq_c1)Hm&tkU-8-mQK71=94a$s2%X.I,;FLu*_m9[sMNT0hW"%43?)bM``ELcq!>Wtc4k>dM
%NMtc+;-%e)ZnXE(9'+SZfV4(JN,,2o/F46jahmI_T7i?$W!Md)6V,jpWiMcTb/;A+LOEeHPH0h2V.'7jE?u&5=i$N#Yion<@u/d&
%b,]0^V*8^IAVo%\D5e*DYb0nR5#W,\Y-Y9j+_"MfYFaFu)R7Vf=>'`ALHVDL!>?DD_1A>Vk\P'FR+R\(X(Sf93c$'QM:e,1W=0_C
%To#MBkU^O[GhA:=X$,-6(\VjG9u,2]4kW^Lp<h&I#pVl9d952CYcoY.<j-'2Gh@3CEP!,k=WY"!gHlr>Z@Xl$@F863`\=YJ<EHA7
%M^J.;/mecUm$V\3`:!LJbnPk#B5&=&`3.Tr]oqbu@P>\=@$rA8MRM_XGGGR8MR&t_[Z06T=/rH1fbRl[j4qtHj^NSF,o+$>?j\6<
%U8#!%NM9m31fqFl?hL0)gGWkQLYXN;IahfP:HsVlihE]gX[1[F.lUNg]<?/m2P@?LD#]G^C]jnhMLqS-[B3<;YU^Gi5CZa`8O4*'
%qH$It$emlr(TQ,KQgi2%NRU@-B^BPNQnI_th::%Q5o&-X8Lnpl)\e";Yj9%!i&jk31cDd"9G_lKqJ*(_Y6e4q#'Z<2@b5%YJ;RV_
%*8BLA1""Y)ehCsnQ+O(KcVbW=EO&:)g'n`oYn7]f.>j#&[^Lp)_lhWu?2GlN<,<[gX4V9@![b@*0D/hJ-mopkg)?gu]5i%:[D)\f
%;R+s\@&qrR<%2(-%B.WI;-5Xj[5CVuG3/#SR:f+17Tbt64VKEHfE_l1'SStc;d7/h@9;`tY.d^U'cRo7>K(LZSr>.BKkD,o'I?1X
%;-Upp@TT_9p/js7p*Kr:lksS1`C<g7UaR]R9A1L82O@Lk?qVtmCR^Tc@XG=*'>(,i&4_V`,.+8-TjgrIp%)F6=NR@J,:cF+[O4`,
%7Vm_]B55;(l>13fW7]m4mEq4\Z&dHp!_^N+BZlt!n?g&pU9*QpCP/#,>[d$I2Nrt,XDAX+UFhd@""?3+PSB[BD%IAMql;=%;C+5P
%Z:o(1[Tn[&;8J*`V!./\K8A/b?L>Rp$F-M%c\:"gOochN\b8</.E[Onc8LK8:$pI]fTM)NX=P%>K.T#k,:kfQ'Gd71D%IAMql=A6
%,nmmB$O'5j)/RF50)Hp='SStgB,ee-jpLFBCrsUb=I+e,P:`6U"f[*9U9*QpD1e5.>[d$QQ:1)J+"^.(T$`itlnX*j4].FXSY^07
%&\EG?=.?U)5!#sn]J&&sD&"V`UD/'(qJE;^0d<[Q+Ka:M406IA=UNbi,:lL-Sfa,TNND&39iNa-`GLiKlp<;TUH9u>@ulch!Ro'^
%ZKsosf]1bccq%#57/"&tMQmO(=_E'e;)*58)h;X4B=k->0m6=h*6])X6tC'PVAQpAPBCc_$/4#LDA:R>cG_aD)]S3,0MRcEOc=4F
%?L5NTf(M0YKmU(eP@\6:J+Sh^%B/2U;-$(C[UFKe$eAGC4@oPm4'rAGD.=LbKo<4b4p_lk5nVf$L2"X[ggZh4TgCduU9\lWH`e'#
%`WfCUVC3u>gY+@+fS*P2B:pOk)dul1p5HAS@j<Na;\U"0F`!LXlp<kdrWj\e]BnjuA8Dc1e;Kl@W.B5gR#(*D_pi-3m]`:^Q=T=c
%$Fn_Ee<5`LUu4d@<ckdW0kBXf*S*$uP)N\pL1SKZ1Y7eLS]3jM1F6JoLX;VNKT09I`7er^$5[1s/Bc',)[jd?a9mqAAOU6/)ahUt
%ggTTdQ@#n2;BKFc&%:8OSbbO,1IYa"g"+0IYm]/cgI$d4Z%8/l@sbT%?>Lkj#)\#,Z`oE4@i$c&p1VXWfLX/jYs$i^0fH7&1IYa"
%g"==6Ym\$CHa`$Jm'9uO[ZBh/QCG-XgF%!<-nID`gDE8#i>V$MD+Vf<=I,'92\tthOVJibb)4Km2MR8u\A`c+>Oo&BP+08-T%TEW
%m'KR:9Mno6QF8Mqm(tX2rX^7o)d-<)p<9tD@jcqE:D>*DB5\a,`\-%U4i8l9fO[9MQB",7/a:oe!)kRLPSKb&D%n)hUVlr6_",m3
%IG%>JWj/J#6Ij`UR%JgHX%?"5=PgJ/h:RFMX<.Qd>.>Lj@9Gefr"+6lAd)h)U8"p)D,K#l$W^Efs'+6KL"`f8YmHd]p6"4X1:1OU
%UhluCUaR]2S(e^U*P5.;[=Nof[f<%h]!76Xm:&:>m8Ied-m9KZgD6Y&]24X_Oc0l/Z)nb9?n_55KMf$Km/)tVa7_Ji9Ji'C/PIg@
%i=bGo:e8Pp:o9-;!@;512R@uk7:FSGf![9WfEI/6kF2u@@ioOgY[-T?:K3X<IA=)D_F.6t1cD`n9Jq!e)XHRcntJH'2PRK^CjWBs
%XMuSdBVm1/)OoFrVAd'cNO>HH-8qU(9Pae74DY45cP+8c@nk^pP[YH1Yca=0Bt4rTf^WHufToi!P[_Dqm4Z40;3VcS-#F#gMI!a.
%H=g=nYr=/e`*SiI9Pe;EB55;HFnW.-9Pj!u?E'5alsjj6QAIb'/XY0L/7kHlRA-nkD.mFHf\Bn`R"<&dfEfYWZ2NXEYnrm<_3q%%
%kj2u8W7Y?aD5`PPI@M7,-"=W^?mkXW9&Ab)4Aedo(:?FRChg2G_3QUV!L.G0Ha)=kfF/*^'LbH'=W9cHjp#T3[Tn]LW([YI#$WXt
%-<OrY-nIF&g)q:lF]cstbI-!C[1QLZ[Kg%'`P,bPq]sH$KgfW_)aqU+%dP!K8]+#"VM76d/bWX0/3$QB(7g.r&.b6lX:5oMYkRhJ
%'"2c]$F[/-5Gs?)U9h!3ia5W0onp.&?iqb!^RhEJqq&mq%2:*WB3cIp^ZOtLR;0jY:4S6!f.5@&IsleNXPcWD<f5222McjR\[^A.
%?'qT%qnCo&@Asdl/c=DV^Rh'H)_4O>aN?D3+*OOLCB&0A`]e3nAbt"qIRsGqZ@Xl$;%Zs`7d7h9=C-F5$r1;Dqq"VhnRfc=lh`DH
%T2kNeZW1@^+"<))aO2t?+*P['l8njOZ46/HNGAXS#53-+,m>=U;>*#;-d%:e`\pL4G/aaPqc7-qC^YTE=KKECriTKl_B*[RJSCjC
%Lob@/oO2A^YP)>jaOl8BS1Fp"I^C>$Ej-,j*%B$faJLjh+*ND4CB$/aN.'>;.;8ge*,Gj&=)tOc4p_lk5nVeuL?ZV$e6Q?S5fhT5
%c)=;@gRg",P(O4BcqI;=7(0L3qQMbu=0Fjs(,j&c/aO3dahpSME2G$7+q*-ZIFoG7X6Zu!*#<#@XR$M(9^M&*+;D*$4pLU83N44G
%g+\65RG+]CX9B+R5lhLCk$%>[!>QS'b)4K52MQsWWP!N\>L9V3J%JgN)YONHUga"5T>[.lYQugq6YP,?g8fX!Mga7%b-J87VNrcL
%A-GG[U8"umN?M_ClE6_p(Ak=S<pD#>C=k>p()!nH<hF#^_P4B=NM0foWir#9((7ARQDJ&;Z7THn,:PTKPSB[JD%%(>;gJ%p[TJ@1
%Ub!26UMV.f)doA-U9Nj_Ch&jbREDRC[`(T")j[oEQmVON[Y7EA55%R<.12!Yg,=\BSZ0;KAm5hOR?](-HaYLO@O!BW;A9k:V/6VO
%4&^@rb-k\ehlJA?Brfl:gQINOpIUf&$B*3X2MR9`WP*Uh>O\m8Q76@jCl:K#8#Tgi-7V`&D];'bcI?16_CZ&H2_+^HZ@qS4D+Vh:
%%@Da0U9*SFD5.Bigg&[84bX@]ZE)e9\.IE9puoV5q]H=_j[E[%gOn!aB<JBq,pAD1NMJ*EH[\LD2NRtR76/cJg\*%$fU7VtlY2EQ
%KJ%GU?f9#PKjC2H#[*lSlt0U]s#s<p'of>4&(?6'Z+mm(0>6G"/p?!YMWJ;+-O!fBHL5c-:QuNPSS\ndLn1ffqS#rH-g5$KrTmZB
%G"]g]aOh6q-SS:0'9-jG&(??*WP,l$gX[^7Yn<43@lFLDA8FX;7uFUHZ)m>$$F)D<=18JC\CbZ"lb?_A]DdZaY`Y/-:_XS&7;WQ6
%LRkue\g8ST<,<gkWS$oD8R.$Vi?Z\_KgfKKgV_NLB<&.AH'VEGKOq.81XVACNNh>79j#!HWj[[3`QhFkm=-]]Uggh3@+d$<"dh]S
%fW]Y;M5$eZ/8BO!;X@'\ego=7N4i'h);AXQ\_)]FNYH%nB1X%1`od88&%:P.[qhbE>jN>Eai1E"T7i?$W!Md)A#S&0?Muuf*`b&,
%fZ;3UZ0fYr\.KZ__3q%%k\P!daOo!M4elj@)7segQAb.PQ:nJuh'[3<-n@@5g)r"+QWSUAc/`>P<jmnQaVJ*cOVAc`8rCp22Md8c
%%G!>gAob/-PbhhnYiSVr5_UPBU8"ut%:WdfIs%6VJ;E%1-=D\_*c/A"]9[jX7Z*q7Za1,#@8hOG$FV3h,:cF*p0c('fZ4EF'SStg
%B,ee-V@Mo,CrsW`932--HR;rPZ0OSF1GrSY3]l(=-8lZCcX]Zq2SuanlksY;`ND`HN"fhlB58GS`MOjFQ#0+3meb\C<,BmhA7F-n
%9Yj+o<-4G75tpY;d:*!>9r<t`m.\hWM2SX`gJ8p1f^mS<Tq]&Q/8g+4@OLTJ[]cJRm_oB0QAFq#Ob\phi'^F=7$b8Y>-S`@=Pkba
%7LGU:h1"f?@4QN0+1FqnMEU6:MFNJt,-nNadu']p`B'WG$C]TN8=:fJ[MNOj`O=Y)qDM-6'9S8kQr`QA4kBEa:=-rQmr;/U[bW;D
%emdeLa7_Ji9LQ=s@;<%\G?>[!KLBY;A;St4M]@RhYn7]f.>j#([Pgf0G/=`)qj!MdXk9JOlb?0\1-kpQ)aW-Z76(r_e:oEk:0_0i
%dk$p>8BN]mmAZ8Y'Ka3(S>ch<.C,l];i7-U^j>-G19hFWAR`tR9-uR6Jhoi(&_YZg.E,%]@\%q@67-m/:R5j,H\.qlm(?7+:)#!C
%A5O;C(-?Mk[DuG`Yr=*S@aA.L-8qS",=PJW=jk;$YnK&ucX9BmG%mG2AR^"j,nW5:I1So+Z6HZR%:N]nDQkasK93SX)d-;j[_M<N
%.lP7r1IYa"g!n"qYnL2@HaMm<m*[fo9?$U<bI,t.$dKH?7;#mF6cDgU@dVj7CU!o+m:(FN`EqoD8\otPV!)W2A#S%:/$(>VE[s&"
%Z;bY$[bQbR;8J*`V!'@GA!ko*ql;m5E[Q#JRt.>EQUqOOf]h)pEMP!53_S3E.X'hNlBuH[`C<moMXANO40]A5S>ch<V6dOgTjfB%
%Yb&t&<:"WX"La1NP:`cdBqM2hU9Ni4D.BNsM(>Z?Z6^5)@9G)R9X^m/-_q)=MR&t_[Z-ti-a']ICeH*ufoMG1@aA^\.Wu`Ge=J'\
%MU'd2MM_:/?[^UUjeELdZ?3sSf_.Dql(\r>Iemo_-nuXPgC^4r4)p&KAW_[^Yn<:5A'YZWa$s*KVC3o4S(eOO(ctTQp%&8M0.Wu2
%:WXB1Yn(U_Ug@m;%>XBc77km/gQ!u$fSOpU%snLX0D5DH9H3kRmjV4oI/m%s:)"A$Sa?\]Mk-feqIkTib1Oa`U+@2ZYkna:fPkHK
%&nOI@><B]D@OEe45&=HHS_-KT;R);W4deC:pG!X98rCWkG(aSJ:0:nPjN.^afZ+2(MqA462e$]#p,GW9m].R"8Iu?#bGu.XVJm\:
%Ej@N<H_aI[p3FJ?*%B$f`f>4ql,-9O>s36[=kLg<ZEQL6U4c7Bi(-^G1j65N9HA;NnnJ8\'^YcFZOL^Y/m*gU_@C-Q'4jRA4$1:n
%@4,rpSlqBWl\,Z/f,eMN^*ZToU*qKPCY9j,24%@i3(s*j!`kV9m;Wp7lgl%l+H@.I7;+=n6bhd3lGJq_>_J*</H,Dk"l3r<"UBpJ
%U9g0qia-\;[0KlQ_+o8#YhX$;WRQMoXPcWH<cjY66.B[&XYs'J]EV9BG\oAIkeKBa!Vpf,-m^q?fc]!+pJlR9jT]P^A9lcB5H"W&
%8YM9@XQV3KK8A.7=7)EA40VZ:#V>N"&>0Bso4n.FNmqScl)\TOLtCE`4Yn[Hf>u)IY?t2S\gC<oTI;6M9A1N>24%=h9M<rZ=pbpF
%f:H\R\j!Uh`$7]Rd94m%Ofl6rg.3CK)G+)S[:`YsXq;A8-]3c+Si2CCbsg/=e<4dAp/>N/f:H^([m$ts5f#ic<-7i@6%j#+WICA%
%Rh]hT:A4>hC;0,eT#/IuaZo\];A9n/7;\.GCMKhtY5\q<eQsIJ;mc8!:USf1$-j3\6tAk.V=b`GWd?p9b8NIGdj)a+j`ebVSG"Fc
%NRp*7@i`I,U6LJ8B>YEi@m>*]+$/%tI@b"UI+PFdbCiu?I?%%CSg;I6aC7&$d5;\<htMmB&2:.\gQZ*hFW%BV"=;[_kki^J,ta!7
%3]9[P2>'g29DA`(oW"%9WDu/er<EtbWY#o7Vo_LG=iH+E\;!'0kNX!4gT!H`2R!+CWr;3]]/<KlVhm/QZ@iZcDG<:Dc\(;P"J';'
%A1H.//>6P=F6ms-:QuNT"`0Q4CT='$fSV^I@PVe8&$@0V"!oWq'G?Q$CR@;$/>"QT?+s4+om*\fa\o*rAJOR;50&O63)()"Oi;+'
%.Vl&TT'6tal:oAYWFpN'P8Z-kH(phmls+%VeC6KAo.+S*k;a;*e"WH0Pq;2teiB6Jb)+Kr22"@lFjn<W7r#7t:8U>EcP,TI7S[oo
%-mq'&f,+iP2,.;,V=*X?4P/\eqQr[i.]u65@%&Jh3m6+lmPL2&H\A6DC7o+:dsdL2b3I$5rT.+XM,L(SJ;rM_;no\0=DFpdroKqd
%MUNV,W37+!Tm<)s'V,DD$u_TWV*2[n>r?XXV.m^De5h"#^Dui-;,25!YVDY^lBRqQ(6*%hA.$fb4JAKaj94Y&Eh]mnNF>LZV6i`p
%e>5)M9:#8S9<Ro5*PtsRM!1pJ@u/R_,Wu5\MUK;]e>-`+788)EP$jY*,W[I.(n*:(8C.3kP4X%%kK%b@B7)!qH;fFE6n-Md^d^&S
%+.G9MWAE.m',ICE]tZ[YoXJ.fY4cF'ntYTYmfQ!UdFc:,6+X!hB?op$=8UDLq9^.F<1<^3p=ZK:QYRUHSBsMu9JfeSB9XJ&=(o<T
%F'k]Q<j/2$6+U7Q$2Dom[]Mcd<R=VAPgrKXRjJK!`X;DJ;aG7uZWk]!^VL)*FM$\cJ*m`K+Pkm9`6WQ*A')iRQ$EdnM)(g1J3CgB
%:VU6-rBBe0c-:,OkXa$t8:&#'B9%(\`M9($rl8o3>$e+7PU7PRA+b/&BqH`K\QK4>.FJTdFT5Q$Utbbbr:=4TheCZeD+\c;-m]di
%f/$+loQ+/rUUeq1Wac*jFJ"ENGeRU(NjN*lS!0lopX:O=geDIT-n$"'f/$+roP6>YbI-JE5BoG^oEJl0de5Nn=eB&d/=2uElQ"._
%j[<VWHA3l?2Qs[&f^.jf4R#&u'CW-LRO@Lu[=+$\haZtfk(MlREh]gi4i<LZ5M%bW_Wr^22ue#(<2DN$cR-S0Bu?`rofB8!caA%W
%`ee0!Z%>-VoM1n0>hj2i(e_%(`2$_ccP`3&m5]>PkJfWo32(VlSET<HK=K?jg73r1c(8FeQ0r4(d]_Z5[--*)\,Mu6r7Ji3c%@iL
%'GR5MC^aJCFdo_\c#5_<\nU)uhB\I=D9nF?VuCG!#<+"i:D=J5*Gc9gqN79%[$rYe;VC\@1uO`#IOB;AHEL]Fs/\,a+5EC55Z(@"
%(9p/QkuVh!DE(j\V69%lb'DgHaQ?,W-g<.(5?6$$#u/mEV!0F?KD<lu2rED/[MVY3duW#DP`.HSQhD8cZE8!2hu\T;MLqS/Nt!:,
%UYflBQ<L/:P<+TudN2n::9Nb5Jp+AYGnB.q@\U2g%H:$qH?45Dg!U2kdMnC?0A!$``SM,uo=i!7_2ScH'?*@P)&ku1ILPCZ\`2s)
%Q@.rbIg(4Il/okT9X48+o_ZnQ%Se\AA"Y4u3nr:0de'S#(\aF_`KE'k6!;XCA(&*frN9Y.lGa..M,L(SN"'5j5?Im!FdV@Y.@.("
%.AkYm7C'N`4]?/UDt`8H#nI^R7;!PY7%F6ZlQa]I;fqHrUZZ8Qbair*g?pD5pA+?GVu9E2Vd\[7a$*$]7<oJJap)RH[d1M@k>u9m
%=fr]opTn<tYR>u&\3E.H\Z*\`pQIiL9GHSVA1JUq?i%I;kM_EIrH(r/57FH+C32CM^eUd!.b+4m1V3W-l>^W<BV[%+,(%us-.@$G
%ms!YjHnO)K)>;Bp<\=3?o)/+F;&=RJDC/99\U<dc0Mdmr0!^lS;`8LEomTDVp#l3InT*&p?1LJ8Z;\pEPVJN9fNkA*9V'LX%*"-5
%,-mOEdl;3rF`\Fmm0B#-(,$(S;&V_\X"2a"kj_rn*CNkGUaR`;bLnSOe*i"(gjh!jPkQOHc'0hBH<eMP::4C-LQqO7,LbgMAIfKo
%6tA:sVKggtC+cYSQXloIO-b15$Zi/,Pl&Um<B]e"Y?"s-A;6:-;\U"0"`9Y#BtLTl\-G1gm%%:g0O<UKd>".@1XV@hNNh>7;-66[
%Zsd.:mD9@"U%<!"gonS;b^sP>A_GTT@+sXB:CB8Q:kKEM8J,+TL8goUlZuS*TkCH$=>IQeH!@/jYkCT65SG)6_3(InkU^FX.+UjQ
%RS'plgZ,?BS6_[<f1)S^Q`Oi(I4adQ-Ze#i@AG;$6@7DtP-nTIRbWcY602an^A8:sldNpIS#+X6^=-E;])#!/"_W_0U9ghYTj$3)
%mFBa#O1+l^)W4G1!lj?-[3s^(Z8Jq>,;iUA3nr@*[^BDno5m:PUMV&ZkOT]&2lRSol)=#ScS#c[E1MP/*%4F:cGDJoEGY]OjG(#h
%g[%0(k:1W.W8(J2Uh`W3SXaJ'Kgps*U9h(`+^NiV/Q7ic':%UWBQKX]:heCjp12q"]?Xu[KTW"-kU^R\Lt>D;jehZD[dAOHg_jXM
%]<.%No!Kk":@^9JJhoi(d952Cd')iRT%S8NR;D3fL;1Fe]F`.SFp!(\>;EGS5"RP!@F863`_`l[JaV+]N4.iKN3r4lJ0fEkY\1C5
%%m)"90N+,MS[E;C&_dW%>b%DE2I#4G)qOo>P%TETB3R-r&J^faMMf^12N!B?Yr2LZ_"#a/9l/S'>pNldQ>S?6Z0/$W6Uc"Bf\Be!
%HE?M>/oUTlqoVJ[p'IfO(#(qt',sNZOeSXbXDP-h<S$V]?/kLAm7$5,(E5o5.e_gth"OQ_YqPu4d.`ZkW14c1gFGsk[9_GL:*5d<
%:NWkDp>!qf(]3]?[3$f,+)N*QJYJfN/8_REXk%Z$V`fH1<&mgq:3g4H.:`663RRpdp9>]'3)>bPNJ6a7VVBh-lVaY*S30B_7SoD0
%IE[-ed]noLQmp18`l@]Zdr>7lf-sK;IA-d(Ft2hSD]Lnk;F&8,;IH4I-lUjo.nmjg?.S+4+85*=PC.17Abk!P>l"1XN'PHJi$]'M
%V+"m"H\L^p[L9_.ko"5-aA-]d=@2_=[:Eem/N?^o(6+%8'rLBP0'r5.&)XFLOc?Rr,MQ-j3`*p^G-o)JU8V`VCp,OPf61Gd5OI-i
%N9lN2(tgFoP*:m,^e@U+FLJSCPjF>+l'ZG2a\H]jZCL9LDTU!adQWLD7:?d3fZ'#Y0+t4Ifa*5+CkQ@kfuMn$P*M$6i)!-O/tJPM
%&1dW%L"c.c+=fPHNPNuJB>3I?Cnq5iMUJ6*\..G/?_gPG^`DKI""da$ScKY.YW"!j:m;ZbeSPjNq]^mNip@j?gH3&#d^!MujYH1N
%&139tU9h?=@V&oB:j]\mUh(c#9?U(gPc\L]58X"9YK[c87;$lb`65m9Tq:5/]PN74H.b"/;CaZQJjVt@d95<1&[O-RW+WUd0g"cX
%b8.Ec\4&3#>jr`MTq\pX/8p0.fb\AP1Ye.]NO15mH\G[#ZOmtA.12!YqDO.uI?@(fq3K7kD;/qaHc932Z\]D6.>j#.p,7esS[d)D
%Nit)gM0lP7n,!b5AIlQ;,d,;8lf2oY7BmHXj$kK@:=O.Z;",YrIG*::Kg^XJ@r[0n2?SSQ-$d%.7q?k$+_iC+\/rbmp_24j'//cg
%kB$WA"86?aZue9b;ak[<=lmXPc;*#6SPO_\@<M9'#;G)MG!79+i+nB0_+C"C$B)t`2bn^C_S5@5QJo&uZ9:s-^.`0$T74\/#&RrU
%7Z+JqZHnM/Tq/.Oq?\8K$[UQ$b7qFX?t6^>\39=0NYM^eA>^BE7ls$*on1&uA\6^7^LNS.90:IY6=nl,$Odc(7:`56VbK6Mp%@p,
%0jN)_AmD4KmE_.=(DOC"^p?"%PSfOjDOa>d7/b_!l(Z'i&57k+7pU5H)&O>D$B3&@2bpJu_A;K#(GBHA'*?YBc83pWZ1aj2d@Mf0
%MTBZo:9eu:)XJJf;<.pb[`H.g/rJGC$]Yr*7VAb@7-.1nKtZM!b1u#L5g6UGGMGWXH].u<ENUWC8SG:H_rjeEM#BGI?=KjFRu*P*
%GFf<j1qFPA*%MATc=T"kd[d<PHNd`Ug)a<"$Du@e&hgY01GLjjPSftaD@ip3;*FW3][XDb^aua;AR;=j*hrfi0N=8PSHWpC[6%5O
%p<($I\im1t\4jS_KjO'#-=CMi-o!b%hB7]"U71E`HDu7\M4'\($GFs'4[t(13*2=]SMb<scT>!,p("cLH8@9Soq%kD._$?5*%MAT
%cB^DFlCFk-H\Ypl]uRMi]5;o`cqChAJ?q(6PSfrKD\1_d;/Q"6^$'f!0N7c'TbiFO6#>qfU:BE'H@lL\M5mn+l:'l_>k",Kde=6b
%,^g=Z3*$_1SP=#>m@2k:T1f2._kl/AIs<bH/bebl!(bngS_(p>7VcIs2:fGO1-rQk.aic"GaY7Gmd.\)SuA3,/<IsM-=Uqs-nlS*
%hA;P%i]$RFO6U)F:>!rg^eF:1qtC4KQ?;#oF?#.V7=!9_p:e1-0u'to4&9*Xr9a_*R,W=6>1!.aaOQk1MMfENf2)e5I:KVWIE-;-
%d/35G&=D<u],VUU^53RA.12!QP4sYVMYKorg/#RC>"JQ<>aG0@:?R>LmtQlIS1BJU`g55<$)2l9a7]VO":!BEhDPL@rAFpf?pOZ[
%?sou_/fHh.(RHQ@2q;_/:Dj7hjDP*3akufb\Ubq"]AZn_.uK;*P1Pd%@Xh>.p.DqBIs8PB/GjeV?';r/(mleqMoM(WjX#f^NIBRU
%Xi#E-qjVh5qKJR8e#7aTLc[RrPS]<*YON5n!2n-0*I:9W#@P=I?_NepE$>MLC*HT0(;*KYE2qdOZ'Q0o4oh"IJ?RTu$900GF%)3g
%>4Df:^o;h\H.9LJ:ocN"ZQ/HmEstXuXh\)0.uK;4Q8a[):*n[OpenHmkU032,]F!CR_9RUQn$7:d&K$^"&;kO/,<)R2Z^62n<nZt
%h0ZL;]\lad@"d+E;)E5AjBfrp9"p)\A9=Q3n!/:"jdV@*\Y@.NXa?gfi7,r`OtW)K1G[,UT?3Gc^0?2q3*-e3Tp9O1&Y."SGOd$l
%S<-ktpe8EWq+\rg>Z#$b<k_F1E,+TCad5\?GZEHApuI,kn-6D<9MnuH(;<X&E2r-Y\X,Et`+<Z@/,#\Ah@M4T.a![r_Dd>W:,Uih
%p6#YEi$#Ehn<J=A"%Qa<W[9Fms5U]bci<,$s83sW2#\SKn<a(1iX^P8L]@(/J,?jms82iPruqC$s7FXjs7B[uYKm0+s!'`=*^BYS
%DuT#ag7s@jJ::!?GM$8*I9GgME-8>@>Mes9r;>UHOWXHYn,D\BIe-Y8s*&tj?iBHdIuO$7s%EA"J,,H*#QNf@[(lR/5Q7QfIeQ'U
%s/2JRmgoEohu2sR^]+goqV?Z#qqqG<2h1LU5QC/ds8L(-rqOP.<qMII^\[JU5Q1T-s7?hOqYcI>s4op;oCL)q5ICCprq`huk261(
%hu)%)"Nfi%0E~>
%AI9_PrivateDataEnd
